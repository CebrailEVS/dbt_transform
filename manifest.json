{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.11.0b3", "generated_at": "2025-10-20T12:24:06.726335Z", "invocation_id": "d3de9015-62df-4f1d-842a-4581ffa711ee", "invocation_started_at": "2025-10-20T12:21:45.910132+00:00", "env": {}, "project_name": "dbt_warehouse", "project_id": "4efc1f08fdbc9cad77f5fbc1d1cc1be9", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}, "run_started_at": "2025-10-20T12:21:45.910421+00:00"}, "nodes": {"model.dbt_warehouse.stg_yuman__workorder_products": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__workorder_products", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__workorder_products.sql", "original_file_path": "models/staging/yuman/stg_yuman__workorder_products.sql", "unique_id": "model.dbt_warehouse.stg_yuman__workorder_products", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__workorder_products"], "alias": "stg_yuman__workorder_products", "checksum": {"name": "sha256", "checksum": "6ab031e00a9c0c64ab45c00bb79badd82743ee4abee565c284c49d9f7723291b"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Produits utilis\u00e9s lors des interventions (workorders) - 1 ligne = 1 produit utilis\u00e9"}, "tags": ["staging"], "description": "Produits utilis\u00e9s lors des interventions (workorders). 1 ligne = 1 produit utilis\u00e9 dans une intervention. Cette table d\u00e9plie le JSON _embed_products de la table yuman_workorders.", "columns": {"workorder_product_id": {"name": "workorder_product_id", "description": "Identifiant unique du produit utilis\u00e9 dans l'intervention (cl\u00e9 primaire)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_id": {"name": "workorder_id", "description": "Identifiant de l'intervention (cl\u00e9 \u00e9trang\u00e8re vers stg_yuman__workorders)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Identifiant du produit (cl\u00e9 \u00e9trang\u00e8re vers stg_yuman__products)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_reference": {"name": "product_reference", "description": "R\u00e9f\u00e9rence du produit (ex: EVS_NESPRESSO_0042605)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_designation": {"name": "product_designation", "description": "D\u00e9signation/nom du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_quantity": {"name": "product_quantity", "description": "Quantit\u00e9 de produit utilis\u00e9e lors de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_created_at": {"name": "product_created_at", "description": "Date de cr\u00e9ation de l'association produit-workorder dans Yuman", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_updated_at": {"name": "product_updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de l'association produit-workorder dans Yuman", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Produits utilis\u00e9s lors des interventions (workorders) - 1 ligne = 1 produit utilis\u00e9"}, "created_at": 1760962911.0252755, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Produits utilis\u00e9s lors des interventions (workorders) - 1 ligne = 1 produit utilis\u00e9'\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_workorders') }}\n),\n\nworkorder_products_unnested as (\n    select\n        wo.id as workorder_id,\n        cast(json_extract_scalar(product, '$.id') as int64) as workorder_product_id,\n        cast(json_extract_scalar(product, '$.product_id') as int64) as product_id,\n        json_extract_scalar(product, '$.product_reference') as product_reference,\n        json_extract_scalar(product, '$.product_designation') as product_designation,\n        cast(json_extract_scalar(product, '$.quantity') as float64) as product_quantity,\n        timestamp(json_extract_scalar(product, '$.created_at')) as product_created_at,\n        timestamp(json_extract_scalar(product, '$.updated_at')) as product_updated_at\n    from source_data wo,\n    unnest(json_extract_array(wo._embed_products)) as product\n),\n\nfinal as (\n    select\n        workorder_product_id,\n        workorder_id,\n        product_id,\n        product_reference,\n        product_designation,\n        product_quantity,\n        product_created_at,\n        product_updated_at\n    from workorder_products_unnested\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorders"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__workorder_products.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_workorders`\n),\n\nworkorder_products_unnested as (\n    select\n        wo.id as workorder_id,\n        cast(json_extract_scalar(product, '$.id') as int64) as workorder_product_id,\n        cast(json_extract_scalar(product, '$.product_id') as int64) as product_id,\n        json_extract_scalar(product, '$.product_reference') as product_reference,\n        json_extract_scalar(product, '$.product_designation') as product_designation,\n        cast(json_extract_scalar(product, '$.quantity') as float64) as product_quantity,\n        timestamp(json_extract_scalar(product, '$.created_at')) as product_created_at,\n        timestamp(json_extract_scalar(product, '$.updated_at')) as product_updated_at\n    from source_data wo,\n    unnest(json_extract_array(wo._embed_products)) as product\n),\n\nfinal as (\n    select\n        workorder_product_id,\n        workorder_id,\n        product_id,\n        product_reference,\n        product_designation,\n        product_quantity,\n        product_created_at,\n        product_updated_at\n    from workorder_products_unnested\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["workorder_product_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__users": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__users", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__users.sql", "original_file_path": "models/staging/yuman/stg_yuman__users.sql", "unique_id": "model.dbt_warehouse.stg_yuman__users", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__users"], "alias": "stg_yuman__users", "checksum": {"name": "sha256", "checksum": "41f755b13c4a8f2411b4e9dc399ad675898170830ffea7c01420a366fef6b440"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Utilisateurs nettoy\u00e9s depuis l Yuman API"}, "tags": ["staging"], "description": "Utilisateurs transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"user_id": {"name": "user_id", "description": "Identifiant unique de l'utilisateur", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Utilisateurs nettoy\u00e9s depuis l Yuman API"}, "created_at": 1760962910.998762, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__users`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Utilisateurs nettoy\u00e9s depuis l Yuman API',\n  )\n}}\n\nwith source_data as (\n    select * from {{ source('yuman_api', 'yuman_users') }}\n),\n\ncleaned_users as (\n    select\n        id as user_id,\n        manager_id, -- ID du manager de l'utilisateur\n        name as user_name,\n        email as user_email,\n        user_type as user_type,\n        phone as user_phone,\n        manager_as_technician as is_manager_as_technician,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_users", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_users"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_users"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__users.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from `evs-datastack-prod`.`prod_raw`.`yuman_users`\n),\n\ncleaned_users as (\n    select\n        id as user_id,\n        manager_id, -- ID du manager de l'utilisateur\n        name as user_name,\n        email as user_email,\n        user_type as user_type,\n        phone as user_phone,\n        manager_as_technician as is_manager_as_technician,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_users", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["user_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__workorders": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__workorders", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__workorders.sql", "original_file_path": "models/staging/yuman/stg_yuman__workorders.sql", "unique_id": "model.dbt_warehouse.stg_yuman__workorders", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__workorders"], "alias": "stg_yuman__workorders", "checksum": {"name": "sha256", "checksum": "8b32f36f9082e2528d1076bf2cffaa8a4730ffedf90887d5d2aecc90500768b4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Interventions nettoy\u00e9s et enrichis depuis yuman_workorders"}, "tags": ["staging"], "description": "Interventions transform\u00e9es et nettoy\u00e9es depuis l'API Yuman", "columns": {"workorder_id": {"name": "workorder_id", "description": "Identifiant unique de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "R\u00e9f\u00e9rence vers le client propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "R\u00e9f\u00e9rence vers le site propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "R\u00e9f\u00e9rence vers la cat\u00e9gorie de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_number": {"name": "workorder_number", "description": "Num\u00e9ro de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_id": {"name": "contact_id", "description": "R\u00e9f\u00e9rence vers le contact", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "technician_id": {"name": "technician_id", "description": "R\u00e9f\u00e9rence vers le technicien assign\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "R\u00e9f\u00e9rence vers le manager responsable", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_type": {"name": "workorder_type", "description": "Type de l'intervention YUMAN", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_category": {"name": "workorder_category", "description": "Categorie intervention personnalis\u00e9 EVS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_status": {"name": "workorder_status", "description": "Statut de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_title": {"name": "workorder_title", "description": "Titre de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_description": {"name": "workorder_description", "description": "Description de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_report": {"name": "workorder_report", "description": "Rapport d'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_technician_name": {"name": "workorder_technician_name", "description": "Nom du technicien assign\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_time_taken": {"name": "workorder_time_taken", "description": "Temps pass\u00e9 sur l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_date_creation": {"name": "workorder_date_creation", "description": "Date de cr\u00e9ation extraite des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_motif_non_intervention": {"name": "workorder_motif_non_intervention", "description": "Motif de non intervention extrait des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_detail_non_intervention": {"name": "workorder_detail_non_intervention", "description": "D\u00e9tail du motif de non intervention extrait des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_raison_mise_en_pause": {"name": "workorder_raison_mise_en_pause", "description": "Raison de mise en pause extraite des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_explication_mise_en_pause": {"name": "workorder_explication_mise_en_pause", "description": "Explication de la mise en pause extraite des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_necessite_intervenir": {"name": "workorder_necessite_intervenir", "description": "N\u00e9cessit\u00e9 d'intervenir extraite des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_si_non_pourquoi": {"name": "workorder_si_non_pourquoi", "description": "Explication si pas de n\u00e9cessit\u00e9 d'intervenir extraite des champs personnalis\u00e9s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_planned": {"name": "date_planned", "description": "Date de planification de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_started": {"name": "date_started", "description": "Date de d\u00e9but de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_done": {"name": "date_done", "description": "Date de fin de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation de l'enregistrement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated": {"name": "last_updated", "description": "Date de derni\u00e8re mise \u00e0 jour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Date d'extraction depuis la source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted_at": {"name": "deleted_at", "description": "Date de suppression (soft delete)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Interventions nettoy\u00e9s et enrichis depuis yuman_workorders"}, "created_at": 1760962911.0107772, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Interventions nettoy\u00e9s et enrichis depuis yuman_workorders',\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_workorders') }}\n),\n\nbase_workorders as (\n    select\n    -- IDs and foreign keys\n        id as workorder_id,\n        site_id,\n        client_id,\n        technician_id,\n        manager_id,\n        category_id,\n        contact_id,\n    -- Workorder details\n        number as workorder_number,\n        workorder_type,\n        _embed_category_name as workorder_category,\n        status as workorder_status,\n        title as workorder_title,\n        description as workorder_description,\n        report as workorder_report,\n        _embed_technician_name as workorder_technician_name,\n        time_taken as workorder_time_taken,\n    -- JSON\n        SAFE.PARSE_JSON(_embed_fields) as embed_fields,\n    -- Dates\n        TIMESTAMP(date_planned) as date_planned,\n        TIMESTAMP(date_started) as date_started,\n        TIMESTAMP(date_done) as date_done,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n),\n\njson_parsed as (\n    select\n        *,\n        -- Extraction des champs sp\u00e9cifiques depuis le JSON array\n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'DATE DE CREATION'\n        ) as date_creation_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'MOTIF DE NON INTERVENTION'\n        ) as motif_non_intervention_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'NON INTERVENTION : DETAIL/AUTRE MOTIF'\n        ) as detail_non_intervention_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'RAISON MISE EN PAUSE'\n        ) as raison_pause_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'EXPLICATION MISE EN PAUSE'\n        ) as explication_pause_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = \"NECESSITE D\\'INTERVENIR\"\n        ) as necessite_intervenir_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'SI NON POURQUOI ?'\n        ) as si_non_pourquoi_field\n        \n    from base_workorders\n),\n\nfinal as (\n    select\n        -- Colonnes de base\n        workorder_id,\n        site_id,\n        client_id,\n        technician_id,\n        manager_id,\n        category_id,\n        contact_id,\n        workorder_number,\n        workorder_type,\n        workorder_category,\n        workorder_status,\n        workorder_title,\n        workorder_description,\n        workorder_report,\n        workorder_technician_name,\n        workorder_time_taken,\n\n        -- Champs extraits du JSON avec nettoyage\n        case \n            when json_extract_scalar(date_creation_field, '$.value') is not null\n            then safe.parse_date('%d/%m/%Y', json_extract_scalar(date_creation_field, '$.value'))\n        end as workorder_date_creation,\n        \n        json_extract_scalar(motif_non_intervention_field, '$.value') as workorder_motif_non_intervention,\n        json_extract_scalar(detail_non_intervention_field, '$.value') as workorder_detail_non_intervention,\n        json_extract_scalar(raison_pause_field, '$.value') as workorder_raison_mise_en_pause,\n        json_extract_scalar(explication_pause_field, '$.value') as workorder_explication_mise_en_pause,\n        json_extract_scalar(necessite_intervenir_field, '$.value') as workorder_necessite_intervenir,\n        json_extract_scalar(si_non_pourquoi_field, '$.value') as workorder_si_non_pourquoi,\n        \n        -- Dates\n        date_planned,\n        date_started,\n        date_done,\n        created_at,\n        updated_at,\n        extracted_at,\n        deleted_at\n        \n    from json_parsed\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorders"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__workorders.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_workorders`\n),\n\nbase_workorders as (\n    select\n    -- IDs and foreign keys\n        id as workorder_id,\n        site_id,\n        client_id,\n        technician_id,\n        manager_id,\n        category_id,\n        contact_id,\n    -- Workorder details\n        number as workorder_number,\n        workorder_type,\n        _embed_category_name as workorder_category,\n        status as workorder_status,\n        title as workorder_title,\n        description as workorder_description,\n        report as workorder_report,\n        _embed_technician_name as workorder_technician_name,\n        time_taken as workorder_time_taken,\n    -- JSON\n        SAFE.PARSE_JSON(_embed_fields) as embed_fields,\n    -- Dates\n        TIMESTAMP(date_planned) as date_planned,\n        TIMESTAMP(date_started) as date_started,\n        TIMESTAMP(date_done) as date_done,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n),\n\njson_parsed as (\n    select\n        *,\n        -- Extraction des champs sp\u00e9cifiques depuis le JSON array\n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'DATE DE CREATION'\n        ) as date_creation_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'MOTIF DE NON INTERVENTION'\n        ) as motif_non_intervention_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'NON INTERVENTION : DETAIL/AUTRE MOTIF'\n        ) as detail_non_intervention_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'RAISON MISE EN PAUSE'\n        ) as raison_pause_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'EXPLICATION MISE EN PAUSE'\n        ) as explication_pause_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = \"NECESSITE D\\'INTERVENIR\"\n        ) as necessite_intervenir_field,\n        \n        (\n            select field\n            from unnest(json_extract_array(embed_fields)) as field\n            where json_extract_scalar(field, '$.name') = 'SI NON POURQUOI ?'\n        ) as si_non_pourquoi_field\n        \n    from base_workorders\n),\n\nfinal as (\n    select\n        -- Colonnes de base\n        workorder_id,\n        site_id,\n        client_id,\n        technician_id,\n        manager_id,\n        category_id,\n        contact_id,\n        workorder_number,\n        workorder_type,\n        workorder_category,\n        workorder_status,\n        workorder_title,\n        workorder_description,\n        workorder_report,\n        workorder_technician_name,\n        workorder_time_taken,\n\n        -- Champs extraits du JSON avec nettoyage\n        case \n            when json_extract_scalar(date_creation_field, '$.value') is not null\n            then safe.parse_date('%d/%m/%Y', json_extract_scalar(date_creation_field, '$.value'))\n        end as workorder_date_creation,\n        \n        json_extract_scalar(motif_non_intervention_field, '$.value') as workorder_motif_non_intervention,\n        json_extract_scalar(detail_non_intervention_field, '$.value') as workorder_detail_non_intervention,\n        json_extract_scalar(raison_pause_field, '$.value') as workorder_raison_mise_en_pause,\n        json_extract_scalar(explication_pause_field, '$.value') as workorder_explication_mise_en_pause,\n        json_extract_scalar(necessite_intervenir_field, '$.value') as workorder_necessite_intervenir,\n        json_extract_scalar(si_non_pourquoi_field, '$.value') as workorder_si_non_pourquoi,\n        \n        -- Dates\n        date_planned,\n        date_started,\n        date_done,\n        created_at,\n        updated_at,\n        extracted_at,\n        deleted_at\n        \n    from json_parsed\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["workorder_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__sites": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__sites", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__sites.sql", "original_file_path": "models/staging/yuman/stg_yuman__sites.sql", "unique_id": "model.dbt_warehouse.stg_yuman__sites", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__sites"], "alias": "stg_yuman__sites", "checksum": {"name": "sha256", "checksum": "6e1e229a645e91508fd707b2c34a2108725314eafa38f1d869963d8738dfb2d9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Sites nettoy\u00e9s avec r\u00e9f\u00e9rence client valid\u00e9e"}, "tags": ["staging"], "description": "Sites transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"site_id": {"name": "site_id", "description": "Identifiant unique du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "R\u00e9f\u00e9rence vers le client propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Sites nettoy\u00e9s avec r\u00e9f\u00e9rence client valid\u00e9e"}, "created_at": 1760962910.9958925, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Sites nettoy\u00e9s avec r\u00e9f\u00e9rence client valid\u00e9e',\n  )\n}}\n\nwith source_data as (\n    select * from {{ source('yuman_api', 'yuman_sites') }}\n),\n\nextracted_postal_code as (\n    select\n        *,\n        (\n            select JSON_EXTRACT_SCALAR(value, '$.value')\n            from unnest(JSON_EXTRACT_ARRAY(_embed_fields)) as value\n            where JSON_EXTRACT_SCALAR(value, '$.name') = 'CODE POSTAL'\n            limit 1\n        ) as raw_code_postal\n    from source_data\n),\n\ncleaned as (\n    select\n        id as site_id,\n        client_id,\n        agency_id,\n        code as site_code,\n        name as site_name,\n        address as site_address,\n        -- Nettoyage du code postal : suppression du \".0\", puis cast en texte\n        regexp_replace(raw_code_postal, r'\\.0$', '') as site_postal_code,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from extracted_postal_code\n)\n\nselect * from cleaned", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_sites"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__sites.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from `evs-datastack-prod`.`prod_raw`.`yuman_sites`\n),\n\nextracted_postal_code as (\n    select\n        *,\n        (\n            select JSON_EXTRACT_SCALAR(value, '$.value')\n            from unnest(JSON_EXTRACT_ARRAY(_embed_fields)) as value\n            where JSON_EXTRACT_SCALAR(value, '$.name') = 'CODE POSTAL'\n            limit 1\n        ) as raw_code_postal\n    from source_data\n),\n\ncleaned as (\n    select\n        id as site_id,\n        client_id,\n        agency_id,\n        code as site_code,\n        name as site_name,\n        address as site_address,\n        -- Nettoyage du code postal : suppression du \".0\", puis cast en texte\n        regexp_replace(raw_code_postal, r'\\.0$', '') as site_postal_code,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from extracted_postal_code\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["site_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__workorder_demands": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__workorder_demands", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__workorder_demands.sql", "original_file_path": "models/staging/yuman/stg_yuman__workorder_demands.sql", "unique_id": "model.dbt_warehouse.stg_yuman__workorder_demands", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__workorder_demands"], "alias": "stg_yuman__workorder_demands", "checksum": {"name": "sha256", "checksum": "f53b7151ef21c9a6f9f1f2f6d1090dcf2e4ad2744ac298d21930f0a5f981733a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Demande dintervention nettoy\u00e9s et enrichis depuis yuman_workorder_demands"}, "tags": ["staging"], "description": "Demande d'intervention transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"demand_id": {"name": "demand_id", "description": "Identifiant unique de la demande d'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "R\u00e9f\u00e9rence vers le client propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_id": {"name": "workorder_id", "description": "R\u00e9f\u00e9rence vers l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "R\u00e9f\u00e9rence vers le site propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "R\u00e9f\u00e9rence vers la machine propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "R\u00e9f\u00e9rence vers l'utilisateur qui a cr\u00e9\u00e9 la demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_category_id": {"name": "demand_category_id", "description": "R\u00e9f\u00e9rence vers la cat\u00e9gorie de la demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Demande dintervention nettoy\u00e9s et enrichis depuis yuman_workorder_demands"}, "created_at": 1760962911.0014913, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Demande dintervention nettoy\u00e9s et enrichis depuis yuman_workorder_demands',\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_workorder_demands') }}\n),\n\ncleaned_workorder_demdands as (\n    select\n        id as demand_id,\n        workorder_id,\n        material_id,\n        site_id,\n        client_id,\n        user_id,\n        cast(contact_id as int64) as contact_id,\n        category_id as demand_category_id,\n        description as demand_description,\n        status as demand_status,\n        reject_comment as demand_reject_comment,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_workorder_demdands", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__workorder_demands.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands`\n),\n\ncleaned_workorder_demdands as (\n    select\n        id as demand_id,\n        workorder_id,\n        material_id,\n        site_id,\n        client_id,\n        user_id,\n        cast(contact_id as int64) as contact_id,\n        category_id as demand_category_id,\n        description as demand_description,\n        status as demand_status,\n        reject_comment as demand_reject_comment,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_workorder_demdands", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["demand_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__materials_categories": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__materials_categories", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__materials_categories.sql", "original_file_path": "models/staging/yuman/stg_yuman__materials_categories.sql", "unique_id": "model.dbt_warehouse.stg_yuman__materials_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__materials_categories"], "alias": "stg_yuman__materials_categories", "checksum": {"name": "sha256", "checksum": "f5d5effed2f50246d2e05f1964e9ff90592a1d89860bc04191b3a6d46f132331"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Cat\u00e9gories (Machines) nettoy\u00e9 depuis yuman_material_categories"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Cat\u00e9gories (Machines) nettoy\u00e9 depuis yuman_material_categories"}, "created_at": 1760962910.0602567, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Cat\u00e9gories (Machines) nettoy\u00e9 depuis yuman_material_categories'\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_material_categories') }}\n),\n\ncleaned_material_categories as (\n    select\n        id as category_id,\n        name as category_name,   \n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_material_categories", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_material_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_material_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__materials_categories.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_material_categories`\n),\n\ncleaned_material_categories as (\n    select\n        id as category_id,\n        name as category_name,   \n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_material_categories", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_yuman__products": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__products", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__products.sql", "original_file_path": "models/staging/yuman/stg_yuman__products.sql", "unique_id": "model.dbt_warehouse.stg_yuman__products", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__products"], "alias": "stg_yuman__products", "checksum": {"name": "sha256", "checksum": "2a666cf9b7b352c9a15f7da63f056e1f62244f9ac103e0e8ffeb92d7691b6e1e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Produits/Articles nettoy\u00e9s et enrichis depuis yuman_products"}, "tags": ["staging"], "description": "Produits transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"product_id": {"name": "product_id", "description": "Identifiant unique du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Produits/Articles nettoy\u00e9s et enrichis depuis yuman_products"}, "created_at": 1760962910.998098, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__products`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Produits/Articles nettoy\u00e9s et enrichis depuis yuman_products',\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_products') }}\n),\n\ncleaned_products as (\n    select\n        id as product_id,\n        reference as product_code,\n        designation as product_name,\n        product_type as product_type,\n        brand as product_brand,\n        unit as product_unit,\n        purchase_price as product_purchase_price,\n        sale_price as product_sale_price,    \n        active as is_active,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_products", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_products"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__products.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_products`\n),\n\ncleaned_products as (\n    select\n        id as product_id,\n        reference as product_code,\n        designation as product_name,\n        product_type as product_type,\n        brand as product_brand,\n        unit as product_unit,\n        purchase_price as product_purchase_price,\n        sale_price as product_sale_price,    \n        active as is_active,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_products", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__materials": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__materials", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__materials.sql", "original_file_path": "models/staging/yuman/stg_yuman__materials.sql", "unique_id": "model.dbt_warehouse.stg_yuman__materials", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__materials"], "alias": "stg_yuman__materials", "checksum": {"name": "sha256", "checksum": "e3598540d16aba5223d8c6b1fb846b6716ba7ba5e1bbafda4689d013c938cddd"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Materials (Machines) nettoy\u00e9 depuis yuman_materials"}, "tags": ["staging"], "description": "Mat\u00e9riaux transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"material_id": {"name": "material_id", "description": "Identifiant unique du mat\u00e9riau", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "R\u00e9f\u00e9rence vers le site propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "R\u00e9f\u00e9rence vers la cat\u00e9gorie du mat\u00e9riau", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Materials (Machines) nettoy\u00e9 depuis yuman_materials"}, "created_at": 1760962910.99688, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Materials (Machines) nettoy\u00e9 depuis yuman_materials'\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_materials') }}\n),\n\ncleaned_materials as (\n    select\n        id as material_id,\n        site_id,\n        category_id, \n        name as material_name,\n        serial_number as material_serial_number,\n        brand as material_brand,\n        description as material_description,\n        in_service_date as material_in_service_date,      \n        timestamp(created_at) as created_at,\n        timestamp(updated_at) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_materials", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_materials"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__materials.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_materials`\n),\n\ncleaned_materials as (\n    select\n        id as material_id,\n        site_id,\n        category_id, \n        name as material_name,\n        serial_number as material_serial_number,\n        brand as material_brand,\n        description as material_description,\n        in_service_date as material_in_service_date,      \n        timestamp(created_at) as created_at,\n        timestamp(updated_at) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n)\n\nselect * from cleaned_materials", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["material_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__purchase_orders": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__purchase_orders", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__purchase_orders.sql", "original_file_path": "models/staging/yuman/stg_yuman__purchase_orders.sql", "unique_id": "model.dbt_warehouse.stg_yuman__purchase_orders", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__purchase_orders"], "alias": "stg_yuman__purchase_orders", "checksum": {"name": "sha256", "checksum": "54a227367fb31b5c711617105f9a5fcea2edcbd93f2978c07438ad38882858fb"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Staging \"flattened\" : une ligne = 1 commande + 1 pi\u00e8ce (d\u00e9pliage du champ JSON lines)."}, "tags": ["staging"], "description": "Purchase Orders d\u00e9pli\u00e9s : une ligne = une commande + une pi\u00e8ce associ\u00e9e", "columns": {"purchase_order_line_id": {"name": "purchase_order_line_id", "description": "Identifiant unique de la ligne de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_order_id": {"name": "purchase_order_id", "description": "Identifiant du bon de commande (ent\u00eate)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "R\u00e9f\u00e9rence vers le produit command\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "R\u00e9f\u00e9rence vers le fournisseur (li\u00e9 \u00e0 un client ou supplier)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_order_number": {"name": "purchase_order_number", "description": "Num\u00e9ro du bon de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_order_satus": {"name": "purchase_order_satus", "description": "Statut de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_order_invoice_status": {"name": "purchase_order_invoice_status", "description": "Statut de facturation du bon de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_order_title": {"name": "purchase_order_title", "description": "Titre du bon de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_description": {"name": "order_description", "description": "Description du bon de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "creation_date": {"name": "creation_date", "description": "Date de cr\u00e9ation de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "expected_delivery_date": {"name": "expected_delivery_date", "description": "Date de livraison attendue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_created_at": {"name": "order_created_at", "description": "Date de cr\u00e9ation de l'enregistrement commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_updated_at": {"name": "order_updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_vat": {"name": "order_vat", "description": "Montant total de TVA de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_subtotal": {"name": "order_subtotal", "description": "Sous-total de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_total": {"name": "order_total", "description": "Montant total TTC de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "R\u00e9f\u00e9rence vers le manager de la commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quote_id": {"name": "quote_id", "description": "R\u00e9f\u00e9rence vers le devis associ\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delivery_address": {"name": "delivery_address", "description": "Adresse de livraison", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_reference": {"name": "line_reference", "description": "R\u00e9f\u00e9rence du produit dans la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_description": {"name": "line_description", "description": "Description de l\u2019article de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 command\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit": {"name": "unit", "description": "Unit\u00e9 de la ligne (ex: PIECE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity_received": {"name": "quantity_received", "description": "Quantit\u00e9 effectivement re\u00e7ue", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Prix unitaire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_vat": {"name": "line_vat", "description": "TVA appliqu\u00e9e \u00e0 la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_subtotal": {"name": "line_subtotal", "description": "Sous-total HT de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subtotal_received_eur": {"name": "subtotal_received_eur", "description": "Sous-total re\u00e7u (converti en euros)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "subtotal_received_currency": {"name": "subtotal_received_currency", "description": "Devise du sous-total re\u00e7u", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_created_at": {"name": "line_created_at", "description": "Date de cr\u00e9ation de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_updated_at": {"name": "line_updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Date d'extraction depuis la source (Singer/Meltano)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sdc_sequence": {"name": "sdc_sequence", "description": "Num\u00e9ro de s\u00e9quence pour suivi d\u2019update via Meltano", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Staging \"flattened\" : une ligne = 1 commande + 1 pi\u00e8ce (d\u00e9pliage du champ JSON lines)."}, "created_at": 1760962911.0222497, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__purchase_orders`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Staging \"flattened\" : une ligne = 1 commande + 1 pi\u00e8ce (d\u00e9pliage du champ JSON lines).'\n  )\n}}\n\nwith src as (\n  select * from {{ source('yuman_api','yuman_purchase_orders') }}\n),\n\n-- Normalisation / typage des champs ent\u00eate\npo_base as (\n  select\n    SAFE_CAST(id AS INT64)                            as purchase_order_id,\n    number                                           as purchase_order_number,\n    status                                           as purchase_order_satus,\n    invoice_status                              as purchase_order_invoice_status,\n    title                                           as purchase_order_title,\n    description                                      as order_description,\n    TIMESTAMP(creation_date)                         as creation_date,\n    TIMESTAMP(expected_delivery_date)                as expected_delivery_date,\n    TIMESTAMP(created_at)                             as order_created_at,\n    TIMESTAMP(updated_at)                             as order_updated_at,\n    SAFE_CAST(vat AS FLOAT64)                        as order_vat,\n    SAFE_CAST(subtotal AS FLOAT64)                   as order_subtotal,\n    SAFE_CAST(total AS FLOAT64)                      as order_total,\n    SAFE_CAST(manager_id AS INT64)                   as manager_id,\n    SAFE_CAST(quote_id AS INT64)                     as quote_id,\n    SAFE_CAST(supplier_id AS INT64)                  as supplier_id,\n    delivery_address,\n    TIMESTAMP(_sdc_extracted_at)                     as extracted_at,\n    SAFE_CAST(_sdc_sequence AS INT64)                as sdc_sequence,\n    lines\n  from src\n  where id is not null\n),\n\n-- Explode JSON array 'lines' : chaque item devient une ligne\nlines_exploded as (\n  select\n    pb.*,\n    item\n  from po_base pb,\n  unnest(\n    -- JSON_EXTRACT_ARRAY ne supporte pas nulls ; SAFE.PARSE_JSON \u00e9vite les erreurs\n    COALESCE(JSON_EXTRACT_ARRAY(SAFE.PARSE_JSON(lines)), []) \n  ) as item\n),\n\n-- Extraction des champs de chaque item JSON\nline_parsed as (\n  select\n    purchase_order_id,\n    purchase_order_number,\n    purchase_order_satus,\n    purchase_order_invoice_status,\n    purchase_order_title,\n    order_description,\n    creation_date,\n    expected_delivery_date,\n    order_created_at,\n    order_updated_at,\n    order_vat,\n    order_subtotal,\n    order_total,\n    manager_id,\n    quote_id,\n    supplier_id,\n    delivery_address,\n    extracted_at,\n    sdc_sequence,\n\n    -- champs ligne\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.id') AS INT64)                 as purchase_order_line_id,\n    JSON_EXTRACT_SCALAR(item, '$.reference')                             as line_reference,\n    JSON_EXTRACT_SCALAR(item, '$.description')                           as line_description,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.quantity') AS FLOAT64)        as quantity,\n    JSON_EXTRACT_SCALAR(item, '$.unit')                                  as unit,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.quantity_received') AS FLOAT64) as quantity_received,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.unit_price') AS FLOAT64)      as unit_price,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.vat') AS FLOAT64)             as line_vat,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.subtotal') AS FLOAT64)        as line_subtotal,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.product_id') AS INT64)        as product_id,\n    SAFE_DIVIDE(\n      SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.subtotal_received.cents') AS INT64), \n      100\n    ) as subtotal_received_eur,\n    JSON_EXTRACT_SCALAR(item, '$.subtotal_received.currency_iso')        as subtotal_received_currency,\n    TIMESTAMP(JSON_EXTRACT_SCALAR(item, '$.created_at'))                 as line_created_at,\n    TIMESTAMP(JSON_EXTRACT_SCALAR(item, '$.updated_at'))                 as line_updated_at\n  from lines_exploded\n)\n\nselect\n  -- ent\u00eate commande (utile pour jointures et analyses)\n  purchase_order_id,\n  purchase_order_number,\n  purchase_order_satus,\n  purchase_order_invoice_status,\n  purchase_order_title,\n  order_description,\n  creation_date,\n  expected_delivery_date,\n  order_created_at,\n  order_updated_at,\n  order_vat,\n  order_subtotal,\n  order_total,\n  manager_id,\n  quote_id,\n  supplier_id,\n  delivery_address,\n\n  -- champs ligne (une ligne par item)\n  purchase_order_line_id,\n  line_reference,\n  line_description,\n  quantity,\n  unit,\n  quantity_received,\n  unit_price,\n  line_vat,\n  line_subtotal,\n  product_id,\n  subtotal_received_eur,\n  subtotal_received_currency,\n  line_created_at,\n  line_updated_at,\n\n  -- m\u00e9tadatas\n  extracted_at,\n  sdc_sequence\n\nfrom line_parsed\n-- si certaines commandes ont lines null on peut garder une ligne (optionnel) :\nwhere purchase_order_line_id is not null", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_purchase_orders"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__purchase_orders.sql", "compiled": true, "compiled_code": "\n\nwith src as (\n  select * from `evs-datastack-prod`.`prod_raw`.`yuman_purchase_orders`\n),\n\n-- Normalisation / typage des champs ent\u00eate\npo_base as (\n  select\n    SAFE_CAST(id AS INT64)                            as purchase_order_id,\n    number                                           as purchase_order_number,\n    status                                           as purchase_order_satus,\n    invoice_status                              as purchase_order_invoice_status,\n    title                                           as purchase_order_title,\n    description                                      as order_description,\n    TIMESTAMP(creation_date)                         as creation_date,\n    TIMESTAMP(expected_delivery_date)                as expected_delivery_date,\n    TIMESTAMP(created_at)                             as order_created_at,\n    TIMESTAMP(updated_at)                             as order_updated_at,\n    SAFE_CAST(vat AS FLOAT64)                        as order_vat,\n    SAFE_CAST(subtotal AS FLOAT64)                   as order_subtotal,\n    SAFE_CAST(total AS FLOAT64)                      as order_total,\n    SAFE_CAST(manager_id AS INT64)                   as manager_id,\n    SAFE_CAST(quote_id AS INT64)                     as quote_id,\n    SAFE_CAST(supplier_id AS INT64)                  as supplier_id,\n    delivery_address,\n    TIMESTAMP(_sdc_extracted_at)                     as extracted_at,\n    SAFE_CAST(_sdc_sequence AS INT64)                as sdc_sequence,\n    lines\n  from src\n  where id is not null\n),\n\n-- Explode JSON array 'lines' : chaque item devient une ligne\nlines_exploded as (\n  select\n    pb.*,\n    item\n  from po_base pb,\n  unnest(\n    -- JSON_EXTRACT_ARRAY ne supporte pas nulls ; SAFE.PARSE_JSON \u00e9vite les erreurs\n    COALESCE(JSON_EXTRACT_ARRAY(SAFE.PARSE_JSON(lines)), []) \n  ) as item\n),\n\n-- Extraction des champs de chaque item JSON\nline_parsed as (\n  select\n    purchase_order_id,\n    purchase_order_number,\n    purchase_order_satus,\n    purchase_order_invoice_status,\n    purchase_order_title,\n    order_description,\n    creation_date,\n    expected_delivery_date,\n    order_created_at,\n    order_updated_at,\n    order_vat,\n    order_subtotal,\n    order_total,\n    manager_id,\n    quote_id,\n    supplier_id,\n    delivery_address,\n    extracted_at,\n    sdc_sequence,\n\n    -- champs ligne\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.id') AS INT64)                 as purchase_order_line_id,\n    JSON_EXTRACT_SCALAR(item, '$.reference')                             as line_reference,\n    JSON_EXTRACT_SCALAR(item, '$.description')                           as line_description,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.quantity') AS FLOAT64)        as quantity,\n    JSON_EXTRACT_SCALAR(item, '$.unit')                                  as unit,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.quantity_received') AS FLOAT64) as quantity_received,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.unit_price') AS FLOAT64)      as unit_price,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.vat') AS FLOAT64)             as line_vat,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.subtotal') AS FLOAT64)        as line_subtotal,\n    SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.product_id') AS INT64)        as product_id,\n    SAFE_DIVIDE(\n      SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.subtotal_received.cents') AS INT64), \n      100\n    ) as subtotal_received_eur,\n    JSON_EXTRACT_SCALAR(item, '$.subtotal_received.currency_iso')        as subtotal_received_currency,\n    TIMESTAMP(JSON_EXTRACT_SCALAR(item, '$.created_at'))                 as line_created_at,\n    TIMESTAMP(JSON_EXTRACT_SCALAR(item, '$.updated_at'))                 as line_updated_at\n  from lines_exploded\n)\n\nselect\n  -- ent\u00eate commande (utile pour jointures et analyses)\n  purchase_order_id,\n  purchase_order_number,\n  purchase_order_satus,\n  purchase_order_invoice_status,\n  purchase_order_title,\n  order_description,\n  creation_date,\n  expected_delivery_date,\n  order_created_at,\n  order_updated_at,\n  order_vat,\n  order_subtotal,\n  order_total,\n  manager_id,\n  quote_id,\n  supplier_id,\n  delivery_address,\n\n  -- champs ligne (une ligne par item)\n  purchase_order_line_id,\n  line_reference,\n  line_description,\n  quantity,\n  unit,\n  quantity_received,\n  unit_price,\n  line_vat,\n  line_subtotal,\n  product_id,\n  subtotal_received_eur,\n  subtotal_received_currency,\n  line_created_at,\n  line_updated_at,\n\n  -- m\u00e9tadatas\n  extracted_at,\n  sdc_sequence\n\nfrom line_parsed\n-- si certaines commandes ont lines null on peut garder une ligne (optionnel) :\nwhere purchase_order_line_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["purchase_order_line_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__workorder_demands_categories": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__workorder_demands_categories", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__workorder_demands_categories.sql", "original_file_path": "models/staging/yuman/stg_yuman__workorder_demands_categories.sql", "unique_id": "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__workorder_demands_categories"], "alias": "stg_yuman__workorder_demands_categories", "checksum": {"name": "sha256", "checksum": "e5c220770f00961b100dbc54e1f7b92bad6e0e321d1a84106f45969ad7248510"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Cat\u00e9gories des demandes dintervention nettoy\u00e9s depuis l Yuman API"}, "tags": ["staging"], "description": "Cat\u00e9gories de demandes d'intervention transform\u00e9es et nettoy\u00e9es depuis l'API Yuman", "columns": {"demand_category_id": {"name": "demand_category_id", "description": "Identifiant unique de la cat\u00e9gorie de demande d'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Cat\u00e9gories des demandes dintervention nettoy\u00e9s depuis l Yuman API"}, "created_at": 1760962910.99973, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Cat\u00e9gories des demandes dintervention nettoy\u00e9s depuis l Yuman API',\n  )\n}}\n\nwith source_data as (\n    select * from {{ source('yuman_api', 'yuman_workorder_demands_categories') }}\n),\n\ncleaned_categories as (\n    select\n        id as demand_category_id,\n        name as demand_category_name,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_categories", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__workorder_demands_categories.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands_categories`\n),\n\ncleaned_categories as (\n    select\n        id as demand_category_id,\n        name as demand_category_name,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_categories", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["demand_category_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__clients": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__clients", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__clients.sql", "original_file_path": "models/staging/yuman/stg_yuman__clients.sql", "unique_id": "model.dbt_warehouse.stg_yuman__clients", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__clients"], "alias": "stg_yuman__clients", "checksum": {"name": "sha256", "checksum": "de9497a5a1e6e919f514c1edd0382fd5a1f998c2eb36dc2b0dda0c3282726cff"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Clients nettoy\u00e9s et enrichis depuis yuman_clients, avec nom du partenaire rattach\u00e9."}, "tags": ["staging"], "description": "Clients transform\u00e9s et nettoy\u00e9s depuis l'API Yuman", "columns": {"client_id": {"name": "client_id", "description": "Identifiant unique du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie du client (Sp\u00e9cifique NESHU : OR / ARGENT / BRONZE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_adress": {"name": "client_adress", "description": "Adresse du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/yuman/_yuman__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Clients nettoy\u00e9s et enrichis depuis yuman_clients, avec nom du partenaire rattach\u00e9."}, "created_at": 1760962910.9948003, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`", "raw_code": "{{ \n  config(\n    materialized='table',\n    description='Clients nettoy\u00e9s et enrichis depuis yuman_clients, avec nom du partenaire rattach\u00e9.',\n  ) \n}}\n\nwith source_data as (\n    select * \n    from {{ source('yuman_api', 'yuman_clients') }}\n),\n\nbase_clients as (\n    select\n        id as client_id,\n        partner_id, \n        code as client_code,\n        name as client_name,\n        address as client_address,       \n        active as is_active,\n        SAFE.PARSE_JSON(_embed_fields) as embed_fields,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n),\n\njson_parsed as (\n    select\n        client_id,\n        client_code,\n        client_name,\n        updated_at,\n        JSON_EXTRACT_SCALAR(item, '$.name') as field_name,\n        JSON_EXTRACT_SCALAR(item, '$.value') as field_value\n    from base_clients,\n    UNNEST(JSON_EXTRACT_ARRAY(embed_fields)) as item\n),\n\nextracted_fields as (\n    select\n        client_id,\n        client_code,\n        client_name,\n        updated_at,\n        field_name,\n        field_value\n    from json_parsed\n    where field_name is not null\n),\n\npivoted as (\n    select\n        bc.client_id,\n        bc.partner_id,\n        bc.client_code,\n        bc.client_name,\n        MAX(IF(ef.field_name = 'CATEGORIE CLIENT EVS', ef.field_value, NULL)) as client_category,\n        bc.client_address,\n        bc.is_active,\n        bc.created_at,\n        bc.updated_at,\n        bc.extracted_at,\n        bc.deleted_at\n    from base_clients bc\n    left join extracted_fields ef on ef.client_id = bc.client_id\n    group by \n        bc.client_id, bc.client_code, bc.client_name, bc.client_address,\n        bc.partner_id, bc.is_active,\n        bc.created_at, bc.updated_at, bc.extracted_at, bc.deleted_at\n),\n\n-- Ajout du nom du partenaire via self join\nwith_partner_name as (\n    select \n        p.*,\n        partner.client_name as partner_name\n    from pivoted p\n    left join pivoted partner on p.partner_id = partner.client_id\n),\n\nfinal as (\n    select * from with_partner_name\n    where client_id is not null\n)\n--Titre chang\u00e9\nselect \n    client_id,\n    partner_id,\n    partner_name,\n    client_code,\n    client_name,\n    client_category,\n    client_address,\n    is_active,\n    created_at,\n    updated_at,\n    extracted_at,\n    deleted_at\nfrom final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_clients"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__clients.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * \n    from `evs-datastack-prod`.`prod_raw`.`yuman_clients`\n),\n\nbase_clients as (\n    select\n        id as client_id,\n        partner_id, \n        code as client_code,\n        name as client_name,\n        address as client_address,       \n        active as is_active,\n        SAFE.PARSE_JSON(_embed_fields) as embed_fields,\n        TIMESTAMP(created_at) as created_at,\n        TIMESTAMP(updated_at) as updated_at,\n        TIMESTAMP(_sdc_extracted_at) as extracted_at,\n        TIMESTAMP(_sdc_deleted_at) as deleted_at\n    from source_data\n    where id is not null\n),\n\njson_parsed as (\n    select\n        client_id,\n        client_code,\n        client_name,\n        updated_at,\n        JSON_EXTRACT_SCALAR(item, '$.name') as field_name,\n        JSON_EXTRACT_SCALAR(item, '$.value') as field_value\n    from base_clients,\n    UNNEST(JSON_EXTRACT_ARRAY(embed_fields)) as item\n),\n\nextracted_fields as (\n    select\n        client_id,\n        client_code,\n        client_name,\n        updated_at,\n        field_name,\n        field_value\n    from json_parsed\n    where field_name is not null\n),\n\npivoted as (\n    select\n        bc.client_id,\n        bc.partner_id,\n        bc.client_code,\n        bc.client_name,\n        MAX(IF(ef.field_name = 'CATEGORIE CLIENT EVS', ef.field_value, NULL)) as client_category,\n        bc.client_address,\n        bc.is_active,\n        bc.created_at,\n        bc.updated_at,\n        bc.extracted_at,\n        bc.deleted_at\n    from base_clients bc\n    left join extracted_fields ef on ef.client_id = bc.client_id\n    group by \n        bc.client_id, bc.client_code, bc.client_name, bc.client_address,\n        bc.partner_id, bc.is_active,\n        bc.created_at, bc.updated_at, bc.extracted_at, bc.deleted_at\n),\n\n-- Ajout du nom du partenaire via self join\nwith_partner_name as (\n    select \n        p.*,\n        partner.client_name as partner_name\n    from pivoted p\n    left join pivoted partner on p.partner_id = partner.client_id\n),\n\nfinal as (\n    select * from with_partner_name\n    where client_id is not null\n)\n--Titre chang\u00e9\nselect \n    client_id,\n    partner_id,\n    partner_name,\n    client_code,\n    client_name,\n    client_category,\n    client_address,\n    is_active,\n    created_at,\n    updated_at,\n    extracted_at,\n    deleted_at\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["client_id"], "time_spine": null}, "model.dbt_warehouse.stg_yuman__workorders_categories": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_yuman__workorders_categories", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/yuman/stg_yuman__workorders_categories.sql", "original_file_path": "models/staging/yuman/stg_yuman__workorders_categories.sql", "unique_id": "model.dbt_warehouse.stg_yuman__workorders_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "stg_yuman__workorders_categories"], "alias": "stg_yuman__workorders_categories", "checksum": {"name": "sha256", "checksum": "af1d09f23ab475e848425fa1bf257b89833148964c12b2c1bae338f42f26a9ea"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Cat\u00e9gories dintervention nettoy\u00e9s depuis l Yuman API"}, "tags": ["staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "description": "Cat\u00e9gories dintervention nettoy\u00e9s depuis l Yuman API"}, "created_at": 1760962910.0825825, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders_categories`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Cat\u00e9gories dintervention nettoy\u00e9s depuis l Yuman API',\n  )\n}}\n\nwith source_data as (\n    select * from {{ source('yuman_api', 'yuman_workorder_categories') }}\n),\n\ncleaned_categories as (\n    select\n        id as category_id,\n        name as category_name,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_categories", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/stg_yuman__workorders_categories.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_categories`\n),\n\ncleaned_categories as (\n    select\n        id as category_id,\n        name as category_name,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        cast(_sdc_extracted_at as timestamp) as extracted_at,\n        cast(_sdc_deleted_at as timestamp) as deleted_at\n    from source_data\n)\n\nselect * from cleaned_categories", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__product_type": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__product_type", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__product_type.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__product_type.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__product_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__product_type"], "alias": "stg_oracle_neshu__product_type", "checksum": {"name": "sha256", "checksum": "f83bade6b7f6998d61eacdf8085ba870793ec93d863805205fe634501fbcd866"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idproduct_type"], "description": "Product type nettoy\u00e9s et enrichis depuis evs_product_type"}, "tags": ["staging"], "description": "Types de produits transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idproduct_type": {"name": "idproduct_type", "description": "Identifiant unique du type de produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idproduct_type"], "description": "Product type nettoy\u00e9s et enrichis depuis evs_product_type"}, "created_at": 1760962911.3670647, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product_type`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idproduct_type'],\n        description='Product type nettoy\u00e9s et enrichis depuis evs_product_type'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_product_type') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idproduct_type as int64) as idproduct_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at, \n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product_type"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__product_type.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_product_type`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idproduct_type as int64) as idproduct_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at, \n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idproduct_type"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__task": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__task", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__task.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__task.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__task", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__task"], "alias": "stg_oracle_neshu__task", "checksum": {"name": "sha256", "checksum": "ca02558756c66098658586ffd0b05dbe06f6e33085312773e5a2e9e482b64065"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "idtask", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idtask_type", "idtask_status", "idcompany_peer", "iddevice"], "partition_by": {"field": "real_start_date", "data_type": "timestamp"}, "description": "Table de fait des t\u00e2ches depuis la table evs_task"}, "tags": ["staging"], "description": "TASK transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idtask": {"name": "idtask", "description": "Identifiant unique de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_peer": {"name": "idcompany_peer", "description": "R\u00e9f\u00e9rence vers l'entreprise propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask_type": {"name": "idtask_type", "description": "link to TASK_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask_status": {"name": "idtask_status", "description": "link to TASK_STATUS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "iddevice": {"name": "iddevice", "description": "Link to DEVICE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcontact": {"name": "idcontact", "description": "Link to CONTACT", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Link to LOCATION", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_SOURCE": {"name": "IDPRODUCT_SOURCE", "description": "ID de la source (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_DESTINATION": {"name": "IDPRODUCT_DESTINATION", "description": "ID de la destination (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_SOURCE": {"name": "TYPE_PRODUCT_SOURCE", "description": "nom de la table de la source (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_DESTINATION": {"name": "TYPE_PRODUCT_DESTINATION", "description": "nom de la table de la destination (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code_status_record": {"name": "code_status_record", "description": "Code status de la t\u00e2che ( 1 = valid\u00e9, 0 ou -1 = non valid\u00e9)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "real_start_date": {"name": "real_start_date", "description": "date demarrage de la tache", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "real_end_date": {"name": "real_end_date", "description": "date de fin de la tache", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "unique_key": "idtask", "partition_by": {"field": "real_start_date", "data_type": "timestamp"}, "incremental_strategy": "merge", "cluster_by": ["idtask_type", "idtask_status", "idcompany_peer", "iddevice"], "description": "Table de fait des t\u00e2ches depuis la table evs_task"}, "created_at": 1760962911.370365, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='idtask',\n        partition_by={'field': 'real_start_date', 'data_type': 'timestamp'},\n        incremental_strategy='merge', \n        cluster_by=['idtask_type','idtask_status','idcompany_peer','iddevice'],\n        description='Table de fait des t\u00e2ches depuis la table evs_task'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_task') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs (cl\u00e9s primaires et \u00e9trang\u00e8res)\n        cast(idtask as int64) as idtask,\n        cast(task_idtask as int64) as task_idtask,\n        cast(idtask_type as int64) as idtask_type,\n        cast(idtask_status as int64) as idtask_status,\n        cast(iddevice as int64) as iddevice,\n        cast(idcompany_peer as int64) as idcompany_peer,\n        cast(idlocation as int64) as idlocation,\n        cast(idcontact as int64) as idcontact,\n        cast(idproduct_source as int64) as idproduct_source,\n        cast(idproduct_destination as int64) as idproduct_destination,\n\n        -- Colonnes texte et types\n        type_product_source,\n        type_product_destination,\n\n        -- Colonne num\u00e9rique\n        spantime as spantime, -- dur\u00e9e de la t\u00e2che en minute\n        CAST(code_status_record AS STRING) as code_status_record, -- status record (1 = valid\u00e9, 0 ou -1 possiblement inactif/desactiv\u00e9 : \u00e0 confirmer)\n        \n        -- Date de la tache\n        timestamp(real_start_date) as real_start_date,\n        timestamp(real_end_date) as real_end_date,\n        timestamp(planed_start_date) as planed_start_date,\n        timestamp(planed_end_date) as planed_end_date,\n        \n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data\n{% if is_incremental() %}\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from {{ this }}\n    )\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__task.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_task`\n),\n\ncleaned_data as (\n    select\n        -- IDs (cl\u00e9s primaires et \u00e9trang\u00e8res)\n        cast(idtask as int64) as idtask,\n        cast(task_idtask as int64) as task_idtask,\n        cast(idtask_type as int64) as idtask_type,\n        cast(idtask_status as int64) as idtask_status,\n        cast(iddevice as int64) as iddevice,\n        cast(idcompany_peer as int64) as idcompany_peer,\n        cast(idlocation as int64) as idlocation,\n        cast(idcontact as int64) as idcontact,\n        cast(idproduct_source as int64) as idproduct_source,\n        cast(idproduct_destination as int64) as idproduct_destination,\n\n        -- Colonnes texte et types\n        type_product_source,\n        type_product_destination,\n\n        -- Colonne num\u00e9rique\n        spantime as spantime, -- dur\u00e9e de la t\u00e2che en minute\n        CAST(code_status_record AS STRING) as code_status_record, -- status record (1 = valid\u00e9, 0 ou -1 possiblement inactif/desactiv\u00e9 : \u00e0 confirmer)\n        \n        -- Date de la tache\n        timestamp(real_start_date) as real_start_date,\n        timestamp(real_end_date) as real_end_date,\n        timestamp(planed_start_date) as planed_start_date,\n        timestamp(planed_end_date) as planed_end_date,\n        \n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data\n\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idtask"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__contact": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__contact", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__contact.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__contact.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__contact", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__contact"], "alias": "stg_oracle_neshu__contact", "checksum": {"name": "sha256", "checksum": "4701740bbe053bfd47c8a6e7222589f42a4295a2c77bf4dd270db04b83fbd9d7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idcontact", "idcompany"], "description": "Contact nettoy\u00e9s et enrichis depuis evs_contact"}, "tags": ["staging"], "description": "Contacts transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idcontact": {"name": "idcontact", "description": "Identifiant unique du contact", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Link to IDCOMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idcontact", "idcompany"], "description": "Contact nettoy\u00e9s et enrichis depuis evs_contact"}, "created_at": 1760962911.3531818, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contact`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idcontact','idcompany'],\n        description='Contact nettoy\u00e9s et enrichis depuis evs_contact'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_contact') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcontact as int64) as idcontact,\n        cast(idcompany as int64) as idcompany,\n        \n        -- Colonnes texte\n        code,\n        first_name,\n        last_name,\n        email,\n        name,\n        mobile,\n        phone,\n        qualite,\n        code_status_record,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contact"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__contact.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_contact`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcontact as int64) as idcontact,\n        cast(idcompany as int64) as idcompany,\n        \n        -- Colonnes texte\n        code,\n        first_name,\n        last_name,\n        email,\n        name,\n        mobile,\n        phone,\n        qualite,\n        code_status_record,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idcontact"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__task_has_resources": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__task_has_resources", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__task_has_resources.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__task_has_resources.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__task_has_resources"], "alias": "stg_oracle_neshu__task_has_resources", "checksum": {"name": "sha256", "checksum": "df1d59e7ba3d7067078aa9fcfff0bd4b60dced738e7b30c2189a65962b5f6d64"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idtask"], "description": "task_has_resources nettoy\u00e9s et enrichis depuis evs_task_has_resources"}, "tags": ["staging"], "description": "Association entre les t\u00e2ches et les ressources", "columns": {"idtask": {"name": "idtask", "description": "Identifiant de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources": {"name": "idresources", "description": "Identifiant de la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idtask"], "description": "task_has_resources nettoy\u00e9s et enrichis depuis evs_task_has_resources"}, "created_at": 1760962911.3724124, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idtask'],\n        description='task_has_resources nettoy\u00e9s et enrichis depuis evs_task_has_resources'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_task_has_resources') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask as int64) as idtask,\n        cast(idresources as int64) as idresources,\n        cast(task_status as int64) as task_status,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n),\n\n-- Synchro avec la table des t\u00e2ches pour \u00e9viter les orphelins\nfiltered_data as (\n    select cr.*\n    from cleaned_data cr\n    inner join {{ ref('stg_oracle_neshu__task') }} t\n      on cr.idtask = t.idtask\n)\n\nselect * from filtered_data", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [["oracle_neshu", "evs_task_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_resources", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__task_has_resources.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_task_has_resources`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask as int64) as idtask,\n        cast(idresources as int64) as idresources,\n        cast(task_status as int64) as task_status,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n),\n\n-- Synchro avec la table des t\u00e2ches pour \u00e9viter les orphelins\nfiltered_data as (\n    select cr.*\n    from cleaned_data cr\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n      on cr.idtask = t.idtask\n)\n\nselect * from filtered_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_contract": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_contract", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_contract.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_contract.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_contract"], "alias": "stg_oracle_neshu__label_has_contract", "checksum": {"name": "sha256", "checksum": "86171448d4f51a7e9ee028492a232e038bf9a78013575922f93c69264684bbee"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel", "idcontract"], "description": "label_has_contract nettoy\u00e9s et enrichis depuis evs_label_has_contract"}, "tags": ["staging"], "description": "Association entre les labels et les contrats", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcontract": {"name": "idcontract", "description": "Identifiant du contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel", "idcontract"], "description": "label_has_contract nettoy\u00e9s et enrichis depuis evs_label_has_contract"}, "created_at": 1760962911.360938, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel','idcontract'],\n        description='label_has_contract nettoy\u00e9s et enrichis depuis evs_label_has_contract'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_contract') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idcontract as int64) as idcontract,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_contract"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_contract.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_contract`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idcontract as int64) as idcontract,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__task_has_product": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__task_has_product", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__task_has_product.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__task_has_product.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__task_has_product"], "alias": "stg_oracle_neshu__task_has_product", "checksum": {"name": "sha256", "checksum": "0237d186b48fbdb21db076f191f96b517769186db8f35125aab73d2ee728c883"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "idtask_has_product", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idtask", "idproduct", "idcompany_peer", "idlocation"], "partition_by": {"field": "updated_at", "data_type": "timestamp"}, "description": "Table de fait des produits li\u00e9s aux t\u00e2ches depuis task_has_product"}, "tags": ["staging"], "description": "Task_has_product transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idtask_has_product": {"name": "idtask_has_product", "description": "Identifiant unique de la t\u00e2che associ\u00e9e au produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask": {"name": "idtask", "description": "link to task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idproduct": {"name": "idproduct", "description": "ID du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_peer": {"name": "idcompany_peer", "description": "R\u00e9f\u00e9rence vers l'entreprise propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_SOURCE": {"name": "IDPRODUCT_SOURCE", "description": "ID de la source (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_DESTINATION": {"name": "IDPRODUCT_DESTINATION", "description": "ID de la destination (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_SOURCE": {"name": "TYPE_PRODUCT_SOURCE", "description": "nom de la table de la source (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_DESTINATION": {"name": "TYPE_PRODUCT_DESTINATION", "description": "nom de la table de la destination (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REAL_QUANTITY": {"name": "REAL_QUANTITY", "description": "Quantit\u00e9 r\u00e9el produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NET_PRICE": {"name": "NET_PRICE", "description": "sale unit price net without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SALE_UNIT_PRICE": {"name": "SALE_UNIT_PRICE", "description": "sale unit price brut without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PURCHASE_UNIT_PRICE": {"name": "PURCHASE_UNIT_PRICE", "description": "product purchase unit price net without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "unique_key": "idtask_has_product", "partition_by": {"field": "updated_at", "data_type": "timestamp"}, "incremental_strategy": "merge", "cluster_by": ["idtask", "idproduct", "idcompany_peer", "idlocation"], "description": "Table de fait des produits li\u00e9s aux t\u00e2ches depuis task_has_product"}, "created_at": 1760962911.37164, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='idtask_has_product',\n        partition_by={'field': 'updated_at', 'data_type': 'timestamp'},\n        incremental_strategy='merge',\n        cluster_by=['idtask', 'idproduct','idcompany_peer','idlocation'],\n        description='Table de fait des produits li\u00e9s aux t\u00e2ches depuis task_has_product'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_task_has_product') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs (cl\u00e9s primaires et \u00e9trang\u00e8res)\n        cast(idtask_has_product as int64) as idtask_has_product,\n        cast(idtask as int64) as idtask,\n        cast(idproduct as int64) as idproduct,\n        cast(idproduct_source as int64) as idproduct_source,\n        cast(idproduct_destination as int64) as idproduct_destination,\n        cast(idtax as int64) as idtax,\n        cast(idtask_has_product_associed as int64) as idtask_has_product_associed,\n        cast(iddevice as int64) as iddevice,\n        cast(idcompany_peer as int64) as idcompany_peer,\n        cast(idlocation as int64) as idlocation,\n\n        -- Colonnes texte et types\n        type_product_source,\n        type_product_destination,\n        code,\n        name,\n        cast(priceline_number as int64) as priceline_number,\n\n        -- Colonnes num\u00e9riques\n        cast(real_quantity as float64) as real_quantity,\n        cast(average_purchase_price as float64) as average_purchase_price,\n        cast(tax_rate as float64) as tax_rate,\n        cast(tax_amount as float64) as tax_amount,\n        cast(global_discount_amount as float64) as global_discount_amount,\n        cast(net_price as float64) as net_price,\n        cast(sale_amount_net_tax as float64) as sale_amount_net_tax,\n        cast(sale_amount_net as float64) as sale_amount_net,\n        cast(sale_unit_price as float64) as sale_unit_price,\n        cast(purchase_unit_price as float64) as purchase_unit_price,\n        cast(sale_amount_brut as float64) as sale_amount_brut,\n        cast(unit_coeff_multi as float64) as unit_coeff_multi,\n        cast(sale_unit_price_tax as float64) as sale_unit_price_tax,\n        cast(unit_coeff_div as float64) as unit_coeff_div,\n\n        -- Timestamps harmonis\u00e9s (standard DBT)\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n\n    from source_data\n),\n\n-- \u26a0\ufe0f S\u00e9curit\u00e9 de jointure pour \u00e9viter les orphelins\nfiltered_data as (\n    select c.*\n    from cleaned_data c\n    inner join {{ ref('stg_oracle_neshu__task') }} t\n        on c.idtask = t.idtask\n)\n\nselect * from filtered_data\n{% if is_incremental() %}\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from {{ this }}\n    )\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [["oracle_neshu", "evs_task_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__task_has_product.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_task_has_product`\n),\n\ncleaned_data as (\n    select\n        -- IDs (cl\u00e9s primaires et \u00e9trang\u00e8res)\n        cast(idtask_has_product as int64) as idtask_has_product,\n        cast(idtask as int64) as idtask,\n        cast(idproduct as int64) as idproduct,\n        cast(idproduct_source as int64) as idproduct_source,\n        cast(idproduct_destination as int64) as idproduct_destination,\n        cast(idtax as int64) as idtax,\n        cast(idtask_has_product_associed as int64) as idtask_has_product_associed,\n        cast(iddevice as int64) as iddevice,\n        cast(idcompany_peer as int64) as idcompany_peer,\n        cast(idlocation as int64) as idlocation,\n\n        -- Colonnes texte et types\n        type_product_source,\n        type_product_destination,\n        code,\n        name,\n        cast(priceline_number as int64) as priceline_number,\n\n        -- Colonnes num\u00e9riques\n        cast(real_quantity as float64) as real_quantity,\n        cast(average_purchase_price as float64) as average_purchase_price,\n        cast(tax_rate as float64) as tax_rate,\n        cast(tax_amount as float64) as tax_amount,\n        cast(global_discount_amount as float64) as global_discount_amount,\n        cast(net_price as float64) as net_price,\n        cast(sale_amount_net_tax as float64) as sale_amount_net_tax,\n        cast(sale_amount_net as float64) as sale_amount_net,\n        cast(sale_unit_price as float64) as sale_unit_price,\n        cast(purchase_unit_price as float64) as purchase_unit_price,\n        cast(sale_amount_brut as float64) as sale_amount_brut,\n        cast(unit_coeff_multi as float64) as unit_coeff_multi,\n        cast(sale_unit_price_tax as float64) as sale_unit_price_tax,\n        cast(unit_coeff_div as float64) as unit_coeff_div,\n\n        -- Timestamps harmonis\u00e9s (standard DBT)\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n\n    from source_data\n),\n\n-- \u26a0\ufe0f S\u00e9curit\u00e9 de jointure pour \u00e9viter les orphelins\nfiltered_data as (\n    select c.*\n    from cleaned_data c\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n        on c.idtask = t.idtask\n)\n\nselect * from filtered_data\n\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idtask_has_product"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_company": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_company", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_company.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_company.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_company"], "alias": "stg_oracle_neshu__label_has_company", "checksum": {"name": "sha256", "checksum": "67203f4bb14ff809bf447cf781b1331596035bbc2ab8d10d2a6380639ae5c8da"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel"], "description": "label_has_company nettoy\u00e9s et enrichis depuis evs_label_has_company"}, "tags": ["staging"], "description": "Association entre les labels et les entreprises", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Identifiant de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel"], "description": "label_has_company nettoy\u00e9s et enrichis depuis evs_label_has_company"}, "created_at": 1760962911.3601453, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel'],\n        description='label_has_company nettoy\u00e9s et enrichis depuis evs_label_has_company'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_company') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idcompany as int64) as idcompany,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_company"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_company.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_company`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idcompany as int64) as idcompany,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_family": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_family", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_family.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_family.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_family", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_family"], "alias": "stg_oracle_neshu__label_family", "checksum": {"name": "sha256", "checksum": "2b34488fa9bd8f0d05003f19ef222a3fcf16bde5608f92e25bdacf337884f5c7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel_family"], "description": "Label famille nettoy\u00e9s et enrichis depuis evs_label_family"}, "tags": ["staging"], "description": "Familles de labels transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idlabel_family": {"name": "idlabel_family", "description": "Identifiant de la famille de labels", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code de la famille de labels", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel_family"], "description": "Label famille nettoy\u00e9s et enrichis depuis evs_label_family"}, "created_at": 1760962911.3593934, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel_family'],\n        description='Label famille nettoy\u00e9s et enrichis depuis evs_label_family'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_family') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel_family as int64) as idlabel_family,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_family"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_family.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_family`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel_family as int64) as idlabel_family,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idlabel_family"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_task": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_task", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_task.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_task.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_task"], "alias": "stg_oracle_neshu__label_has_task", "checksum": {"name": "sha256", "checksum": "077322b3d0dd212f3367de2e510bd1bc437a874fd3d1ec5287cd0bdaef22d4a8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel"], "description": "label_has_task nettoy\u00e9s et enrichis depuis evs_label_has_task"}, "tags": ["staging"], "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": [], "relationships": {"to": "ref('stg_oracle_neshu__label')"}}, "idtask": {"name": "idtask", "description": "Identifiant du task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": [], "relationships": {"to": "ref('stg_oracle_neshu__task')"}}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel"], "description": "label_has_task nettoy\u00e9s et enrichis depuis evs_label_has_task"}, "created_at": 1760962911.364691, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel'],\n        description='label_has_task nettoy\u00e9s et enrichis depuis evs_label_has_task'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_task') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idtask as int64) as idtask,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_task"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_task.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_task`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idtask as int64) as idtask,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__company": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__company", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__company.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__company.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__company", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__company"], "alias": "stg_oracle_neshu__company", "checksum": {"name": "sha256", "checksum": "182f9484518c042a4e6cb0b4e05ec40fb590cde8533f5b19c9e8398506f49521"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idcompany"], "description": "Clients nettoy\u00e9s et enrichis depuis evs_company"}, "tags": ["staging"], "description": "Clients transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idcompany": {"name": "idcompany", "description": "Identifiant unique de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_idcompany": {"name": "company_idcompany", "description": "Link to IDCOMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_type": {"name": "idcompany_type", "description": "Link to COMPANY_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date creation de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de modification de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Date d'extraction depuis la source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted_at": {"name": "deleted_at", "description": "Date de suppression (soft delete)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idcompany"], "description": "Clients nettoy\u00e9s et enrichis depuis evs_company"}, "created_at": 1760962911.3507488, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idcompany'],\n        description='Clients nettoy\u00e9s et enrichis depuis evs_company'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_company') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcompany as int64) as idcompany,\n        cast(company_idcompany as int64) as company_idcompany,\n        cast(idcompany_type as int64) as idcompany_type,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        code_status_record,\n        name,\n        siret,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__company.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_company`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcompany as int64) as idcompany,\n        cast(company_idcompany as int64) as company_idcompany,\n        cast(idcompany_type as int64) as idcompany_type,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        code_status_record,\n        name,\n        siret,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idcompany"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_device": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_device", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_device.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_device.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_device"], "alias": "stg_oracle_neshu__label_has_device", "checksum": {"name": "sha256", "checksum": "1d1e151a9ceb1a7b93c81ee6548ba5696c9dc4db001ccd8781839842d886a3f5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel"], "description": "label_has_device nettoy\u00e9s et enrichis depuis evs_label_has_device"}, "tags": ["staging"], "description": "Association entre les labels et les devices", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "iddevice": {"name": "iddevice", "description": "Identifiant du device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel"], "description": "label_has_device nettoy\u00e9s et enrichis depuis evs_label_has_device"}, "created_at": 1760962911.36171, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel'],\n        description='label_has_device nettoy\u00e9s et enrichis depuis evs_label_has_device'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_device') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(iddevice as int64) as iddevice,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_device"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_device.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_device`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(iddevice as int64) as iddevice,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label"], "alias": "stg_oracle_neshu__label", "checksum": {"name": "sha256", "checksum": "cd4c33c1b8f09f89e952e8154ff672a31ac682799133891decb12478bbd5b87c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel", "idlabel_family"], "description": "Label nettoy\u00e9s et enrichis depuis evs_label"}, "tags": ["staging"], "description": "Labels transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant de la statut de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlabel_family": {"name": "idlabel_family", "description": "Link to LABEL_FAMILY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel", "idlabel_family"], "description": "Label nettoy\u00e9s et enrichis depuis evs_label"}, "created_at": 1760962911.3585865, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel','idlabel_family'],\n        description='Label nettoy\u00e9s et enrichis depuis evs_label'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idlabel_family as int64) as idlabel_family,\n        \n        -- Colonnes texte\n        code,\n\n        -- Bolean\n        cast(system as boolean) as is_system,\n        cast(enabled as boolean) as is_enabled,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idlabel_family as int64) as idlabel_family,\n        \n        -- Colonnes texte\n        code,\n\n        -- Bolean\n        cast(system as boolean) as is_system,\n        cast(enabled as boolean) as is_enabled,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idlabel"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__task_status": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__task_status", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__task_status.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__task_status.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__task_status", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__task_status"], "alias": "stg_oracle_neshu__task_status", "checksum": {"name": "sha256", "checksum": "4598ad93eac812f4ebf44f5df46531c3b39b069ccdf3c5853111dc6f4d8ec55d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idtask_status"], "description": "task_status nettoy\u00e9s et enrichis depuis evs_task_status"}, "tags": ["staging"], "description": "Statuts des t\u00e2ches transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idtask_status": {"name": "idtask_status", "description": "Identifiant de la statut de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idtask_status"], "description": "task_status nettoy\u00e9s et enrichis depuis evs_task_status"}, "created_at": 1760962911.3730907, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idtask_status'],\n        description='task_status nettoy\u00e9s et enrichis depuis evs_task_status'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_task_status') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask_status as int64) as idtask_status,\n\n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_status"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__task_status.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_task_status`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask_status as int64) as idtask_status,\n\n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idtask_status"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__device": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__device", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__device.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__device.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__device", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__device"], "alias": "stg_oracle_neshu__device", "checksum": {"name": "sha256", "checksum": "f650fbb298427dff007169949c6eac7255c5c6c0bd7ab459be14b10749254188"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["iddevice", "idlocation", "idcompany_customer"], "description": "Device nettoy\u00e9s et enrichis depuis evs_device"}, "tags": ["staging"], "description": "Devices transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"iddevice": {"name": "iddevice", "description": "Identifiant unique du device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_iddevice": {"name": "device_iddevice", "description": "Lien vers la machine parents/enfant => si pas d'id alors pas de machine parent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Link to LOCATION", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_customer": {"name": "idcompany_customer", "description": "Link to IDCOMPANY for customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_supplier": {"name": "idcompany_supplier", "description": "Link to IDCOMPANY for supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_owner": {"name": "idcompany_owner", "description": "Link to IDCOMPANY for owner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code device (Num\u00e9ro de serie AS/MA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["iddevice", "idlocation", "idcompany_customer"], "description": "Device nettoy\u00e9s et enrichis depuis evs_device"}, "created_at": 1760962911.3578596, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['iddevice','idlocation','idcompany_customer'],\n        description='Device nettoy\u00e9s et enrichis depuis evs_device'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_device') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(iddevice as int64) as iddevice,\n        cast(device_iddevice as int64) as device_iddevice,\n        cast(iddevice_type as int64) as iddevice_type,\n        cast(idmodel as int64) as idmodel,\n        cast(idcompany_customer as int64) as idcompany_customer,\n        cast(idcompany_supplier as int64) as idcompany_supplier,\n        cast(idcompany_owner as int64) as idcompany_owner,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        cast(idlocation as int64) as idlocation,\n        \n        -- Colonnes texte\n        code,\n        name,\n        serial,\n        code_status_record,\n\n        -- Date li\u00e9e \u00e0 la machine\n        timestamp(last_installation_date) as last_installation_date,\n        timestamp(purchase_date) as purchase_date,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_device"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__device.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_device`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(iddevice as int64) as iddevice,\n        cast(device_iddevice as int64) as device_iddevice,\n        cast(iddevice_type as int64) as iddevice_type,\n        cast(idmodel as int64) as idmodel,\n        cast(idcompany_customer as int64) as idcompany_customer,\n        cast(idcompany_supplier as int64) as idcompany_supplier,\n        cast(idcompany_owner as int64) as idcompany_owner,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        cast(idlocation as int64) as idlocation,\n        \n        -- Colonnes texte\n        code,\n        name,\n        serial,\n        code_status_record,\n\n        -- Date li\u00e9e \u00e0 la machine\n        timestamp(last_installation_date) as last_installation_date,\n        timestamp(purchase_date) as purchase_date,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["iddevice"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_product": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_product", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_product.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_product.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_product"], "alias": "stg_oracle_neshu__label_has_product", "checksum": {"name": "sha256", "checksum": "3c785499e4ae49d56e4e4d5ca3f41f6419995d8749807cd16912b5bb1ea1331f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel"], "description": "label_has_product nettoy\u00e9s et enrichis depuis evs_label_has_product"}, "tags": ["staging"], "description": "Association entre les labels et les produits", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idproduct": {"name": "idproduct", "description": "Identifiant du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel"], "description": "label_has_product nettoy\u00e9s et enrichis depuis evs_label_has_product"}, "created_at": 1760962911.362483, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel'],\n        description='label_has_product nettoy\u00e9s et enrichis depuis evs_label_has_product'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_product') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idproduct as int64) as idproduct,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_product.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_product`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idproduct as int64) as idproduct,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__company_has_location": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__company_has_location", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__company_has_location.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__company_has_location.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__company_has_location"], "alias": "stg_oracle_neshu__company_has_location", "checksum": {"name": "sha256", "checksum": "2e5d3bbdc50781ae7166aaac1e8cd0cf6c9388a79fae190a1666e7046b3e9400"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlocation"], "description": "company_has_location nettoy\u00e9s et enrichis depuis evs_company_has_location"}, "tags": ["staging"], "description": "Association entre les entreprises et les localisations", "columns": {"idlocation": {"name": "idlocation", "description": "Identifiant de la localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Identifiant de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation_type": {"name": "idlocation_type", "description": "Type de localisation (ex: si\u00e8ge, agence)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlocation"], "description": "company_has_location nettoy\u00e9s et enrichis depuis evs_company_has_location"}, "created_at": 1760962911.3516798, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlocation'],\n        description='company_has_location nettoy\u00e9s et enrichis depuis evs_company_has_location'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_company_has_location') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlocation as int64) as idlocation,\n        cast(idcompany as int64) as idcompany,\n        cast(idlocation_type as int64) as idlocation_type,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_has_location"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__company_has_location.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_company_has_location`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlocation as int64) as idlocation,\n        cast(idcompany as int64) as idcompany,\n        cast(idlocation_type as int64) as idlocation_type,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__label_has_resources": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__label_has_resources", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__label_has_resources.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__label_has_resources.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__label_has_resources"], "alias": "stg_oracle_neshu__label_has_resources", "checksum": {"name": "sha256", "checksum": "929ce7db5794b9b45e7c9fd26cbd9df94766281d0018a73b38c517c37a506b87"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlabel"], "description": "label_has_resources nettoy\u00e9s et enrichis depuis evs_label_has_resources"}, "tags": ["staging"], "description": "Association entre les labels et les ressources", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources": {"name": "idresources", "description": "Identifiant du resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlabel"], "description": "label_has_resources nettoy\u00e9s et enrichis depuis evs_label_has_resources"}, "created_at": 1760962911.363239, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_resources`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlabel'],\n        description='label_has_resources nettoy\u00e9s et enrichis depuis evs_label_has_resources'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_label_has_resources') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idresources as int64) as idresources,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__label_has_resources.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_label_has_resources`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlabel as int64) as idlabel,\n        cast(idresources as int64) as idresources,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__location": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__location", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__location.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__location.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__location", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__location"], "alias": "stg_oracle_neshu__location", "checksum": {"name": "sha256", "checksum": "39d8d81687c2e516976f13e5d861dc84e3ca698bd4e112c43fb4f90538149791"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idlocation"], "description": "Locations nettoy\u00e9s et enrichis depuis evs_location"}, "tags": ["staging"], "description": "Locations transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idlocation": {"name": "idlocation", "description": "Identifiant du location", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom de la localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idlocation"], "description": "Locations nettoy\u00e9s et enrichis depuis evs_location"}, "created_at": 1760962911.3655, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idlocation'],\n        description='Locations nettoy\u00e9s et enrichis depuis evs_location'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_location') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlocation as int64) as idlocation,\n        \n        -- Colonnes texte\n        name,\n        access_info,\n        address1,\n        address2,\n        address3,\n        postal,\n        city,\n        country,\n        code,\n        code_status_record,\n        longitude,\n        latitude,\n        altitude,\n\n        -- Dates et timestamps\n        timestamp(localisation_date) as localisation_date,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_location"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__location.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_location`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idlocation as int64) as idlocation,\n        \n        -- Colonnes texte\n        name,\n        access_info,\n        address1,\n        address2,\n        address3,\n        postal,\n        city,\n        country,\n        code,\n        code_status_record,\n        longitude,\n        latitude,\n        altitude,\n\n        -- Dates et timestamps\n        timestamp(localisation_date) as localisation_date,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idlocation"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__contract": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__contract", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__contract.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__contract.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__contract", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__contract"], "alias": "stg_oracle_neshu__contract", "checksum": {"name": "sha256", "checksum": "1a46e4a7dc8022aeb9213ca9d109a19ac493c4da281af77c1689a1e72cb03d61"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idcontract"], "description": "Contrats nettoy\u00e9s et enrichis depuis evs_contract et evs_contract_parsed (XML pars\u00e9)."}, "tags": ["staging"], "description": "Contrats transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idcontract": {"name": "idcontract", "description": "Identifiant unique du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_peer": {"name": "idcompany_peer", "description": "Link to IDCOMPANY for peer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcontract_type": {"name": "idcontract_type", "description": "ATTENTION : link to LABEL from label_family.code = CONTRACT_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "code du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "nom du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement_raw": {"name": "engagement_raw", "description": "Engagement conso brut sans nettoyage (ex: '45 000', '2000', 'AUCUN', '0')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement_cleaned": {"name": "engagement_cleaned", "description": "Engagement conso nettoy\u00e9 en entier (ex: 45000, 2000, 0)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "nb_collaborateurs": {"name": "nb_collaborateurs", "description": "Nombre de collaborateurs, transformation en entier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGINAL_START_DATE": {"name": "ORIGINAL_START_DATE", "description": "Date de debut original du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGINAL_END_DATE": {"name": "ORIGINAL_END_DATE", "description": "Date de fin original du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CURRENT_END_DATE": {"name": "CURRENT_END_DATE", "description": "Date de fin courant du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idcontract"], "description": "Contrats nettoy\u00e9s et enrichis depuis evs_contract et evs_contract_parsed (XML pars\u00e9)."}, "created_at": 1760962911.355754, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idcontract'],\n        description='Contrats nettoy\u00e9s et enrichis depuis evs_contract et evs_contract_parsed (XML pars\u00e9).'\n    )\n}}\n\nwith source_data as (\n    select\n        cast(idcontract as int64) as idcontract,\n        idcontract_type,\n        idcompany_self,\n        idcompany_financial,\n        idcompany_peer,\n        idcontact_creation,\n        idcontact_modification,\n        code,\n        name,\n        code_status_record,\n        xml,\n        original_start_date,\n        original_end_date,\n        current_end_date,\n        termination_date,\n        creation_date,\n        modification_date,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n    from {{ source('oracle_neshu', 'evs_contract') }}\n),\n\n\nparsed_data as (\n    select\n        cast(idcontract as int64) as idcontract,\n        \n        -- nombre_collab \u2192 conversion en entier\n        cast(nullif(trim(nombre_collab), '') as int64) as nombre_collab,\n\n        -- garder la valeur brute telle quelle\n        trim(engagement) as engagement_raw,\n\n        -- version nettoy\u00e9e num\u00e9rique\n        case\n            when upper(trim(engagement)) = 'AUCUN' then 0\n            else cast(\n                regexp_replace(regexp_extract(engagement, r'[\\d\\s]+'), r'\\s+', '') as int64\n            )\n        end as engagement_clean,\n\n        timestamp(extracted_at) as parsed_extracted_at\n    from {{ source('oracle_neshu', 'evs_contract_parsed') }}\n),\n\ncleaned_data as (\n    select\n        -- Colonnes de evs_contract\n        cast(c.idcontract as int64) as idcontract,\n        cast(c.idcontract_type as int64) as idcontract_type,\n        cast(c.idcompany_self as int64) as idcompany_self,\n        cast(c.idcompany_financial as int64) as idcompany_financial,\n        cast(c.idcompany_peer as int64) as idcompany_peer,\n        cast(c.idcontact_creation as int64) as idcontact_creation,\n        cast(c.idcontact_modification as int64) as idcontact_modification,\n        \n        c.code,\n        c.name,\n        c.code_status_record,\n        -- Colonnes enrichies depuis evs_contract_parsed\n        p.nombre_collab,\n        p.engagement_raw,\n        p.engagement_clean,\n\n        timestamp(c.original_start_date) as original_start_date,\n        timestamp(c.original_end_date) as original_end_date,\n        timestamp(c.current_end_date) as current_end_date,\n        timestamp(c.termination_date) as termination_date,\n\n        timestamp(p.parsed_extracted_at) as parsed_extracted_at,\n        timestamp(c.creation_date) as created_at,\n        timestamp(coalesce(c.modification_date, c.creation_date)) as updated_at,\n        timestamp(c._sdc_extracted_at) as extracted_at,\n        timestamp(c._sdc_deleted_at) as deleted_at,\n\n    from source_data c\n    left join parsed_data p using (idcontract)\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contract"], ["oracle_neshu", "evs_contract_parsed"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contract", "source.dbt_warehouse.oracle_neshu.evs_contract_parsed"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__contract.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select\n        cast(idcontract as int64) as idcontract,\n        idcontract_type,\n        idcompany_self,\n        idcompany_financial,\n        idcompany_peer,\n        idcontact_creation,\n        idcontact_modification,\n        code,\n        name,\n        code_status_record,\n        xml,\n        original_start_date,\n        original_end_date,\n        current_end_date,\n        termination_date,\n        creation_date,\n        modification_date,\n        _sdc_extracted_at,\n        _sdc_deleted_at\n    from `evs-datastack-prod`.`prod_raw`.`evs_contract`\n),\n\n\nparsed_data as (\n    select\n        cast(idcontract as int64) as idcontract,\n        \n        -- nombre_collab \u2192 conversion en entier\n        cast(nullif(trim(nombre_collab), '') as int64) as nombre_collab,\n\n        -- garder la valeur brute telle quelle\n        trim(engagement) as engagement_raw,\n\n        -- version nettoy\u00e9e num\u00e9rique\n        case\n            when upper(trim(engagement)) = 'AUCUN' then 0\n            else cast(\n                regexp_replace(regexp_extract(engagement, r'[\\d\\s]+'), r'\\s+', '') as int64\n            )\n        end as engagement_clean,\n\n        timestamp(extracted_at) as parsed_extracted_at\n    from `evs-datastack-prod`.`prod_raw`.`evs_contract_parsed`\n),\n\ncleaned_data as (\n    select\n        -- Colonnes de evs_contract\n        cast(c.idcontract as int64) as idcontract,\n        cast(c.idcontract_type as int64) as idcontract_type,\n        cast(c.idcompany_self as int64) as idcompany_self,\n        cast(c.idcompany_financial as int64) as idcompany_financial,\n        cast(c.idcompany_peer as int64) as idcompany_peer,\n        cast(c.idcontact_creation as int64) as idcontact_creation,\n        cast(c.idcontact_modification as int64) as idcontact_modification,\n        \n        c.code,\n        c.name,\n        c.code_status_record,\n        -- Colonnes enrichies depuis evs_contract_parsed\n        p.nombre_collab,\n        p.engagement_raw,\n        p.engagement_clean,\n\n        timestamp(c.original_start_date) as original_start_date,\n        timestamp(c.original_end_date) as original_end_date,\n        timestamp(c.current_end_date) as current_end_date,\n        timestamp(c.termination_date) as termination_date,\n\n        timestamp(p.parsed_extracted_at) as parsed_extracted_at,\n        timestamp(c.creation_date) as created_at,\n        timestamp(coalesce(c.modification_date, c.creation_date)) as updated_at,\n        timestamp(c._sdc_extracted_at) as extracted_at,\n        timestamp(c._sdc_deleted_at) as deleted_at,\n\n    from source_data c\n    left join parsed_data p using (idcontract)\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idcontract"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__product": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__product", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__product.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__product.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__product"], "alias": "stg_oracle_neshu__product", "checksum": {"name": "sha256", "checksum": "08edaa21c2c52be2b5fb7fd1ce70778ec8b1d574f4aaa65ee1922641adf8177e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idproduct"], "description": "Product nettoy\u00e9s et enrichis depuis evs_product"}, "tags": ["staging"], "description": "Produits transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idproduct": {"name": "idproduct", "description": "Identifiant unique du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idproduct_type": {"name": "idproduct_type", "description": "Link to PRODUCT_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_unit_price": {"name": "purchase_unit_price", "description": "Prix d'achat unitaire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idproduct"], "description": "Product nettoy\u00e9s et enrichis depuis evs_product"}, "created_at": 1760962911.3663802, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idproduct'],\n        description='Product nettoy\u00e9s et enrichis depuis evs_product'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_product') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idproduct as int64) as idproduct,\n        cast(idproduct_type as int64) as idproduct_type,\n        cast(idcompany_supplier as int64) as idcompany_supplier,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        name,\n        commercial_name,\n        code_status_record,\n\n        -- Colonnes num\u00e9riques\n        cast(purchase_unit_price as float64) as purchase_unit_price,\n        cast(average_purchase_price as float64) as average_purchase_price,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__product.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_product`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idproduct as int64) as idproduct,\n        cast(idproduct_type as int64) as idproduct_type,\n        cast(idcompany_supplier as int64) as idcompany_supplier,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        name,\n        commercial_name,\n        code_status_record,\n\n        -- Colonnes num\u00e9riques\n        cast(purchase_unit_price as float64) as purchase_unit_price,\n        cast(average_purchase_price as float64) as average_purchase_price,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idproduct"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__task_type": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__task_type", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__task_type.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__task_type.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__task_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__task_type"], "alias": "stg_oracle_neshu__task_type", "checksum": {"name": "sha256", "checksum": "ee3e6e71802915246c19c3c05fe62d38ce446923a232407b00bbf2c5fa74038e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idtask_type"], "description": "task_type nettoy\u00e9s et enrichis depuis evs_task_type"}, "tags": ["staging"], "description": "Types de t\u00e2ches transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idtask_type": {"name": "idtask_type", "description": "Identifiant unique du type de t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idtask_type"], "description": "task_type nettoy\u00e9s et enrichis depuis evs_task_type"}, "created_at": 1760962911.3737566, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_type`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idtask_type'],\n        description='task_type nettoy\u00e9s et enrichis depuis evs_task_type'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_task_type') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask_type as int64) as idtask_type,\n\n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_type"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__task_type.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_task_type`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idtask_type as int64) as idtask_type,\n\n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idtask_type"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__resources_type": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__resources_type", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__resources_type.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__resources_type.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__resources_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__resources_type"], "alias": "stg_oracle_neshu__resources_type", "checksum": {"name": "sha256", "checksum": "f7783df8cdaf171014b4a296e84c8adc0e623ff7c26327be55777e5c8316f6c0"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idresources_type"], "description": "Resources_type nettoy\u00e9s et enrichis depuis evs_resources_type"}, "tags": ["staging"], "description": "Types de ressources transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idresources_type": {"name": "idresources_type", "description": "Identifiant unique du type la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idresources_type"], "description": "Resources_type nettoy\u00e9s et enrichis depuis evs_resources_type"}, "created_at": 1760962911.3688202, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources_type`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idresources_type'],\n        description='Resources_type nettoy\u00e9s et enrichis depuis evs_resources_type'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_resources_type') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idresources_type as int64) as idresources_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources_type"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__resources_type.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_resources_type`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idresources_type as int64) as idresources_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idresources_type"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__resources": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__resources", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__resources.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__resources.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__resources"], "alias": "stg_oracle_neshu__resources", "checksum": {"name": "sha256", "checksum": "1c3b941fe2d19e85e613f2e219322970e396df1e3ca2e56fd743ca044fbbdc51"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idresources"], "description": "Resources nettoy\u00e9s et enrichis depuis evs_resources"}, "tags": ["staging"], "description": "Ressources transform\u00e9es et nettoy\u00e9es depuis la base Oracle", "columns": {"idresources": {"name": "idresources", "description": "Identifiant unique de la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Link to COMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Link to LOCATION", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "RESOURCES_IDRESOURCES": {"name": "RESOURCES_IDRESOURCES", "description": "Link to RESOURCES peer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources_type": {"name": "idresources_type", "description": "Link to RESOURCES_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idresources"], "description": "Resources nettoy\u00e9s et enrichis depuis evs_resources"}, "created_at": 1760962911.3681154, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idresources'],\n        description='Resources nettoy\u00e9s et enrichis depuis evs_resources'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_resources') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idresources as int64) as idresources,\n        cast(idresources_type as int64) as idresources_type,\n        cast(resources_idresources as int64) as resources_idresources,\n        cast(idcompany as int64) as idcompany,\n        cast(idcompany_storehouse as int64) as idcompany_storehouse,\n        cast(idlocation as int64) as idlocation,\n        cast(idcontact as int64) as idcontact,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        name,\n        code_status_record,\n\n        -- Colonnes num\u00e9riques\n        cast(cost as float64) as cost,\n    \n        -- Timestamps harmonis\u00e9s\n        timestamp(arrival) as arrival,\n        timestamp(departure) as departure,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__resources.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_resources`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idresources as int64) as idresources,\n        cast(idresources_type as int64) as idresources_type,\n        cast(resources_idresources as int64) as resources_idresources,\n        cast(idcompany as int64) as idcompany,\n        cast(idcompany_storehouse as int64) as idcompany_storehouse,\n        cast(idlocation as int64) as idlocation,\n        cast(idcontact as int64) as idcontact,\n        cast(idcontact_creation as int64) as idcontact_creation,\n        cast(idcontact_modification as int64) as idcontact_modification,\n        \n        -- Colonnes texte\n        code,\n        name,\n        code_status_record,\n\n        -- Colonnes num\u00e9riques\n        cast(cost as float64) as cost,\n    \n        -- Timestamps harmonis\u00e9s\n        timestamp(arrival) as arrival,\n        timestamp(departure) as departure,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(creation_date) as created_at,\n        timestamp(coalesce(modification_date, creation_date)) as updated_at, -- Use COALESCE to ensure updated_at is never null, falling back to creation_date\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idresources"], "time_spine": null}, "model.dbt_warehouse.stg_oracle_neshu__company_type": {"database": "evs-datastack-prod", "schema": "prod_staging", "name": "stg_oracle_neshu__company_type", "resource_type": "model", "package_name": "dbt_warehouse", "path": "staging/oracle_neshu/stg_oracle_neshu__company_type.sql", "original_file_path": "models/staging/oracle_neshu/stg_oracle_neshu__company_type.sql", "unique_id": "model.dbt_warehouse.stg_oracle_neshu__company_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "stg_oracle_neshu__company_type"], "alias": "stg_oracle_neshu__company_type", "checksum": {"name": "sha256", "checksum": "cd290c7575c4ad44a2c0696fe99e5b5eb9538d7e7902386a48a70913fc57a513"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["idcompany_type"], "description": "Type client nettoy\u00e9s et enrichis depuis evs_company_type"}, "tags": ["staging"], "description": "Types d'entreprises transform\u00e9s et nettoy\u00e9s depuis la base Oracle", "columns": {"idcompany_type": {"name": "idcompany_type", "description": "Identifiant unique du type l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/staging/oracle_neshu/_oracle_neshu__models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "staging", "tags": ["staging"], "cluster_by": ["idcompany_type"], "description": "Type client nettoy\u00e9s et enrichis depuis evs_company_type"}, "created_at": 1760962911.3524292, "relation_name": "`evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_type`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['idcompany_type'],\n        description='Type client nettoy\u00e9s et enrichis depuis evs_company_type'\n    )\n}}\n\nwith source_data as (\n    select *\n    from {{ source('oracle_neshu', 'evs_company_type') }}\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcompany_type as int64) as idcompany_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_type"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/stg_oracle_neshu__company_type.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select *\n    from `evs-datastack-prod`.`prod_raw`.`evs_company_type`\n),\n\ncleaned_data as (\n    select\n        -- IDs convertis en BIGINT\n        cast(idcompany_type as int64) as idcompany_type,\n        \n        -- Colonnes texte\n        code,\n\n        -- Timestamps harmonis\u00e9s\n        timestamp(modification_date) as updated_at,\n        timestamp(_sdc_extracted_at) as extracted_at,\n        timestamp(_sdc_deleted_at) as deleted_at\n        \n    from source_data\n)\n\nselect * from cleaned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["idcompany_type"], "time_spine": null}, "model.dbt_warehouse.dim_yuman__clients": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_yuman__clients", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/yuman/dim_yuman__clients.sql", "original_file_path": "models/marts/yuman/dim_yuman__clients.sql", "unique_id": "model.dbt_warehouse.dim_yuman__clients", "fqn": ["dbt_warehouse", "marts", "yuman", "dim_yuman__clients"], "alias": "dim_yuman__clients", "checksum": {"name": "sha256", "checksum": "e588a18a687fddc5a9236f94245f48b6a190c2131d3b5a05e6cc72632f5a099b"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Dimension clients Yuman"}, "tags": ["marts"], "description": "Clients Marts Yuman", "columns": {"client_id": {"name": "client_id", "description": "Identifiant unique du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie du client (Sp\u00e9cifique NESHU : OR / ARGENT / BRONZE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_address": {"name": "client_address", "description": "Adresse du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "Statut d'activation du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "partner_name": {"name": "partner_name", "description": "Nom du partenaire associ\u00e9 au client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/yuman/_yuman__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Dimension clients Yuman"}, "created_at": 1760962911.7053363, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_yuman__clients`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Dimension clients Yuman'\n  )\n}}\n\nSELECT \n-- Informations Client \nclient_id,\npartner_name\nclient_code,\nclient_name,\nclient_category,\nclient_address,\nis_active as client_is_active,\ncreated_at,\nupdated_at\n\nFROM {{ref('stg_yuman__clients')}} ym", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_yuman__clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/dim_yuman__clients.sql", "compiled": true, "compiled_code": "\n\nSELECT \n-- Informations Client \nclient_id,\npartner_name\nclient_code,\nclient_name,\nclient_category,\nclient_address,\nis_active as client_is_active,\ncreated_at,\nupdated_at\n\nFROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients` ym", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["client_id"], "time_spine": null}, "model.dbt_warehouse.dim_yuman__materials_clients": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_yuman__materials_clients", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/yuman/dim_yuman__materials_clients.sql", "original_file_path": "models/marts/yuman/dim_yuman__materials_clients.sql", "unique_id": "model.dbt_warehouse.dim_yuman__materials_clients", "fqn": ["dbt_warehouse", "marts", "yuman", "dim_yuman__materials_clients"], "alias": "dim_yuman__materials_clients", "checksum": {"name": "sha256", "checksum": "19391b5d49d9e41445ab06c24cd88da2614a41b20035be159095c0a0f88828d3"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Dimension materials enrichie avec les informations de sites et de clients"}, "tags": ["marts"], "description": "Dimension materials enrichie avec les informations de sites et de clients\n", "columns": {"material_id": {"name": "material_id", "description": "Identifiant unique de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_description": {"name": "material_description", "description": "Type de machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_brand": {"name": "material_brand", "description": "Marque de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Cat\u00e9gorie de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_in_service_date": {"name": "material_in_service_date", "description": "Date de mise en service de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Id du client associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code du client associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_address": {"name": "client_address", "description": "Adresse du client associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "partner_name": {"name": "partner_name", "description": "Nom du partenaire associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Id du site associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_address": {"name": "site_address", "description": "Adresse du site associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_name": {"name": "site_name", "description": "Nom du site associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal du site associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/yuman/_yuman__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Dimension materials enrichie avec les informations de sites et de clients"}, "created_at": 1760962911.7133272, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_yuman__materials_clients`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Dimension materials enrichie avec les informations de sites et de clients'\n  )\n}}\n\nSELECT \n-- Informations Machine\nym.material_id,\nym.material_description,\nym.material_name,\nym.material_brand,\nym.material_serial_number,\nycat.category_name,\nym.material_in_service_date,\n-- Informations Client \nyc.client_id,\nyc.client_code,\nyc.client_address,\nyc.client_name,\nyc.partner_name,\n-- Informations Site\nys.site_id,\nys.site_address,\nys.site_name, \nys.site_postal_code\nFROM {{ref('stg_yuman__materials')}} ym\nleft join {{ref('stg_yuman__sites')}} ys on ym.site_id=ys.site_id\nleft join {{ref('stg_yuman__clients')}} yc on ys.client_id= yc.client_id\nleft join {{ref('stg_yuman__materials_categories')}} ycat on ycat.category_id = ym.category_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}, {"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__materials_categories", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__materials_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/dim_yuman__materials_clients.sql", "compiled": true, "compiled_code": "\n\nSELECT \n-- Informations Machine\nym.material_id,\nym.material_description,\nym.material_name,\nym.material_brand,\nym.material_serial_number,\nycat.category_name,\nym.material_in_service_date,\n-- Informations Client \nyc.client_id,\nyc.client_code,\nyc.client_address,\nyc.client_name,\nyc.partner_name,\n-- Informations Site\nys.site_id,\nys.site_address,\nys.site_name, \nys.site_postal_code\nFROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials` ym\nleft join `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites` ys on ym.site_id=ys.site_id\nleft join `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients` yc on ys.client_id= yc.client_id\nleft join `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories` ycat on ycat.category_id = ym.category_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["material_id"], "time_spine": null}, "model.dbt_warehouse.dim_yuman__sites": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_yuman__sites", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/yuman/dim_yuman__sites.sql", "original_file_path": "models/marts/yuman/dim_yuman__sites.sql", "unique_id": "model.dbt_warehouse.dim_yuman__sites", "fqn": ["dbt_warehouse", "marts", "yuman", "dim_yuman__sites"], "alias": "dim_yuman__sites", "checksum": {"name": "sha256", "checksum": "80dd9810e9a7f12c42d5a046bec75ca653cd9f61abf5cc1de4547e74436c4d2f"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Dimension sites Yuman"}, "tags": ["marts"], "description": "Sites Marts Yuman", "columns": {"site_id": {"name": "site_id", "description": "Identifiant unique du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "R\u00e9f\u00e9rence vers le client propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agency_id": {"name": "agency_id", "description": "Identifiant de l'agence associ\u00e9e au site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_code": {"name": "site_code", "description": "Code du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_name": {"name": "site_name", "description": "Nom du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_address": {"name": "site_address", "description": "Adresse du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation de l'enregistrement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de la derni\u00e8re mise \u00e0 jour de l'enregistrement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/yuman/_yuman__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Dimension sites Yuman"}, "created_at": 1760962911.7088163, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Dimension sites Yuman'\n  )\n}}\n\nSELECT \n-- Informations Client \nsite_id,\nclient_id,\nagency_id,\nsite_code,\nsite_name,\nsite_address,\nsite_postal_code,\ncreated_at,\nupdated_at\n\nFROM {{ref('stg_yuman__sites')}} ym", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/dim_yuman__sites.sql", "compiled": true, "compiled_code": "\n\nSELECT \n-- Informations Client \nsite_id,\nclient_id,\nagency_id,\nsite_code,\nsite_name,\nsite_address,\nsite_postal_code,\ncreated_at,\nupdated_at\n\nFROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites` ym", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["site_id"], "time_spine": null}, "model.dbt_warehouse.dim_yuman__materials": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_yuman__materials", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/yuman/dim_yuman__materials.sql", "original_file_path": "models/marts/yuman/dim_yuman__materials.sql", "unique_id": "model.dbt_warehouse.dim_yuman__materials", "fqn": ["dbt_warehouse", "marts", "yuman", "dim_yuman__materials"], "alias": "dim_yuman__materials", "checksum": {"name": "sha256", "checksum": "ec097932dfd7915150b36aaa3b9225c8463c4e0595c4097fd27c3260531fa8bb"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Dimension materials enrichie avec les informations cat\u00e9gorie material"}, "tags": ["marts"], "description": "Mat\u00e9riaux Marts Yuman enrichie avec les informations cat\u00e9gorie material", "columns": {"material_id": {"name": "material_id", "description": "Identifiant unique du mat\u00e9riau", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "R\u00e9f\u00e9rence vers le site propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_description": {"name": "material_description", "description": "Description de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_name": {"name": "material_name", "description": "Nom de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_brand": {"name": "material_brand", "description": "Marque de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Cat\u00e9gorie de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_in_service_date": {"name": "material_in_service_date", "description": "Date de mise en service de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation de l'enregistrement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de la derni\u00e8re mise \u00e0 jour de l'enregistrement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/yuman/_yuman__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Dimension materials enrichie avec les informations cat\u00e9gorie material"}, "created_at": 1760962911.711854, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_yuman__materials`", "raw_code": "{{\n  config(\n    materialized='table',\n    description='Dimension materials enrichie avec les informations cat\u00e9gorie material'\n  )\n}}\n\nSELECT \n-- Informations Machine\nym.material_id,\nym.site_id,\nym.material_description,\nym.material_name,\nym.material_brand,\nym.material_serial_number,\nycat.category_name,\nym.material_in_service_date,\nym.created_at,\nym.updated_at\nFROM {{ref('stg_yuman__materials')}} ym\nleft join {{ref('stg_yuman__materials_categories')}} ycat on ycat.category_id = ym.category_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}, {"name": "stg_yuman__materials_categories", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/dim_yuman__materials.sql", "compiled": true, "compiled_code": "\n\nSELECT \n-- Informations Machine\nym.material_id,\nym.site_id,\nym.material_description,\nym.material_name,\nym.material_brand,\nym.material_serial_number,\nycat.category_name,\nym.material_in_service_date,\nym.created_at,\nym.updated_at\nFROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials` ym\nleft join `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories` ycat on ycat.category_id = ym.category_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["material_id"], "time_spine": null}, "model.dbt_warehouse.dim_oracle_neshu__device": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_oracle_neshu__device", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/dim_oracle_neshu__device.sql", "original_file_path": "models/marts/oracle_neshu/dim_oracle_neshu__device.sql", "unique_id": "model.dbt_warehouse.dim_oracle_neshu__device", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dim_oracle_neshu__device"], "alias": "dim_oracle_neshu__device", "checksum": {"name": "sha256", "checksum": "8c369c0eb77cafa7a456c02e1844262501d759c49e3d22a76f903e2bb94557e3"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["device_id"], "description": "Dimension device enrichie \u00e0 partir des labels associ\u00e9s (\u00e9tat, statut, gamme, cat\u00e9gorie, marque, etc.)"}, "tags": ["marts"], "description": "Dimension device enrichie \u00e0 partir des labels associ\u00e9s (\u00e9tat, statut, gamme, cat\u00e9gorie, marque, etc.), filtr\u00e9e sur les machines (type 1).\n", "columns": {"device_id": {"name": "device_id", "description": "Identifiant unique de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_type_id": {"name": "device_type_id", "description": "Type de machine (1 = machine, autres ignor\u00e9s ici)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_iddevice": {"name": "device_iddevice", "description": "ID de la machine correspondant : vaut nulle si pas d'\u00e9quipement parent, sinon l'ID de la machine parente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "Identifiant du client (company) auquel est rattach\u00e9e la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_id": {"name": "location_id", "description": "Identifiant de localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_code": {"name": "device_code", "description": "Code interne de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_name": {"name": "device_name", "description": "Nom de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client associ\u00e9 \u00e0 la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_brand": {"name": "device_brand", "description": "Marque de la machine (label MARQUE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_gamme": {"name": "device_gamme", "description": "Gamme de la machine (label GAMME)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Cat\u00e9gorie de la machine (label CATEGORIE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_economic_model": {"name": "device_economic_model", "description": "Mod\u00e8le \u00e9conomique de la machine (label MODECOMA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "Indique si la machine est consid\u00e9r\u00e9e comme active selon le label ISACTIVE. TRUE si 'yes', sinon FALSE (converti en bool\u00e9en).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_location": {"name": "device_location", "description": "Informations d'acc\u00e8s au site de la machine (depuis la table location)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_installation_date": {"name": "last_installation_date", "description": "Date de derni\u00e8re installation de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation de la machine dans la base source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de la machine dans la base source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "cluster_by": ["device_id"], "description": "Dimension device enrichie \u00e0 partir des labels associ\u00e9s (\u00e9tat, statut, gamme, cat\u00e9gorie, marque, etc.)"}, "created_at": 1760962911.7732859, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`", "raw_code": "{{\n  config(\n    materialized='table',\n    cluster_by=['device_id'],\n    description='Dimension device enrichie \u00e0 partir des labels associ\u00e9s (\u00e9tat, statut, gamme, cat\u00e9gorie, marque, etc.)'\n  )\n}}\n\nWITH device_labels AS (\n  SELECT \n    d.iddevice as device_id,\n    d.device_iddevice,\n    d.iddevice_type as device_type_id,\n    d.code AS device_code,\n    d.name AS device_name,\n    d.last_installation_date,\n    d.created_at,\n    d.updated_at,\n    d.idlocation as location_id,\n    d.idcompany_customer as company_id,\n    c.code AS company_code,\n    c.name AS company_name,\n    lo.access_info,\n    l.code AS label_code,\n    lf.code AS label_family_code\n  FROM {{ ref('stg_oracle_neshu__device') }} d\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_has_device') }} lhd \n    ON lhd.iddevice = d.iddevice AND lhd.idlabel IS NOT NULL\n  LEFT JOIN {{ ref('stg_oracle_neshu__label') }} l \n    ON l.idlabel = lhd.idlabel\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_family') }} lf \n    ON lf.idlabel_family = l.idlabel_family\n  LEFT JOIN {{ ref('stg_oracle_neshu__company') }} c \n    ON c.idcompany = d.idcompany_customer\n  LEFT JOIN {{ ref('stg_oracle_neshu__location') }} lo\n    ON lo.idlocation = d.idlocation\n  WHERE d.idcompany_customer IS NOT NULL\n),\naggregated_labels AS (\n  SELECT\n    device_id,\n    device_type_id,\n    device_iddevice,\n    company_id,\n    location_id,\n    device_code,\n    device_name,\n    company_code,\n    company_name,\n    access_info,\n    last_installation_date,\n    created_at,\n    updated_at,\n    MAX(CASE WHEN label_family_code = 'ETAT_MACHINE' THEN label_code END) AS device_state,\n    MAX(CASE WHEN label_family_code = 'STATUT_MATERIEL' THEN label_code END) AS device_material_status,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active,\n    MAX(CASE WHEN label_family_code = 'GAMME' THEN label_code END) AS device_gamme,\n    MAX(CASE WHEN label_family_code = 'CATEGORIE' THEN label_code END) AS device_category,\n    MAX(CASE WHEN label_family_code = 'MARQUE' THEN label_code END) AS device_brand,\n    MAX(CASE WHEN label_family_code = 'MODECOMA' THEN label_code END) AS device_economic_model\n  FROM device_labels\n  GROUP BY\n    device_id,\n    device_type_id,\n    device_iddevice,\n    company_id,\n    location_id,\n    device_code,\n    device_name,\n    company_code,\n    company_name,\n    access_info,\n    last_installation_date,\n    created_at,\n    updated_at\n)\n\nSELECT\n  -- \ud83d\udd11 Identifiants\n  device_id,\n  device_iddevice,\n  device_type_id,\n  company_id,\n  location_id,\n\n  -- \ud83d\udcc7 Codes et noms\n  device_code,\n  device_name,\n  company_code,\n  company_name,\n\n  -- \ud83c\udff7\ufe0f Caract\u00e9ristiques machine\n  device_brand,\n  device_gamme,\n  device_category,\n  device_economic_model,\n\n  -- \ud83d\udccd Localisation\n  access_info as device_location,\n\n  -- \ud83c\udff7\ufe0f \u00c9tat et statu\n  CASE\n    WHEN LOWER(is_active) = 'yes' THEN TRUE\n    ELSE FALSE\n  END AS is_active,\n\n  -- \ud83d\udd52 Dates\n  last_installation_date,\n  created_at,\n  updated_at\nFROM aggregated_labels", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_device", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/dim_oracle_neshu__device.sql", "compiled": true, "compiled_code": "\n\nWITH device_labels AS (\n  SELECT \n    d.iddevice as device_id,\n    d.device_iddevice,\n    d.iddevice_type as device_type_id,\n    d.code AS device_code,\n    d.name AS device_name,\n    d.last_installation_date,\n    d.created_at,\n    d.updated_at,\n    d.idlocation as location_id,\n    d.idcompany_customer as company_id,\n    c.code AS company_code,\n    c.name AS company_name,\n    lo.access_info,\n    l.code AS label_code,\n    lf.code AS label_family_code\n  FROM `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device` d\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device` lhd \n    ON lhd.iddevice = d.iddevice AND lhd.idlabel IS NOT NULL\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` l \n    ON l.idlabel = lhd.idlabel\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf \n    ON lf.idlabel_family = l.idlabel_family\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c \n    ON c.idcompany = d.idcompany_customer\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` lo\n    ON lo.idlocation = d.idlocation\n  WHERE d.idcompany_customer IS NOT NULL\n),\naggregated_labels AS (\n  SELECT\n    device_id,\n    device_type_id,\n    device_iddevice,\n    company_id,\n    location_id,\n    device_code,\n    device_name,\n    company_code,\n    company_name,\n    access_info,\n    last_installation_date,\n    created_at,\n    updated_at,\n    MAX(CASE WHEN label_family_code = 'ETAT_MACHINE' THEN label_code END) AS device_state,\n    MAX(CASE WHEN label_family_code = 'STATUT_MATERIEL' THEN label_code END) AS device_material_status,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active,\n    MAX(CASE WHEN label_family_code = 'GAMME' THEN label_code END) AS device_gamme,\n    MAX(CASE WHEN label_family_code = 'CATEGORIE' THEN label_code END) AS device_category,\n    MAX(CASE WHEN label_family_code = 'MARQUE' THEN label_code END) AS device_brand,\n    MAX(CASE WHEN label_family_code = 'MODECOMA' THEN label_code END) AS device_economic_model\n  FROM device_labels\n  GROUP BY\n    device_id,\n    device_type_id,\n    device_iddevice,\n    company_id,\n    location_id,\n    device_code,\n    device_name,\n    company_code,\n    company_name,\n    access_info,\n    last_installation_date,\n    created_at,\n    updated_at\n)\n\nSELECT\n  -- \ud83d\udd11 Identifiants\n  device_id,\n  device_iddevice,\n  device_type_id,\n  company_id,\n  location_id,\n\n  -- \ud83d\udcc7 Codes et noms\n  device_code,\n  device_name,\n  company_code,\n  company_name,\n\n  -- \ud83c\udff7\ufe0f Caract\u00e9ristiques machine\n  device_brand,\n  device_gamme,\n  device_category,\n  device_economic_model,\n\n  -- \ud83d\udccd Localisation\n  access_info as device_location,\n\n  -- \ud83c\udff7\ufe0f \u00c9tat et statu\n  CASE\n    WHEN LOWER(is_active) = 'yes' THEN TRUE\n    ELSE FALSE\n  END AS is_active,\n\n  -- \ud83d\udd52 Dates\n  last_installation_date,\n  created_at,\n  updated_at\nFROM aggregated_labels", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["device_id"], "time_spine": null}, "model.dbt_warehouse.fct_oracle_neshu__conso_business_review": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "fct_oracle_neshu__conso_business_review", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/fct_oracle_neshu__conso_business_review.sql", "original_file_path": "models/marts/oracle_neshu/fct_oracle_neshu__conso_business_review.sql", "unique_id": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "fct_oracle_neshu__conso_business_review"], "alias": "fct_oracle_neshu__conso_business_review", "checksum": {"name": "sha256", "checksum": "b808a34d050466bf9dc929e212cff1107132c24a4338bc17f064960750e5982a"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "consumption_date", "product_type", "data_source"], "description": "Table de faits des consommations clients pour la BR Neshu - agr\u00e9gation des donn\u00e9es t\u00e9l\u00e9m\u00e9trie, chargement et livraison - Application r\u00e8gles m\u00e9tiers"}, "tags": ["marts"], "description": "Table de faits des consommations clients pour la Business Review Neshu. Consolidation des donn\u00e9es t\u00e9l\u00e9m\u00e9trie, chargement et livraison avec application des r\u00e8gles m\u00e9tier sp\u00e9cifiques (gratuit\u00e9 vs payant, types de produits, etc.). Utilis\u00e9e pour les analyses de consommation, comparatifs annuels et reporting client.\n", "columns": {"company_id": {"name": "company_id", "description": "Identifiant unique de la soci\u00e9t\u00e9 cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_id": {"name": "device_id", "description": "Identifiant de la machine (NULL pour les livraisons directes)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_id": {"name": "location_id", "description": "Identifiant de localisation (NULL pour les livraisons)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Identifiant unique du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client (ex: CN1234)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Nom de la soci\u00e9t\u00e9 cliente", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Localisation de la consommation (Localisation task par d\u00e9fault, si vide => prendre localisation device) ou 'LIVRAISON' pour les livraisons directes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_serial_number": {"name": "device_serial_number", "description": "Num\u00e9ro de s\u00e9rie de la machine ou 'LIVRAISON'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_name": {"name": "device_name", "description": "Nom de la machine ou 'LIVRAISON'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_brand": {"name": "device_brand", "description": "Marque de la machine (NESPRESSO, NESTLE, ANIMO) ou 'LIVRAISON'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_economic_model": {"name": "device_economic_model", "description": "Mod\u00e8le \u00e9conomique (Participatif valeurs, Participatif unit\u00e9s, Payant) ou 'LIVRAISON'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Nom complet du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_brand": {"name": "product_brand", "description": "Marque du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_family": {"name": "product_family", "description": "Famille de produits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_group": {"name": "product_group", "description": "Groupe de produits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "Type de produit (adapt\u00e9 aux r\u00e8gles m\u00e9tier)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "consumption_date": {"name": "consumption_date", "description": "Date de consommation (format DATE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "data_source": {"name": "data_source", "description": "Source des donn\u00e9es de consommation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 consomm\u00e9e (ajust\u00e9e selon les r\u00e8gles produit). Multiplicateurs appliqu\u00e9s pour les rames, bo\u00eetes, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "Timestamp de derni\u00e8re mise \u00e0 jour par dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_invocation_id": {"name": "dbt_invocation_id", "description": "ID unique de l'ex\u00e9cution dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "cluster_by": ["company_id", "consumption_date", "product_type", "data_source"], "description": "Table de faits des consommations clients pour la BR Neshu - agr\u00e9gation des donn\u00e9es t\u00e9l\u00e9m\u00e9trie, chargement et livraison - Application r\u00e8gles m\u00e9tiers"}, "created_at": 1760962911.777486, "relation_name": "`evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'consumption_date', 'product_type','data_source'],\n        description='Table de faits des consommations clients pour la BR Neshu - agr\u00e9gation des donn\u00e9es t\u00e9l\u00e9m\u00e9trie, chargement et livraison - Application r\u00e8gles m\u00e9tiers'\n    )\n}}\n\nWITH telemetry_data AS (\n  SELECT \n    -- IDs\n    t.company_id,\n    t.device_id,\n    t.location_id,\n    t.product_id,\n    \n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation\n    COALESCE(NULLIF(t.task_location_info, ''), d.device_location) AS location,\n\n    -- Machine\n    d.device_code AS device_serial_number,\n    d.device_name,\n    d.device_brand,\n    d.device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(t.task_start_date) AS consumption_date,\n    'TELEMETRIE' AS data_source,\n\n    -- Mesure\n    SUM(t.telemetry_quantity) AS quantity\n    \n  FROM {{ ref('int_oracle_neshu__telemetry_tasks') }} t\n  LEFT JOIN {{ ref('dim_oracle_neshu__device') }} d \n    ON t.device_id = d.device_id\n  LEFT JOIN {{ ref('dim_oracle_neshu__product') }} p \n    ON t.product_id = p.product_id\n  LEFT JOIN {{ ref('dim_oracle_neshu__company') }} c\n    ON t.company_id = c.company_id\n  GROUP BY \n    t.company_id, t.device_id, t.location_id, t.product_id,\n    c.company_code, c.company_name,\n    COALESCE(NULLIF(t.task_location_info, ''), d.device_location),\n    d.device_code, d.device_name, d.device_brand, d.device_economic_model,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type,\n    DATE(t.task_start_date)\n),\nchargement_data AS (\n  SELECT \n    -- IDs\n    l.company_id,\n    l.device_id,\n    l.location_id,\n    l.product_id,\n    \n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation\n    COALESCE(NULLIF(l.task_location_info, ''), d.device_location) AS location,\n\n    -- Machine\n    d.device_code AS device_serial_number,\n    d.device_name,\n    d.device_brand,\n    d.device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(l.task_start_date) AS consumption_date,\n    'CHARGEMENT' AS data_source,\n\n    -- Quantit\u00e9 (ajust\u00e9e selon le produit)\n    SUM(\n      CASE\n        WHEN p.product_name LIKE '%GOBELET%RAME 50%' THEN l.load_quantity * 50\n        WHEN p.product_name LIKE '%GOBELET%RAME DE 30%' THEN l.load_quantity * 30\n        WHEN p.product_name LIKE '%GOBELET%RAME 35%' THEN l.load_quantity * 35\n        WHEN p.product_name LIKE '%MELANG%BTE 200%' THEN l.load_quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 200%' THEN l.load_quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 100%' THEN l.load_quantity * 100\n        WHEN p.product_name LIKE '%BEGHIN SAY 300%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%CARTON DE 500%' THEN l.load_quantity * 500\n        WHEN p.product_name LIKE '%DISTRIBUTEUR 300 SUCRES%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%SUCRE BATONNET 100%' THEN l.load_quantity * 100\n        WHEN p.product_name LIKE '%SUCRE BTE 300%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%NESPRESSO MELANGEURS EN BAMBOU INDI%' THEN l.load_quantity * 100\n        ELSE l.load_quantity\n      END\n    ) AS quantity\n\n  FROM {{ ref('int_oracle_neshu__chargement_tasks') }} l\n  INNER JOIN {{ ref('dim_oracle_neshu__device') }} d \n    ON l.device_id = d.device_id\n  LEFT JOIN {{ ref('dim_oracle_neshu__product') }} p \n    ON l.product_id = p.product_id\n  LEFT JOIN {{ ref('dim_oracle_neshu__company') }} c\n    ON l.company_id = c.company_id\n  WHERE l.task_status_code in ('FAIT','VALIDE')\n  GROUP BY \n    l.company_id, l.device_id, l.location_id, l.product_id,\n    COALESCE(NULLIF(l.task_location_info, ''), d.device_location), c.company_code, c.company_name,\n    d.device_code, d.device_name, d.device_brand, d.device_economic_model,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type,\n    DATE(l.task_start_date)\n),\nlivraison_data AS (\n  SELECT\n    -- IDs\n    lt.company_id,\n    NULL AS device_id,\n    NULL AS location_id,\n    lt.product_id,\n\n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation (fixe)\n    'LIVRAISON' AS location,\n\n    -- Machine (fixe)\n    'LIVRAISON' AS device_serial_number,\n    'LIVRAISON' AS device_name,\n    'LIVRAISON' AS device_brand,\n    'LIVRAISON' AS device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(lt.task_start_date) AS consumption_date,\n    'LIVRAISON' AS data_source,\n\n    -- Quantit\u00e9 (ajust\u00e9e selon le produit)\n    SUM(\n      CASE\n        WHEN p.product_name LIKE '%GOBELET%RAME 50%' THEN lt.quantity * 50\n        WHEN p.product_name LIKE '%GOBELET%RAME DE 30%' THEN lt.quantity * 30\n        WHEN p.product_name LIKE '%GOBELET%RAME 35%' THEN lt.quantity * 35\n        WHEN p.product_name LIKE '%MELANG%BTE 200%' THEN lt.quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 200%' THEN lt.quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 100%' THEN lt.quantity * 100\n        WHEN p.product_name LIKE '%BEGHIN SAY 300%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%CARTON DE 500%' THEN lt.quantity * 500\n        WHEN p.product_name LIKE '%DISTRIBUTEUR 300 SUCRES%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%SUCRE BATONNET 100%' THEN lt.quantity * 100\n        WHEN p.product_name LIKE '%SUCRE BTE 300%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%NESPRESSO MELANGEURS EN BAMBOU INDI%' THEN lt.quantity * 100\n        ELSE lt.quantity\n      END\n    ) AS quantity\n\n  FROM {{ ref('int_oracle_neshu__livraison_tasks') }} lt\n  LEFT JOIN {{ ref('dim_oracle_neshu__product') }} p \n    ON lt.product_id = p.product_id\n  LEFT JOIN {{ ref('dim_oracle_neshu__company') }} c\n    ON lt.company_id = c.company_id\n  WHERE lt.task_status_code in ('FAIT','VALIDE')\n  AND p.product_type in ('THE','CAFE CAPS','CHOCOLATS VAN HOUTEN','BOISSONS GOURMANDES','ACCESSOIRES')\n  GROUP BY \n    lt.company_id, lt.product_id,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type, c.company_code, c.company_name,\n    DATE(lt.task_start_date)\n),\n-- Version optimis\u00e9e : remplace combined_data + donnees_filtrees\ncombined_and_filtered_data AS (\n\n  -- Cas particulier : machine AS00446 chez CN1046\n  SELECT *\n  FROM chargement_data\n  WHERE device_serial_number = 'AS00446'\n    AND company_code = 'CN1046'\n    AND consumption_date < '2025-08-28'\n    AND product_type IN ('THE','CAFE CAPS','CHOCOLATS VAN HOUTEN')\n\n  UNION ALL\n\n  SELECT *\n  FROM telemetry_data\n  WHERE device_serial_number = 'AS00446'\n    AND company_code = 'CN1046'\n    AND consumption_date >= '2025-08-28'\n\n  UNION ALL\n\n  -- TELEMETRIE avec filtres\n  SELECT *\n  FROM telemetry_data\n  WHERE product_type IN ('BOISSONS GOURMANDES', 'CAFE CAPS', 'CAFENOIR', 'INDEFINI', 'THE', 'SNACKING', 'BOISSONS FRAICHES', 'CHOCOLATS VAN HOUTEN')\n    AND NOT (\n      device_brand IN ('NESTLE','ANIMO')\n      AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n      AND product_type = 'THE'\n    )\n    AND NOT (company_code = 'CN1071' AND product_type = 'THE')\n    AND NOT (device_serial_number = 'AS00446' AND company_code = 'CN1046') \n\n\n  UNION ALL\n\n  -- CHARGEMENT avec tous les filtres consolid\u00e9s\n  SELECT *\n  FROM chargement_data\n  WHERE (\n    (device_brand = 'NESPRESSO'\n     AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n     AND product_type IN ('THE','CAFE CAPS')\n     AND (company_code <> 'CN1070' OR consumption_date >= '2025-03-01'))\n    OR (device_brand IN ('NESTLE','ANIMO')\n        AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n        AND product_type = 'THE')\n    OR (device_brand IN ('NESPRESSO','NESTLE','ANIMO')\n        AND product_type = 'CHOCOLATS VAN HOUTEN')\n    OR (product_type = 'ACCESSOIRES')\n    OR (company_code = 'CN1071' AND product_type = 'THE')\n    AND NOT (device_serial_number = 'AS00446' AND company_code = 'CN1046') \n  )\n\n  UNION ALL\n\n  -- LIVRAISON (tous les enregistrements)\n  SELECT *\n  FROM livraison_data\n)\n\n\nSELECT \n  -- Identifiants\n  company_id,\n  device_id,\n  location_id,\n  product_id,\n  \n  -- Company\n  company_code,\n  company_name,\n\n  -- Localisation\n  location,\n\n  -- Machine\n  device_serial_number,\n  device_name,\n  device_brand,\n  device_economic_model,\n\n  -- Produit\n  product_name,\n  product_brand,\n  product_family,\n  product_group,\n  product_type,\n\n  -- Contexte\n  consumption_date,\n  data_source,\n\n  -- Mesure\n  quantity,\n\n  -- M\u00e9tadonn\u00e9es d'ex\u00e9cution\n  CURRENT_TIMESTAMP() as dbt_updated_at,\n  '{{ invocation_id }}' as dbt_invocation_id\n\nFROM combined_and_filtered_data", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}, {"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "dim_oracle_neshu__product", "package": null, "version": null}, {"name": "dim_oracle_neshu__company", "package": null, "version": null}, {"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}, {"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "dim_oracle_neshu__product", "package": null, "version": null}, {"name": "dim_oracle_neshu__company", "package": null, "version": null}, {"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}, {"name": "dim_oracle_neshu__product", "package": null, "version": null}, {"name": "dim_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/fct_oracle_neshu__conso_business_review.sql", "compiled": true, "compiled_code": "\n\nWITH telemetry_data AS (\n  SELECT \n    -- IDs\n    t.company_id,\n    t.device_id,\n    t.location_id,\n    t.product_id,\n    \n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation\n    COALESCE(NULLIF(t.task_location_info, ''), d.device_location) AS location,\n\n    -- Machine\n    d.device_code AS device_serial_number,\n    d.device_name,\n    d.device_brand,\n    d.device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(t.task_start_date) AS consumption_date,\n    'TELEMETRIE' AS data_source,\n\n    -- Mesure\n    SUM(t.telemetry_quantity) AS quantity\n    \n  FROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks` t\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device` d \n    ON t.device_id = d.device_id\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product` p \n    ON t.product_id = p.product_id\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company` c\n    ON t.company_id = c.company_id\n  GROUP BY \n    t.company_id, t.device_id, t.location_id, t.product_id,\n    c.company_code, c.company_name,\n    COALESCE(NULLIF(t.task_location_info, ''), d.device_location),\n    d.device_code, d.device_name, d.device_brand, d.device_economic_model,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type,\n    DATE(t.task_start_date)\n),\nchargement_data AS (\n  SELECT \n    -- IDs\n    l.company_id,\n    l.device_id,\n    l.location_id,\n    l.product_id,\n    \n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation\n    COALESCE(NULLIF(l.task_location_info, ''), d.device_location) AS location,\n\n    -- Machine\n    d.device_code AS device_serial_number,\n    d.device_name,\n    d.device_brand,\n    d.device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(l.task_start_date) AS consumption_date,\n    'CHARGEMENT' AS data_source,\n\n    -- Quantit\u00e9 (ajust\u00e9e selon le produit)\n    SUM(\n      CASE\n        WHEN p.product_name LIKE '%GOBELET%RAME 50%' THEN l.load_quantity * 50\n        WHEN p.product_name LIKE '%GOBELET%RAME DE 30%' THEN l.load_quantity * 30\n        WHEN p.product_name LIKE '%GOBELET%RAME 35%' THEN l.load_quantity * 35\n        WHEN p.product_name LIKE '%MELANG%BTE 200%' THEN l.load_quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 200%' THEN l.load_quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 100%' THEN l.load_quantity * 100\n        WHEN p.product_name LIKE '%BEGHIN SAY 300%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%CARTON DE 500%' THEN l.load_quantity * 500\n        WHEN p.product_name LIKE '%DISTRIBUTEUR 300 SUCRES%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%SUCRE BATONNET 100%' THEN l.load_quantity * 100\n        WHEN p.product_name LIKE '%SUCRE BTE 300%' THEN l.load_quantity * 300\n        WHEN p.product_name LIKE '%NESPRESSO MELANGEURS EN BAMBOU INDI%' THEN l.load_quantity * 100\n        ELSE l.load_quantity\n      END\n    ) AS quantity\n\n  FROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks` l\n  INNER JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device` d \n    ON l.device_id = d.device_id\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product` p \n    ON l.product_id = p.product_id\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company` c\n    ON l.company_id = c.company_id\n  WHERE l.task_status_code in ('FAIT','VALIDE')\n  GROUP BY \n    l.company_id, l.device_id, l.location_id, l.product_id,\n    COALESCE(NULLIF(l.task_location_info, ''), d.device_location), c.company_code, c.company_name,\n    d.device_code, d.device_name, d.device_brand, d.device_economic_model,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type,\n    DATE(l.task_start_date)\n),\nlivraison_data AS (\n  SELECT\n    -- IDs\n    lt.company_id,\n    NULL AS device_id,\n    NULL AS location_id,\n    lt.product_id,\n\n    -- Company\n    c.company_code,\n    c.company_name,\n\n    -- Localisation (fixe)\n    'LIVRAISON' AS location,\n\n    -- Machine (fixe)\n    'LIVRAISON' AS device_serial_number,\n    'LIVRAISON' AS device_name,\n    'LIVRAISON' AS device_brand,\n    'LIVRAISON' AS device_economic_model,\n\n    -- Produit\n    p.product_name,\n    p.product_brand,\n    p.product_family,\n    p.product_group,\n    p.product_type,\n\n    -- Contexte\n    DATE(lt.task_start_date) AS consumption_date,\n    'LIVRAISON' AS data_source,\n\n    -- Quantit\u00e9 (ajust\u00e9e selon le produit)\n    SUM(\n      CASE\n        WHEN p.product_name LIKE '%GOBELET%RAME 50%' THEN lt.quantity * 50\n        WHEN p.product_name LIKE '%GOBELET%RAME DE 30%' THEN lt.quantity * 30\n        WHEN p.product_name LIKE '%GOBELET%RAME 35%' THEN lt.quantity * 35\n        WHEN p.product_name LIKE '%MELANG%BTE 200%' THEN lt.quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 200%' THEN lt.quantity * 200\n        WHEN p.product_name LIKE '%MELANGEUR%BTE 100%' THEN lt.quantity * 100\n        WHEN p.product_name LIKE '%BEGHIN SAY 300%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%CARTON DE 500%' THEN lt.quantity * 500\n        WHEN p.product_name LIKE '%DISTRIBUTEUR 300 SUCRES%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%SUCRE BATONNET 100%' THEN lt.quantity * 100\n        WHEN p.product_name LIKE '%SUCRE BTE 300%' THEN lt.quantity * 300\n        WHEN p.product_name LIKE '%NESPRESSO MELANGEURS EN BAMBOU INDI%' THEN lt.quantity * 100\n        ELSE lt.quantity\n      END\n    ) AS quantity\n\n  FROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks` lt\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product` p \n    ON lt.product_id = p.product_id\n  LEFT JOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company` c\n    ON lt.company_id = c.company_id\n  WHERE lt.task_status_code in ('FAIT','VALIDE')\n  AND p.product_type in ('THE','CAFE CAPS','CHOCOLATS VAN HOUTEN','BOISSONS GOURMANDES','ACCESSOIRES')\n  GROUP BY \n    lt.company_id, lt.product_id,\n    p.product_name, p.product_brand, p.product_family, p.product_group, p.product_type, c.company_code, c.company_name,\n    DATE(lt.task_start_date)\n),\n-- Version optimis\u00e9e : remplace combined_data + donnees_filtrees\ncombined_and_filtered_data AS (\n\n  -- Cas particulier : machine AS00446 chez CN1046\n  SELECT *\n  FROM chargement_data\n  WHERE device_serial_number = 'AS00446'\n    AND company_code = 'CN1046'\n    AND consumption_date < '2025-08-28'\n    AND product_type IN ('THE','CAFE CAPS','CHOCOLATS VAN HOUTEN')\n\n  UNION ALL\n\n  SELECT *\n  FROM telemetry_data\n  WHERE device_serial_number = 'AS00446'\n    AND company_code = 'CN1046'\n    AND consumption_date >= '2025-08-28'\n\n  UNION ALL\n\n  -- TELEMETRIE avec filtres\n  SELECT *\n  FROM telemetry_data\n  WHERE product_type IN ('BOISSONS GOURMANDES', 'CAFE CAPS', 'CAFENOIR', 'INDEFINI', 'THE', 'SNACKING', 'BOISSONS FRAICHES', 'CHOCOLATS VAN HOUTEN')\n    AND NOT (\n      device_brand IN ('NESTLE','ANIMO')\n      AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n      AND product_type = 'THE'\n    )\n    AND NOT (company_code = 'CN1071' AND product_type = 'THE')\n    AND NOT (device_serial_number = 'AS00446' AND company_code = 'CN1046') \n\n\n  UNION ALL\n\n  -- CHARGEMENT avec tous les filtres consolid\u00e9s\n  SELECT *\n  FROM chargement_data\n  WHERE (\n    (device_brand = 'NESPRESSO'\n     AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n     AND product_type IN ('THE','CAFE CAPS')\n     AND (company_code <> 'CN1070' OR consumption_date >= '2025-03-01'))\n    OR (device_brand IN ('NESTLE','ANIMO')\n        AND (device_economic_model NOT IN ('Participatif valeurs','Participatif unit\u00e9s','Payant') OR device_economic_model IS NULL)\n        AND product_type = 'THE')\n    OR (device_brand IN ('NESPRESSO','NESTLE','ANIMO')\n        AND product_type = 'CHOCOLATS VAN HOUTEN')\n    OR (product_type = 'ACCESSOIRES')\n    OR (company_code = 'CN1071' AND product_type = 'THE')\n    AND NOT (device_serial_number = 'AS00446' AND company_code = 'CN1046') \n  )\n\n  UNION ALL\n\n  -- LIVRAISON (tous les enregistrements)\n  SELECT *\n  FROM livraison_data\n)\n\n\nSELECT \n  -- Identifiants\n  company_id,\n  device_id,\n  location_id,\n  product_id,\n  \n  -- Company\n  company_code,\n  company_name,\n\n  -- Localisation\n  location,\n\n  -- Machine\n  device_serial_number,\n  device_name,\n  device_brand,\n  device_economic_model,\n\n  -- Produit\n  product_name,\n  product_brand,\n  product_family,\n  product_group,\n  product_type,\n\n  -- Contexte\n  consumption_date,\n  data_source,\n\n  -- Mesure\n  quantity,\n\n  -- M\u00e9tadonn\u00e9es d'ex\u00e9cution\n  CURRENT_TIMESTAMP() as dbt_updated_at,\n  'd3de9015-62df-4f1d-842a-4581ffa711ee' as dbt_invocation_id\n\nFROM combined_and_filtered_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["company_id", "consumption_date", "data_source", "product_id"], "time_spine": null}, "model.dbt_warehouse.fct_oracle_neshu__pa_business_review": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "fct_oracle_neshu__pa_business_review", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/fct_oracle_neshu__pa_business_review.sql", "original_file_path": "models/marts/oracle_neshu/fct_oracle_neshu__pa_business_review.sql", "unique_id": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "fct_oracle_neshu__pa_business_review"], "alias": "fct_oracle_neshu__pa_business_review", "checksum": {"name": "sha256", "checksum": "5ce4c57c50d84abb58490db840a2b7d53b6169c0c7afb90f728aac18c6e05abd"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Table de faits des passages appro (Business Review Neshu) - permet de tracer le passage des roadmen chez les clients \u00e0 partir de 2025"}, "tags": ["marts"], "description": "Table de faits des passages appro (Business Review Neshu). Permet de tracer le passage des roadmen chez les clients \u00e0 partir de 2025, avec enrichissement des informations clients et machines.\n", "columns": {"task_id": {"name": "task_id", "description": "Identifiant unique de la t\u00e2che de passage appro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client (ex: CN1234)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_info": {"name": "company_info", "description": "Concat\u00e9nation du nom de la soci\u00e9t\u00e9 et du code client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_id": {"name": "device_id", "description": "Identifiant unique de la machine associ\u00e9e au passage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_info": {"name": "device_info", "description": "Concat\u00e9nation de la marque et du code machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Horodatage de d\u00e9but de t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date_day": {"name": "task_start_date_day", "description": "Date (jour) de d\u00e9but de t\u00e2che, utilis\u00e9e pour les filtres/partitionnement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_end_date": {"name": "task_end_date", "description": "Horodatage de fin de t\u00e2che (NULL si non termin\u00e9e)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Statut de la t\u00e2che (PREVU, FAIT, ENCOURS, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mission_faite": {"name": "mission_faite", "description": "Indicateur binaire : 1 si la mission est faite, sinon 0", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mission_prevue": {"name": "mission_prevue", "description": "Indicateur binaire : 1 si la mission est pr\u00e9vue ou faite ou en cours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Table de faits des passages appro (Business Review Neshu) - permet de tracer le passage des roadmen chez les clients \u00e0 partir de 2025"}, "created_at": 1760962911.7819345, "relation_name": "`evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`", "raw_code": "{{ config(\n    materialized='view',\n    description='Table de faits des passages appro (Business Review Neshu) - permet de tracer le passage des roadmen chez les clients \u00e0 partir de 2025'\n) }}\n\nSELECT\n    -- Identifiants\n    pa.task_id,\n    pa.company_id,\n    pa.device_id,\n    pa.company_code,\n\n    -- Company\n    c.company_name,\n    CONCAT(c.company_name, ' - ', pa.company_code) AS company_info,\n\n    -- Device\n    d.device_brand,\n    d.device_code,\n    CONCAT(d.device_brand, ' - ', d.device_code) AS device_info,\n\n    -- Contexte temporel\n    pa.task_start_date,\n    DATE(pa.task_start_date) AS task_start_date_day,\n    pa.task_end_date,\n\n    -- Statut\n    pa.task_status_code,\n    CASE WHEN pa.task_status_code = 'FAIT' THEN 1 ELSE 0 END AS mission_faite,\n    CASE WHEN pa.task_status_code IN ('PREVU', 'FAIT', 'ENCOURS') THEN 1 ELSE 0 END AS mission_prevue,\n\n    -- M\u00e9tadonn\u00e9es dbt\n    CURRENT_TIMESTAMP() as dbt_updated_at,\n    '{{ invocation_id }}' as dbt_invocation_id\n\nFROM {{ ref('int_oracle_neshu__appro_tasks') }} pa\nJOIN {{ ref('dim_oracle_neshu__device') }} d \n    ON pa.device_id = d.device_id\nJOIN {{ ref('dim_oracle_neshu__company') }} c \n    ON pa.company_id = c.company_id\nWHERE DATE(pa.task_start_date) >= '2025-01-01'\n    AND pa.task_status_code != 'ANNULE'", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}, {"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "dim_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.dim_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/fct_oracle_neshu__pa_business_review.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    -- Identifiants\n    pa.task_id,\n    pa.company_id,\n    pa.device_id,\n    pa.company_code,\n\n    -- Company\n    c.company_name,\n    CONCAT(c.company_name, ' - ', pa.company_code) AS company_info,\n\n    -- Device\n    d.device_brand,\n    d.device_code,\n    CONCAT(d.device_brand, ' - ', d.device_code) AS device_info,\n\n    -- Contexte temporel\n    pa.task_start_date,\n    DATE(pa.task_start_date) AS task_start_date_day,\n    pa.task_end_date,\n\n    -- Statut\n    pa.task_status_code,\n    CASE WHEN pa.task_status_code = 'FAIT' THEN 1 ELSE 0 END AS mission_faite,\n    CASE WHEN pa.task_status_code IN ('PREVU', 'FAIT', 'ENCOURS') THEN 1 ELSE 0 END AS mission_prevue,\n\n    -- M\u00e9tadonn\u00e9es dbt\n    CURRENT_TIMESTAMP() as dbt_updated_at,\n    'd3de9015-62df-4f1d-842a-4581ffa711ee' as dbt_invocation_id\n\nFROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks` pa\nJOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device` d \n    ON pa.device_id = d.device_id\nJOIN `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company` c \n    ON pa.company_id = c.company_id\nWHERE DATE(pa.task_start_date) >= '2025-01-01'\n    AND pa.task_status_code != 'ANNULE'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_id"], "time_spine": null}, "model.dbt_warehouse.dim_oracle_neshu__contract": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_oracle_neshu__contract", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/dim_oracle_neshu__contract.sql", "original_file_path": "models/marts/oracle_neshu/dim_oracle_neshu__contract.sql", "unique_id": "model.dbt_warehouse.dim_oracle_neshu__contract", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dim_oracle_neshu__contract"], "alias": "dim_oracle_neshu__contract", "checksum": {"name": "sha256", "checksum": "0d219a2f761d5d657945a63f304a4889fdccf9f2a0055d6f8e47b8e58d7ed45b"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["contract_id"], "description": "Dimension contrat : pivot des labels et s\u00e9lection du contrat actif principal par client."}, "tags": ["marts"], "description": "Dimension contrat : pivot des labels et s\u00e9lection du contrat actif principal par client.\nCette table contient un seul contrat actif par client (company_id), s\u00e9lectionn\u00e9 selon\nla date de fin de contrat la plus r\u00e9cente, puis la date de d\u00e9but la plus r\u00e9cente.\n", "columns": {"contract_id": {"name": "contract_id", "description": "Identifiant unique du contrat", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "Identifiant de l'entreprise cliente associ\u00e9e au contrat", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_code": {"name": "contract_code", "description": "Code du contrat", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement_raw": {"name": "engagement_raw", "description": "Engagement brut du contrat (valeur non nettoy\u00e9e)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement_clean": {"name": "engagement_clean", "description": "Engagement nettoy\u00e9 du contrat", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "nombre_collab": {"name": "nombre_collab", "description": "Nombre de collaborateurs associ\u00e9s au contrat", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "Indique si le contrat est actif (transform\u00e9 depuis le label ISACTIVE)", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_start_date": {"name": "original_start_date", "description": "Date de d\u00e9but originale du contrat", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_end_date": {"name": "original_end_date", "description": "Date de fin originale du contrat", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "current_end_date": {"name": "current_end_date", "description": "Date de fin courante du contrat", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "termination_date": {"name": "termination_date", "description": "Date de r\u00e9siliation du contrat", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation de l'enregistrement", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de l'enregistrement", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "cluster_by": ["contract_id"], "description": "Dimension contrat : pivot des labels et s\u00e9lection du contrat actif principal par client."}, "created_at": 1760962911.7902405, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`", "raw_code": "{{\n  config(\n    materialized='table',\n    cluster_by=['contract_id'],\n    description='Dimension contrat : pivot des labels et s\u00e9lection du contrat actif principal par client.'\n  )\n}}\n\nWITH contract_labels AS (\n  SELECT \n    c.idcontract as contract_id,\n    c.idcompany_peer as company_id,\n    c.code AS contract_code,\n    c.engagement_raw,\n    c.engagement_clean,\n    c.nombre_collab,\n    l.code AS label_code,\n    lf.code AS label_family_code,\n    c.original_start_date,\n    c.original_end_date,\n    c.current_end_date,\n    c.termination_date,\n    c.created_at,\n    c.updated_at\n  FROM {{ ref('stg_oracle_neshu__contract') }} c\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_has_contract') }} lhc \n    ON lhc.idcontract = c.idcontract AND lhc.idlabel IS NOT NULL\n  LEFT JOIN {{ ref('stg_oracle_neshu__label') }} l \n    ON l.idlabel = lhc.idlabel\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_family') }} lf \n    ON lf.idlabel_family = l.idlabel_family\n),\n\naggregated_labels AS ( \n  SELECT\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at,\n\n    -- pivot des familles de labels\n    MAX(CASE WHEN label_family_code = 'TRANCHE_COLLAB' THEN label_code END) AS employee_range,\n    MAX(CASE WHEN label_family_code = 'PROADMAN' THEN label_code END) AS proadman,\n    MAX(CASE WHEN label_family_code = 'REGION' THEN label_code END) AS region,\n    MAX(CASE WHEN label_family_code = 'TELETRAVAIL' THEN label_code END) AS teletravail,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active\n\n  FROM contract_labels\n  GROUP BY\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at\n),\n\naggreated_contract as (\n  SELECT\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    CASE\n      WHEN LOWER(is_active) = 'yes' THEN TRUE\n      ELSE FALSE\n    END AS is_active,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at\n  FROM aggregated_labels\n)\n\nSELECT\n  contract_id,\n  company_id,\n  contract_code,\n  engagement_raw,\n  engagement_clean,\n  nombre_collab,\n  is_active,\n  original_start_date,\n  original_end_date,\n  current_end_date,\n  termination_date,\n  created_at,\n  updated_at\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (\n               PARTITION BY company_id\n               ORDER BY current_end_date DESC, original_start_date DESC, contract_id\n           ) as rn\n    FROM aggreated_contract\n    WHERE is_active = TRUE\n) subq\nWHERE rn = 1", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contract", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_contract", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contract", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/dim_oracle_neshu__contract.sql", "compiled": true, "compiled_code": "\n\nWITH contract_labels AS (\n  SELECT \n    c.idcontract as contract_id,\n    c.idcompany_peer as company_id,\n    c.code AS contract_code,\n    c.engagement_raw,\n    c.engagement_clean,\n    c.nombre_collab,\n    l.code AS label_code,\n    lf.code AS label_family_code,\n    c.original_start_date,\n    c.original_end_date,\n    c.current_end_date,\n    c.termination_date,\n    c.created_at,\n    c.updated_at\n  FROM `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract` c\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract` lhc \n    ON lhc.idcontract = c.idcontract AND lhc.idlabel IS NOT NULL\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` l \n    ON l.idlabel = lhc.idlabel\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf \n    ON lf.idlabel_family = l.idlabel_family\n),\n\naggregated_labels AS ( \n  SELECT\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at,\n\n    -- pivot des familles de labels\n    MAX(CASE WHEN label_family_code = 'TRANCHE_COLLAB' THEN label_code END) AS employee_range,\n    MAX(CASE WHEN label_family_code = 'PROADMAN' THEN label_code END) AS proadman,\n    MAX(CASE WHEN label_family_code = 'REGION' THEN label_code END) AS region,\n    MAX(CASE WHEN label_family_code = 'TELETRAVAIL' THEN label_code END) AS teletravail,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active\n\n  FROM contract_labels\n  GROUP BY\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at\n),\n\naggreated_contract as (\n  SELECT\n    contract_id,\n    company_id,\n    contract_code,\n    engagement_raw,\n    engagement_clean,\n    nombre_collab,\n    CASE\n      WHEN LOWER(is_active) = 'yes' THEN TRUE\n      ELSE FALSE\n    END AS is_active,\n    original_start_date,\n    original_end_date,\n    current_end_date,\n    termination_date,\n    created_at,\n    updated_at\n  FROM aggregated_labels\n)\n\nSELECT\n  contract_id,\n  company_id,\n  contract_code,\n  engagement_raw,\n  engagement_clean,\n  nombre_collab,\n  is_active,\n  original_start_date,\n  original_end_date,\n  current_end_date,\n  termination_date,\n  created_at,\n  updated_at\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (\n               PARTITION BY company_id\n               ORDER BY current_end_date DESC, original_start_date DESC, contract_id\n           ) as rn\n    FROM aggreated_contract\n    WHERE is_active = TRUE\n) subq\nWHERE rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["contract_id"], "time_spine": null}, "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "fct_oracle_neshu__machines_maintenance_tracking", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/fct_oracle_neshu__machines_maintenance_tracking.sql", "original_file_path": "models/marts/oracle_neshu/fct_oracle_neshu__machines_maintenance_tracking.sql", "unique_id": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "fct_oracle_neshu__machines_maintenance_tracking"], "alias": "fct_oracle_neshu__machines_maintenance_tracking", "checksum": {"name": "sha256", "checksum": "1c4daed1144957845adf559d94b0bf6c5976f265e9a54c1fa5b86ed70f4ddc8f"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Table de faits du suivi des maintenances pr\u00e9ventives des machines NESHU (Oracle + Yuman)."}, "tags": ["marts"], "description": "Table de faits pour le suivi des maintenances pr\u00e9ventives des machines NESHU.\n\nCette table croise les donn\u00e9es Oracle (DLOG) et Yuman pour :\n- Identifier les machines en retard de maintenance pr\u00e9ventive\n- Calculer le d\u00e9lai de retard ou d'avance par rapport \u00e0 l'\u00e9ch\u00e9ance annuelle\n- Suivre le statut des demandes d'intervention ouvertes ou planifi\u00e9es\n\n**R\u00e8gles m\u00e9tier de calcul du retard :**\n- Machine < 13 mois (395 jours) : pas de retard (p\u00e9riode de gr\u00e2ce)\n- Machine sans pr\u00e9ventive : en retard si > 365 jours apr\u00e8s installation\n- Machine avec pr\u00e9ventives : en retard si derni\u00e8re pr\u00e9ventive > 365 jours\n\n**Sources de donn\u00e9es :**\n- Oracle NESHU (DLOG) : machines et interventions techniques (preventive dlog)\n- Yuman : mat\u00e9riels, clients, sites et workorders\n", "columns": {"device_id": {"name": "device_id", "description": "Identifiant unique du device dans DLOG NESHU", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_code": {"name": "device_code", "description": "Num\u00e9ro de s\u00e9rie du device de la source DLOG NESHU", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_name": {"name": "device_name", "description": "Nom du device de la source DLOG NESHU", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code de l'entreprise/site client dans Oracle (format NESH_CNxxxx)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Nom de l'entreprise/site client dans Oracle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_last_installation_date": {"name": "device_last_installation_date", "description": "Date de derni\u00e8re installation du device (source Oracle)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "Identifiant unique du mat\u00e9riel dans Yuman (peut \u00eatre NULL si machine non r\u00e9f\u00e9renc\u00e9e dans Yuman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie du mat\u00e9riel Yuman (correspond au device_code Oracle avec pr\u00e9fixe NESH_). Cl\u00e9 de liaison entre Oracle et Yuman. Peut \u00eatre NULL si machine uniquement dans Oracle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_name": {"name": "material_name", "description": "Nom du type de machine ('MOMENTO 100', 'GEMINI 200', 'OPTIBEAN X 12' etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code client (source Yuman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client (source Yuman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie du client dans Yuman (OR / ARGENT / BRONZE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal du site d'installation (source Yuman)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "retard_bol": {"name": "retard_bol", "description": "Indicateur bool\u00e9en de retard de maintenance pr\u00e9ventive.\n- TRUE : machine en retard (n\u00e9cessite une intervention)\n- FALSE : machine \u00e0 jour ou dans la p\u00e9riode de gr\u00e2ce\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "retard_delai": {"name": "retard_delai", "description": "D\u00e9lai en jours par rapport \u00e0 l'\u00e9ch\u00e9ance de maintenance pr\u00e9ventive.\n- Valeur positive : nombre de jours restants avant l'\u00e9ch\u00e9ance\n- Valeur n\u00e9gative : nombre de jours de retard\n- Ex: +30 = 30 jours d'avance, -45 = 45 jours de retard\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_last_preventive": {"name": "source_last_preventive", "description": "Source de la derni\u00e8re intervention pr\u00e9ventive r\u00e9f\u00e9renc\u00e9e.\n- 'yuman' : derni\u00e8re pr\u00e9ventive enregistr\u00e9e dans Yuman\n- 'dlog' : derni\u00e8re pr\u00e9ventive enregistr\u00e9e dans Oracle/DLOG\n- 'aucune' : aucune pr\u00e9ventive trouv\u00e9e ou machine r\u00e9cente (< 13 mois)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status_inter": {"name": "status_inter", "description": "Statut de la demande d'intervention pr\u00e9ventive en cours.\n- 'Ouvert' : demande ouverte mais non planifi\u00e9e\n- 'Planifie' : intervention planifi\u00e9e avec une date\n- 'Aucune' : aucune demande en cours\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_planned": {"name": "date_planned", "description": "Date planifi\u00e9e de l'intervention pr\u00e9ventive (si status_inter = 'Planifie')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_created_at": {"name": "material_created_at", "description": "Date de cr\u00e9ation de l'enregistrement mat\u00e9riel dans Yuman (utilis\u00e9e pour la d\u00e9duplication)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "description": "Table de faits du suivi des maintenances pr\u00e9ventives des machines NESHU (Oracle + Yuman)."}, "created_at": 1760962911.7941475, "relation_name": "`evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`", "raw_code": "-- fct_oracle_neshu__machines_maintenance_tracking.sql\n{{ config(\n    materialized = \"table\",\n    description = \"Table de faits du suivi des maintenances pr\u00e9ventives des machines NESHU (Oracle + Yuman).\"\n) }}\n\nWITH machines_base AS (\n    SELECT * FROM {{ ref('int_oracle_neshu__machines_yuman_maintenance_base') }}\n),\n\n-- INTERVENTIONS YUMAN (toutes, pas de filtre ici)\nall_workorders AS (\n    SELECT \n        wd.demand_id, \n        wd.workorder_id,\n        wd.material_id, \n        wd.demand_status,\n        wdc.demand_category_name, \n        wo.date_planned,\n        wo.date_done, \n        wo.workorder_type, \n        wo.workorder_status\n    FROM {{ ref('stg_yuman__workorder_demands') }} wd\n    LEFT JOIN {{ ref('stg_yuman__workorder_demands_categories') }} wdc\n        ON wd.demand_category_id = wdc.demand_category_id\n    LEFT JOIN {{ ref('stg_yuman__workorders') }} wo\n        ON wd.workorder_id = wo.workorder_id\n),\n\n-- ENRICHISSEMENT : Ajouter les interventions AUX machines (LEFT JOIN)\nworkorder_enrichi AS (\n    SELECT \n        mb.*,\n        wo.demand_id,\n        wo.workorder_id,\n        wo.demand_status,\n        wo.demand_category_name,\n        wo.date_planned,\n        wo.date_done,\n        wo.workorder_type,\n        wo.workorder_status\n    FROM machines_base mb\n    LEFT JOIN all_workorders wo\n        ON mb.material_id = wo.material_id\n),\n\n-- LISTE INTERVENTION PREV DLOG\nintervention_prev_dlog AS (\n    SELECT \n        CONCAT('NESH_', device_code) AS device_code, \n        MAX(task_end_date) AS last_preventive_date\n    FROM {{ ref('int_oracle_neshu__inter_techinique_tasks') }}\n    WHERE dc04 = 'DC0402'\n        AND task_status_code = 'FAIT'\n    GROUP BY device_code\n),\n\n-- AJOUT PREV DLOG DANS LA LISTE DES INTERVENTION YUMAN\nmaterial_enrichi AS (\n    SELECT \n        we.*, \n        ipd.last_preventive_date \n    FROM workorder_enrichi we\n    LEFT JOIN intervention_prev_dlog ipd\n        ON we.material_serial_number = ipd.device_code\n),\n\n-- CALCUL DU RETARD PAR MACHINE\ncalcul_retard AS (\n    SELECT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        demand_status,\n        date_planned,\n        material_created_at,\n        \n        -- D\u00e9terminer la derni\u00e8re pr\u00e9ventive de la source 1 (Yuman)\n        MAX(CASE \n            WHEN (workorder_type = 'Preventive' OR demand_category_name = 'PREVENTIVE PROG - NESHU') \n                AND workorder_status = 'Closed' \n            THEN date_done \n            ELSE NULL \n        END) OVER (PARTITION BY material_id) AS derniere_preventive_source1,\n        \n        -- R\u00e9cup\u00e9rer la pr\u00e9ventive externe (source 2 - DLOG)\n        MAX(last_preventive_date) OVER (PARTITION BY material_id) AS derniere_preventive_source2,\n        \n        -- Date du jour\n        CURRENT_TIMESTAMP() AS today\n        \n    FROM material_enrichi\n),\n\n-- LOGIQUE PRINCIPALE DE CALCUL\nretard_final AS (\n    SELECT DISTINCT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        demand_status,\n        date_planned,\n        material_created_at,\n        \n        -- CAS 1: Machine install\u00e9e depuis moins de 13 mois\n        CASE\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                FALSE\n            \n            -- CAS 2: Machine ancienne sans aucune pr\u00e9ventive\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                TRUE\n            \n            -- CAS 3: Machine avec pr\u00e9ventives - v\u00e9rifier si retard > 365 jours\n            ELSE\n                CASE\n                    WHEN GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ) < TIMESTAMP_SUB(today, INTERVAL 365 DAY)\n                    THEN TRUE\n                    ELSE FALSE\n                END\n        END AS retard_bol,\n        \n        -- CALCUL DU D\u00c9LAI\n        CASE\n            -- CAS 1: Machine r\u00e9cente (< 13 mois)\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                TIMESTAMP_DIFF(TIMESTAMP_ADD(last_installation_date, INTERVAL 395 DAY), today, DAY)\n            \n            -- CAS 2: Aucune pr\u00e9ventive\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                -TIMESTAMP_DIFF(today, TIMESTAMP_ADD(last_installation_date, INTERVAL 365 DAY), DAY)\n            \n            -- CAS 3: Avec pr\u00e9ventives\n            ELSE\n                CASE\n                    WHEN TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY) > 365\n                    THEN -(TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY) - 365)\n                    ELSE 365 - TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY)\n                END\n        END AS retard_delai,\n        \n        -- SOURCE DE LA DERNI\u00c8RE PR\u00c9VENTIVE\n        CASE\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                'aucune'\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                'aucune'\n            WHEN derniere_preventive_source2 IS NULL OR \n                (derniere_preventive_source1 IS NOT NULL AND derniere_preventive_source1 > derniere_preventive_source2) THEN\n                'yuman'\n            ELSE\n                'dlog'\n        END AS source_last_preventive,\n        \n        today\n        \n    FROM calcul_retard\n),\n\n-- D\u00c9DUPLICATION: Garder une seule ligne par machine\ndeduplique AS (\n    SELECT\n        * EXCEPT(today),\n        ROW_NUMBER() OVER (\n            PARTITION BY material_serial_number \n            ORDER BY \n                retard_bol ASC,                -- Les machines non en retard d'abord (FALSE avant TRUE)\n                material_created_at DESC,      -- Si les 2 non en retard : la plus r\u00e9cente\n                retard_delai ASC               -- Si les 2 en retard : le plus grand d\u00e9lai (n\u00e9gatif donc ASC)\n        ) AS rn\n    FROM retard_final\n),\n\n-- R\u00c9SULTAT RETARD DEDUPLIQU\u00c9\nresultat_retard AS (\n    SELECT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        retard_bol,\n        retard_delai,\n        source_last_preventive,\n        material_created_at\n    FROM deduplique\n    WHERE rn = 1\n),\n\n-- DEMANDES D'INTERVENTION YUMAN OUVERTES & PLANIFI\u00c9ES\ndi_data AS (\n    SELECT \n        wd.material_id,\n        wo.date_planned,\n        CASE\n            WHEN wd.demand_status = 'Open' THEN 'Ouvert'\n            WHEN wo.workorder_status = 'Scheduled' THEN 'Planifie'\n            ELSE 'Aucune'\n        END AS status_inter\n    FROM {{ ref('stg_yuman__workorder_demands') }} wd\n    LEFT JOIN {{ ref('stg_yuman__workorder_demands_categories') }} wdc\n        ON wd.demand_category_id = wdc.demand_category_id\n    LEFT JOIN {{ ref('stg_yuman__workorders') }} wo\n        ON wd.workorder_id = wo.workorder_id\n    WHERE wdc.demand_category_name = 'PREVENTIVE PROG - NESHU' \n        AND (wd.demand_status = 'Open' OR wo.workorder_status = 'Scheduled')\n),\n\n-- ENRICHISSEMENT FINAL AVEC STATUT DES INTERVENTIONS\nfinal AS (\n    SELECT\n        rr.device_id,\n        rr.device_code,\n        rr.device_name,\n        rr.company_code,\n        rr.company_name,\n        rr.last_installation_date AS device_last_installation_date,\n        rr.material_id,\n        rr.material_serial_number,\n        rr.client_code,\n        rr.client_name,\n        rr.client_category,\n        rr.site_postal_code,\n        rr.retard_bol,\n        rr.retard_delai,\n        rr.source_last_preventive,\n        COALESCE(di.status_inter, 'Aucune') AS status_inter,\n        di.date_planned,\n        rr.material_created_at,\n\n        -- M\u00e9tadonn\u00e9es dbt\n        CURRENT_TIMESTAMP() as dbt_updated_at,\n        '{{ invocation_id }}' as dbt_invocation_id\n\n    FROM resultat_retard rr\n    LEFT JOIN di_data di\n        ON rr.material_id = di.material_id\n)\n\nSELECT * FROM final", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__machines_yuman_maintenance_base", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}, {"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.stg_yuman__workorder_demands", "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "model.dbt_warehouse.stg_yuman__workorders", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/fct_oracle_neshu__machines_maintenance_tracking.sql", "compiled": true, "compiled_code": "-- fct_oracle_neshu__machines_maintenance_tracking.sql\n\n\nWITH machines_base AS (\n    SELECT * FROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__machines_yuman_maintenance_base`\n),\n\n-- INTERVENTIONS YUMAN (toutes, pas de filtre ici)\nall_workorders AS (\n    SELECT \n        wd.demand_id, \n        wd.workorder_id,\n        wd.material_id, \n        wd.demand_status,\n        wdc.demand_category_name, \n        wo.date_planned,\n        wo.date_done, \n        wo.workorder_type, \n        wo.workorder_status\n    FROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands` wd\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories` wdc\n        ON wd.demand_category_id = wdc.demand_category_id\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders` wo\n        ON wd.workorder_id = wo.workorder_id\n),\n\n-- ENRICHISSEMENT : Ajouter les interventions AUX machines (LEFT JOIN)\nworkorder_enrichi AS (\n    SELECT \n        mb.*,\n        wo.demand_id,\n        wo.workorder_id,\n        wo.demand_status,\n        wo.demand_category_name,\n        wo.date_planned,\n        wo.date_done,\n        wo.workorder_type,\n        wo.workorder_status\n    FROM machines_base mb\n    LEFT JOIN all_workorders wo\n        ON mb.material_id = wo.material_id\n),\n\n-- LISTE INTERVENTION PREV DLOG\nintervention_prev_dlog AS (\n    SELECT \n        CONCAT('NESH_', device_code) AS device_code, \n        MAX(task_end_date) AS last_preventive_date\n    FROM `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\n    WHERE dc04 = 'DC0402'\n        AND task_status_code = 'FAIT'\n    GROUP BY device_code\n),\n\n-- AJOUT PREV DLOG DANS LA LISTE DES INTERVENTION YUMAN\nmaterial_enrichi AS (\n    SELECT \n        we.*, \n        ipd.last_preventive_date \n    FROM workorder_enrichi we\n    LEFT JOIN intervention_prev_dlog ipd\n        ON we.material_serial_number = ipd.device_code\n),\n\n-- CALCUL DU RETARD PAR MACHINE\ncalcul_retard AS (\n    SELECT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        demand_status,\n        date_planned,\n        material_created_at,\n        \n        -- D\u00e9terminer la derni\u00e8re pr\u00e9ventive de la source 1 (Yuman)\n        MAX(CASE \n            WHEN (workorder_type = 'Preventive' OR demand_category_name = 'PREVENTIVE PROG - NESHU') \n                AND workorder_status = 'Closed' \n            THEN date_done \n            ELSE NULL \n        END) OVER (PARTITION BY material_id) AS derniere_preventive_source1,\n        \n        -- R\u00e9cup\u00e9rer la pr\u00e9ventive externe (source 2 - DLOG)\n        MAX(last_preventive_date) OVER (PARTITION BY material_id) AS derniere_preventive_source2,\n        \n        -- Date du jour\n        CURRENT_TIMESTAMP() AS today\n        \n    FROM material_enrichi\n),\n\n-- LOGIQUE PRINCIPALE DE CALCUL\nretard_final AS (\n    SELECT DISTINCT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        demand_status,\n        date_planned,\n        material_created_at,\n        \n        -- CAS 1: Machine install\u00e9e depuis moins de 13 mois\n        CASE\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                FALSE\n            \n            -- CAS 2: Machine ancienne sans aucune pr\u00e9ventive\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                TRUE\n            \n            -- CAS 3: Machine avec pr\u00e9ventives - v\u00e9rifier si retard > 365 jours\n            ELSE\n                CASE\n                    WHEN GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ) < TIMESTAMP_SUB(today, INTERVAL 365 DAY)\n                    THEN TRUE\n                    ELSE FALSE\n                END\n        END AS retard_bol,\n        \n        -- CALCUL DU D\u00c9LAI\n        CASE\n            -- CAS 1: Machine r\u00e9cente (< 13 mois)\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                TIMESTAMP_DIFF(TIMESTAMP_ADD(last_installation_date, INTERVAL 395 DAY), today, DAY)\n            \n            -- CAS 2: Aucune pr\u00e9ventive\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                -TIMESTAMP_DIFF(today, TIMESTAMP_ADD(last_installation_date, INTERVAL 365 DAY), DAY)\n            \n            -- CAS 3: Avec pr\u00e9ventives\n            ELSE\n                CASE\n                    WHEN TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY) > 365\n                    THEN -(TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY) - 365)\n                    ELSE 365 - TIMESTAMP_DIFF(today, GREATEST(\n                        COALESCE(derniere_preventive_source1, TIMESTAMP('1900-01-01')),\n                        COALESCE(derniere_preventive_source2, TIMESTAMP('1900-01-01'))\n                    ), DAY)\n                END\n        END AS retard_delai,\n        \n        -- SOURCE DE LA DERNI\u00c8RE PR\u00c9VENTIVE\n        CASE\n            WHEN last_installation_date > TIMESTAMP_SUB(today, INTERVAL 395 DAY) THEN\n                'aucune'\n            WHEN derniere_preventive_source1 IS NULL AND derniere_preventive_source2 IS NULL THEN\n                'aucune'\n            WHEN derniere_preventive_source2 IS NULL OR \n                (derniere_preventive_source1 IS NOT NULL AND derniere_preventive_source1 > derniere_preventive_source2) THEN\n                'yuman'\n            ELSE\n                'dlog'\n        END AS source_last_preventive,\n        \n        today\n        \n    FROM calcul_retard\n),\n\n-- D\u00c9DUPLICATION: Garder une seule ligne par machine\ndeduplique AS (\n    SELECT\n        * EXCEPT(today),\n        ROW_NUMBER() OVER (\n            PARTITION BY material_serial_number \n            ORDER BY \n                retard_bol ASC,                -- Les machines non en retard d'abord (FALSE avant TRUE)\n                material_created_at DESC,      -- Si les 2 non en retard : la plus r\u00e9cente\n                retard_delai ASC               -- Si les 2 en retard : le plus grand d\u00e9lai (n\u00e9gatif donc ASC)\n        ) AS rn\n    FROM retard_final\n),\n\n-- R\u00c9SULTAT RETARD DEDUPLIQU\u00c9\nresultat_retard AS (\n    SELECT\n        device_id,\n        material_id,\n        device_code,\n        material_serial_number,\n        last_installation_date,\n        device_name,\n        company_code,\n        company_name,\n        client_code,\n        client_name,\n        client_category,\n        site_postal_code,\n        retard_bol,\n        retard_delai,\n        source_last_preventive,\n        material_created_at\n    FROM deduplique\n    WHERE rn = 1\n),\n\n-- DEMANDES D'INTERVENTION YUMAN OUVERTES & PLANIFI\u00c9ES\ndi_data AS (\n    SELECT \n        wd.material_id,\n        wo.date_planned,\n        CASE\n            WHEN wd.demand_status = 'Open' THEN 'Ouvert'\n            WHEN wo.workorder_status = 'Scheduled' THEN 'Planifie'\n            ELSE 'Aucune'\n        END AS status_inter\n    FROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands` wd\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories` wdc\n        ON wd.demand_category_id = wdc.demand_category_id\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders` wo\n        ON wd.workorder_id = wo.workorder_id\n    WHERE wdc.demand_category_name = 'PREVENTIVE PROG - NESHU' \n        AND (wd.demand_status = 'Open' OR wo.workorder_status = 'Scheduled')\n),\n\n-- ENRICHISSEMENT FINAL AVEC STATUT DES INTERVENTIONS\nfinal AS (\n    SELECT\n        rr.device_id,\n        rr.device_code,\n        rr.device_name,\n        rr.company_code,\n        rr.company_name,\n        rr.last_installation_date AS device_last_installation_date,\n        rr.material_id,\n        rr.material_serial_number,\n        rr.client_code,\n        rr.client_name,\n        rr.client_category,\n        rr.site_postal_code,\n        rr.retard_bol,\n        rr.retard_delai,\n        rr.source_last_preventive,\n        COALESCE(di.status_inter, 'Aucune') AS status_inter,\n        di.date_planned,\n        rr.material_created_at,\n\n        -- M\u00e9tadonn\u00e9es dbt\n        CURRENT_TIMESTAMP() as dbt_updated_at,\n        'd3de9015-62df-4f1d-842a-4581ffa711ee' as dbt_invocation_id\n\n    FROM resultat_retard rr\n    LEFT JOIN di_data di\n        ON rr.material_id = di.material_id\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["device_id"], "time_spine": null}, "model.dbt_warehouse.dim_oracle_neshu__product": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_oracle_neshu__product", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/dim_oracle_neshu__product.sql", "original_file_path": "models/marts/oracle_neshu/dim_oracle_neshu__product.sql", "unique_id": "model.dbt_warehouse.dim_oracle_neshu__product", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dim_oracle_neshu__product"], "alias": "dim_oracle_neshu__product", "checksum": {"name": "sha256", "checksum": "3eed68ddcd55a39430987b8506b3e674a7f3a656861df54a385853b5d3addc30"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["product_id"], "description": "Dimension produit enrichie \u00e0 partir des labels associ\u00e9s (type, famille, groupe, marque, etc.) filtr\u00e9 sur les produits de type 1 (produit) et 5 (Ligne de prix)."}, "tags": ["marts"], "description": "Dimension produit enrichie \u00e0 partir des labels associ\u00e9s (type, famille, groupe, marque, etc.) et filtr\u00e9e sur les produits de type 1 (produit) et 5 (ligne de prix).\n", "columns": {"product_id": {"name": "product_id", "description": "Identifiant unique du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type_id": {"name": "product_type_id", "description": "Type de produit (1 = produit, 5 = ligne de prix)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code produit (r\u00e9f\u00e9rence interne)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Nom du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_unit_price": {"name": "purchase_unit_price", "description": "Prix d'achat unitaire du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_brand": {"name": "product_brand", "description": "Marque du produit, extraite du label MARQUEP", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_owner": {"name": "product_owner", "description": "Propri\u00e9taire du produit, via label PROPRIETAIRE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_family": {"name": "product_family", "description": "Famille produit (ex : CAFE CAPSULES, THE), via label FAMILLE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_bio": {"name": "product_bio", "description": "Indication BIO ou non (via label BIO)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_group": {"name": "product_group", "description": "Groupe produit (ACCESSOIRES, SNACKING...), via label GROUPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "Typologie produit standardis\u00e9e selon r\u00e8gles m\u00e9tier : ex. 'CAFE CAPS', 'THE', 'CHOCOLATS VAN HOUTEN', 'BOISSONS GOURMANDES'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "\u00c9tat d'activit\u00e9 du produit, converti en bool\u00e9en : TRUE si le label ISACTIVE = 'YES', sinon FALSE.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation du produit dans la source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour du produit dans la source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "cluster_by": ["product_id"], "description": "Dimension produit enrichie \u00e0 partir des labels associ\u00e9s (type, famille, groupe, marque, etc.) filtr\u00e9 sur les produits de type 1 (produit) et 5 (Ligne de prix)."}, "created_at": 1760962911.7683744, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product`", "raw_code": "{{\n  config(\n    materialized='table',\n    cluster_by=['product_id'],\n    description='Dimension produit enrichie \u00e0 partir des labels associ\u00e9s (type, famille, groupe, marque, etc.) filtr\u00e9 sur les produits de type 1 (produit) et 5 (Ligne de prix).',\n  )\n}}\n\nWITH product_labels AS (\n  SELECT \n    p.idproduct as product_id,\n    p.idproduct_type as product_type_id,\n    p.code AS product_code,\n    p.name AS product_name,\n    p.purchase_unit_price AS purchase_unit_price,\n    -- Correction de created_at si idproduct = 1\n    CASE \n      WHEN p.idproduct = 1 AND p.created_at IS NULL THEN p.updated_at\n      ELSE p.created_at\n    END AS created_at,\n    p.updated_at,\n    l.code AS label_code,\n    lf.code AS label_family_code\n  FROM {{ ref('stg_oracle_neshu__product') }} p\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_has_product') }} lhp \n    ON lhp.idproduct = p.idproduct\n    AND lhp.idlabel IS NOT NULL\n  LEFT JOIN {{ ref('stg_oracle_neshu__label') }} l \n    ON l.idlabel = lhp.idlabel\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_family') }} lf \n    ON lf.idlabel_family = l.idlabel_family\n  WHERE p.idproduct_type IN (1, 5)\n    AND (\n      CASE \n        WHEN p.idproduct = 1 AND p.created_at IS NULL THEN p.updated_at\n        ELSE p.created_at\n      END\n    ) IS NOT NULL\n),\n\npivoted AS (\n  SELECT *\n  FROM product_labels\n  PIVOT (\n    MAX(label_code)\n    FOR label_family_code IN (\n      'MARQUEP' AS product_brand,\n      'PROPRIETAIRE' AS product_owner,\n      'FAMILLE' AS product_family, \n      'BIO' AS product_bio,\n      'GROUPE' AS product_group,\n      'LPTYPE' AS product_type_raw,\n      'ISACTIVE' AS isactive\n    )\n  )\n),\n\nfinal AS (\n  SELECT\n    product_id,\n    product_type_id,\n    product_code,\n    product_name,\n    purchase_unit_price,\n    product_brand,\n    product_owner,\n    product_family,\n    product_bio,\n    product_group,\n    product_type_raw,\n    -- convert isactive from string to boolean\n    CASE\n      WHEN LOWER(isactive) = 'yes' THEN TRUE\n      ELSE FALSE\n    END AS is_active,\n    created_at,\n    updated_at,\n    -- logique de typologie standardis\u00e9e\n    COALESCE(\n      CASE\n        WHEN product_id = 1 THEN 'INDEFINI'\n        WHEN product_family IN ('CAFE CAPSULES', 'CAFE CAPSULES PREMIUM') THEN 'CAFE CAPS'\n        WHEN product_family IN ('THE') THEN 'THE'\n        WHEN product_group = 'ACCESSOIRES' THEN 'ACCESSOIRES'\n        WHEN product_group = 'BOISSONS FRAICHES' THEN 'BOISSONS FRAICHES'\n        WHEN product_group = 'SNACKING' THEN 'SNACKING'\n        WHEN product_brand = 'VAN HOUTEN' AND product_code = 'VANHCHOC23' THEN 'CHOCOLATS VAN HOUTEN'\n        WHEN product_type_raw = 'BGOURMANDE' THEN 'BOISSONS GOURMANDES'\n        ELSE NULL\n      END,\n      NULLIF(TRIM(product_type_raw), ''),\n      'Non renseign\u00e9'\n    ) AS product_type\n  FROM pivoted\n),\n\nstandardized AS (\n  SELECT\n    product_id,\n    product_type_id,\n    product_code,\n    product_name,\n    purchase_unit_price,\n\n    -- FORCING champs \u00e0 'INDEFINI' si product_type est 'INDEFINI'\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_brand END AS product_brand,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_owner END AS product_owner,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_family END AS product_family,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_bio END AS product_bio,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_group END AS product_group,\n\n    product_type_raw,\n    is_active,\n    created_at,\n    updated_at,\n    product_type\n  FROM final\n)\n\nSELECT  \n  product_id,\n  product_type_id,\n  product_code,\n  product_name,\n  purchase_unit_price,\n  product_brand,\n  product_owner,\n  product_family,\n  product_bio,\n  product_group,\n  product_type,\n  is_active,\n  created_at,\n  updated_at\nFROM standardized", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/dim_oracle_neshu__product.sql", "compiled": true, "compiled_code": "\n\nWITH product_labels AS (\n  SELECT \n    p.idproduct as product_id,\n    p.idproduct_type as product_type_id,\n    p.code AS product_code,\n    p.name AS product_name,\n    p.purchase_unit_price AS purchase_unit_price,\n    -- Correction de created_at si idproduct = 1\n    CASE \n      WHEN p.idproduct = 1 AND p.created_at IS NULL THEN p.updated_at\n      ELSE p.created_at\n    END AS created_at,\n    p.updated_at,\n    l.code AS label_code,\n    lf.code AS label_family_code\n  FROM `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product` lhp \n    ON lhp.idproduct = p.idproduct\n    AND lhp.idlabel IS NOT NULL\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` l \n    ON l.idlabel = lhp.idlabel\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf \n    ON lf.idlabel_family = l.idlabel_family\n  WHERE p.idproduct_type IN (1, 5)\n    AND (\n      CASE \n        WHEN p.idproduct = 1 AND p.created_at IS NULL THEN p.updated_at\n        ELSE p.created_at\n      END\n    ) IS NOT NULL\n),\n\npivoted AS (\n  SELECT *\n  FROM product_labels\n  PIVOT (\n    MAX(label_code)\n    FOR label_family_code IN (\n      'MARQUEP' AS product_brand,\n      'PROPRIETAIRE' AS product_owner,\n      'FAMILLE' AS product_family, \n      'BIO' AS product_bio,\n      'GROUPE' AS product_group,\n      'LPTYPE' AS product_type_raw,\n      'ISACTIVE' AS isactive\n    )\n  )\n),\n\nfinal AS (\n  SELECT\n    product_id,\n    product_type_id,\n    product_code,\n    product_name,\n    purchase_unit_price,\n    product_brand,\n    product_owner,\n    product_family,\n    product_bio,\n    product_group,\n    product_type_raw,\n    -- convert isactive from string to boolean\n    CASE\n      WHEN LOWER(isactive) = 'yes' THEN TRUE\n      ELSE FALSE\n    END AS is_active,\n    created_at,\n    updated_at,\n    -- logique de typologie standardis\u00e9e\n    COALESCE(\n      CASE\n        WHEN product_id = 1 THEN 'INDEFINI'\n        WHEN product_family IN ('CAFE CAPSULES', 'CAFE CAPSULES PREMIUM') THEN 'CAFE CAPS'\n        WHEN product_family IN ('THE') THEN 'THE'\n        WHEN product_group = 'ACCESSOIRES' THEN 'ACCESSOIRES'\n        WHEN product_group = 'BOISSONS FRAICHES' THEN 'BOISSONS FRAICHES'\n        WHEN product_group = 'SNACKING' THEN 'SNACKING'\n        WHEN product_brand = 'VAN HOUTEN' AND product_code = 'VANHCHOC23' THEN 'CHOCOLATS VAN HOUTEN'\n        WHEN product_type_raw = 'BGOURMANDE' THEN 'BOISSONS GOURMANDES'\n        ELSE NULL\n      END,\n      NULLIF(TRIM(product_type_raw), ''),\n      'Non renseign\u00e9'\n    ) AS product_type\n  FROM pivoted\n),\n\nstandardized AS (\n  SELECT\n    product_id,\n    product_type_id,\n    product_code,\n    product_name,\n    purchase_unit_price,\n\n    -- FORCING champs \u00e0 'INDEFINI' si product_type est 'INDEFINI'\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_brand END AS product_brand,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_owner END AS product_owner,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_family END AS product_family,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_bio END AS product_bio,\n    CASE WHEN product_type = 'INDEFINI' THEN 'INDEFINI' ELSE product_group END AS product_group,\n\n    product_type_raw,\n    is_active,\n    created_at,\n    updated_at,\n    product_type\n  FROM final\n)\n\nSELECT  \n  product_id,\n  product_type_id,\n  product_code,\n  product_name,\n  purchase_unit_price,\n  product_brand,\n  product_owner,\n  product_family,\n  product_bio,\n  product_group,\n  product_type,\n  is_active,\n  created_at,\n  updated_at\nFROM standardized", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id"], "time_spine": null}, "model.dbt_warehouse.dim_oracle_neshu__company": {"database": "evs-datastack-prod", "schema": "prod_marts", "name": "dim_oracle_neshu__company", "resource_type": "model", "package_name": "dbt_warehouse", "path": "marts/oracle_neshu/dim_oracle_neshu__company.sql", "original_file_path": "models/marts/oracle_neshu/dim_oracle_neshu__company.sql", "unique_id": "model.dbt_warehouse.dim_oracle_neshu__company", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dim_oracle_neshu__company"], "alias": "dim_oracle_neshu__company", "checksum": {"name": "sha256", "checksum": "590a6332c621cac9ca3b59a2babee216e06dd4f32ed5ee0befe24688b9706f7e"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id"], "description": "Dimension client/company enrichie \u00e0 partir des labels associ\u00e9s (r\u00e9gion, secteur, statut, etc.) et des informations de localisation."}, "tags": ["marts"], "description": "Dimension client/company enrichie \u00e0 partir des labels associ\u00e9s (r\u00e9gion, secteur, statut, etc.) et des informations de localisation.\n", "columns": {"company_id": {"name": "company_id", "description": "Identifiant unique de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_type_id": {"name": "company_type_id", "description": "ID Type de soci\u00e9t\u00e9 (ex : client, fournisseur...)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Nom de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "R\u00e9gion g\u00e9ographique de la soci\u00e9t\u00e9 (label REGION)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sector": {"name": "sector", "description": "Secteur d\u2019activit\u00e9 (HORECA/OFFICE) (label SECTEUR_ACTVITE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sector_code": {"name": "sector_code", "description": "Code sectoriel associ\u00e9, lien avec ceux de nespresso (label CODE_SECTEUR)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "activity_sector": {"name": "activity_sector", "description": "Secteur d'activit\u00e9 d\u00e9taill\u00e9 (label SECTEUR_DACTIVITE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_range": {"name": "employee_range", "description": "Tranche de collaborateurs (label TRANCHE_COLLAB)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_type": {"name": "company_type", "description": "Type d\u2019entreprise (label TYPECOMPAGNIE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_economic_model": {"name": "company_economic_model", "description": "Mod\u00e8le \u00e9conomique client (label MODELEECOCLIENT)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_status": {"name": "client_status", "description": "Statut client (OR/ARGENT/BRONZE) (label STATUT_CLIENT)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_active": {"name": "is_active", "description": "Indique si la soci\u00e9t\u00e9 est active (label ISACTIVE).  TRUE si 'yes', sinon FALSE.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "key_account": {"name": "key_account", "description": "KA grand compte (label KA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "katiers": {"name": "katiers", "description": "Label KATIERS li\u00e9 au KA", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "remote_work": {"name": "remote_work", "description": "Indicateur du nombre de t\u00e9l\u00e9travail par semaine (label TELETRAVAIL)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "proadman": {"name": "proadman", "description": "Nombre de passage roadman (label PROADMAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gsm": {"name": "gsm", "description": "Gobelet Sucre Melangeur FORMULE (label GSM_TERRAIN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "badge": {"name": "badge", "description": "Indicateur de badge client (label BADGE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recycling": {"name": "recycling", "description": "Indicateur de recyclage (label RECYCLAGE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address1": {"name": "address1", "description": "Adresse principale (ligne 1)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address2": {"name": "address2", "description": "Adresse compl\u00e9mentaire (ligne 2)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "Ville de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Code postal de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Pays de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Date de cr\u00e9ation dans la base source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour dans la base source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "marts", "tags": ["marts"], "cluster_by": ["company_id"], "description": "Dimension client/company enrichie \u00e0 partir des labels associ\u00e9s (r\u00e9gion, secteur, statut, etc.) et des informations de localisation."}, "created_at": 1760962911.764306, "relation_name": "`evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company`", "raw_code": "{{\n  config(\n    materialized='table',\n    cluster_by=['company_id'],\n    description='Dimension client/company enrichie \u00e0 partir des labels associ\u00e9s (r\u00e9gion, secteur, statut, etc.) et des informations de localisation.'\n  )\n}}\n\nWITH company_labels AS (\n  SELECT \n    c.idcompany as company_id,\n    c.code AS company_code,\n    c.idcompany_type as company_type_id,\n    c.name AS company_name,\n    c.created_at,\n    c.updated_at,\n    l.code AS label_code,\n    lf.code AS label_family_code,\n    loc.address1,\n    loc.address2,\n    loc.city,\n    loc.postal AS postal_code,\n    loc.country\n  FROM {{ ref('stg_oracle_neshu__company') }} c\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_has_company') }} lhc \n    ON lhc.idcompany = c.idcompany AND lhc.idlabel IS NOT NULL\n  LEFT JOIN {{ ref('stg_oracle_neshu__label') }} l \n    ON l.idlabel = lhc.idlabel\n  LEFT JOIN {{ ref('stg_oracle_neshu__label_family') }} lf \n    ON lf.idlabel_family = l.idlabel_family\n  LEFT JOIN {{ ref('stg_oracle_neshu__company_has_location') }} chl\n    ON chl.idcompany = c.idcompany AND chl.idlocation_type = 1\n  LEFT JOIN {{ ref('stg_oracle_neshu__location') }} loc\n    ON loc.idlocation = chl.idlocation\n  WHERE ((c.idcompany_type IN (1,2,4,6))\n)),\naggregated_labels AS (\n  SELECT\n    company_id,\n    company_type_id,\n    company_code,\n    company_name,\n    created_at,\n    updated_at,\n    address1,\n    address2,\n    city,\n    postal_code,\n    country,\n    MAX(CASE WHEN label_family_code = 'TRANCHE_COLLAB' THEN label_code END) AS employee_range,\n    MAX(CASE WHEN label_family_code = 'PROADMAN' THEN label_code END) AS proadman,\n    MAX(CASE WHEN label_family_code = 'REGION' THEN label_code END) AS region,\n    MAX(CASE WHEN label_family_code = 'TELETRAVAIL' THEN label_code END) AS remote_work,\n    MAX(CASE WHEN label_family_code = 'SECTEUR_ACTVITE' THEN label_code END) AS sector,\n    MAX(CASE WHEN label_family_code = 'SECTEUR_DACTIVITE' THEN label_code END) AS activity_sector,\n    MAX(CASE WHEN label_family_code = 'RCOMM' THEN label_code END) AS commercial_rep,\n    MAX(CASE WHEN label_family_code = 'HORECA' THEN label_code END) AS horeca,\n    MAX(CASE WHEN label_family_code = 'GSM_TERRAIN' THEN label_code END) AS gsm,\n    MAX(CASE WHEN label_family_code = 'KATIERS' THEN label_code END) AS katiers,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active,\n    MAX(CASE WHEN label_family_code = 'CODE_SECTEUR' THEN label_code END) AS sector_code,\n    MAX(CASE WHEN label_family_code = 'STATUT_CLIENT' THEN label_code END) AS client_status,\n    MAX(CASE WHEN label_family_code = 'Gestion reliquat' THEN label_code END) AS remainder_management,\n    MAX(CASE WHEN label_family_code = 'MODEENVOIFACTURE' THEN label_code END) AS invoice_delivery_mode,\n    MAX(CASE WHEN label_family_code = 'BADGE' THEN label_code END) AS badge,\n    MAX(CASE WHEN label_family_code = 'RECYCLAGE' THEN label_code END) AS recycling,\n    MAX(CASE WHEN label_family_code = 'TYPECOMPAGNIE' THEN label_code END) AS company_type,\n    MAX(CASE WHEN label_family_code = 'MODELEECOCLIENT' THEN label_code END) AS company_economic_model,\n    MAX(CASE WHEN label_family_code = 'BL_GRP' THEN label_code END) AS bl_group,\n    MAX(CASE WHEN label_family_code = 'KA' THEN label_code END) AS key_account\n  FROM company_labels\n  GROUP BY\n    company_id,\n    company_type_id,\n    company_code,\n    company_name,\n    created_at,\n    updated_at,\n    address1,\n    address2,\n    city,\n    postal_code,\n    country\n)\n\nSELECT\n  -- \ud83d\udd11 Identifiants\n  company_id,\n  company_type_id,\n\n  -- \ud83d\udcc7 Codes et noms\n  company_code,\n  company_name,\n\n  -- \ud83c\udfe2 Caract\u00e9ristiques entreprise\n  region,\n  sector,\n  sector_code,\n  activity_sector,\n  employee_range,\n  company_type,\n  company_economic_model,\n  client_status,\n  \n  CASE\n    WHEN LOWER(is_active) = 'yes' THEN TRUE\n    ELSE FALSE\n  END AS is_active,\n\n  -- \ud83d\udc65 Gestion commerciale\n  key_account,\n  katiers,\n\n  -- \ud83c\udfe8 Sp\u00e9cificit\u00e9s m\u00e9tier  \n  remote_work,\n\n  -- \ud83d\udd27 Services et options\n  proadman,\n  gsm,\n  badge,\n  recycling,\n\n  -- \ud83d\udccd Adresse\n  address1,\n  address2,\n  city,\n  postal_code,\n  country,\n\n  -- \ud83d\udd52 Dates\n  created_at,\n  updated_at\n\nFROM aggregated_labels", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_company", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}, {"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "model.dbt_warehouse.stg_oracle_neshu__location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/dim_oracle_neshu__company.sql", "compiled": true, "compiled_code": "\n\nWITH company_labels AS (\n  SELECT \n    c.idcompany as company_id,\n    c.code AS company_code,\n    c.idcompany_type as company_type_id,\n    c.name AS company_name,\n    c.created_at,\n    c.updated_at,\n    l.code AS label_code,\n    lf.code AS label_family_code,\n    loc.address1,\n    loc.address2,\n    loc.city,\n    loc.postal AS postal_code,\n    loc.country\n  FROM `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company` lhc \n    ON lhc.idcompany = c.idcompany AND lhc.idlabel IS NOT NULL\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` l \n    ON l.idlabel = lhc.idlabel\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf \n    ON lf.idlabel_family = l.idlabel_family\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location` chl\n    ON chl.idcompany = c.idcompany AND chl.idlocation_type = 1\n  LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` loc\n    ON loc.idlocation = chl.idlocation\n  WHERE ((c.idcompany_type IN (1,2,4,6))\n)),\naggregated_labels AS (\n  SELECT\n    company_id,\n    company_type_id,\n    company_code,\n    company_name,\n    created_at,\n    updated_at,\n    address1,\n    address2,\n    city,\n    postal_code,\n    country,\n    MAX(CASE WHEN label_family_code = 'TRANCHE_COLLAB' THEN label_code END) AS employee_range,\n    MAX(CASE WHEN label_family_code = 'PROADMAN' THEN label_code END) AS proadman,\n    MAX(CASE WHEN label_family_code = 'REGION' THEN label_code END) AS region,\n    MAX(CASE WHEN label_family_code = 'TELETRAVAIL' THEN label_code END) AS remote_work,\n    MAX(CASE WHEN label_family_code = 'SECTEUR_ACTVITE' THEN label_code END) AS sector,\n    MAX(CASE WHEN label_family_code = 'SECTEUR_DACTIVITE' THEN label_code END) AS activity_sector,\n    MAX(CASE WHEN label_family_code = 'RCOMM' THEN label_code END) AS commercial_rep,\n    MAX(CASE WHEN label_family_code = 'HORECA' THEN label_code END) AS horeca,\n    MAX(CASE WHEN label_family_code = 'GSM_TERRAIN' THEN label_code END) AS gsm,\n    MAX(CASE WHEN label_family_code = 'KATIERS' THEN label_code END) AS katiers,\n    MAX(CASE WHEN label_family_code = 'ISACTIVE' THEN label_code END) AS is_active,\n    MAX(CASE WHEN label_family_code = 'CODE_SECTEUR' THEN label_code END) AS sector_code,\n    MAX(CASE WHEN label_family_code = 'STATUT_CLIENT' THEN label_code END) AS client_status,\n    MAX(CASE WHEN label_family_code = 'Gestion reliquat' THEN label_code END) AS remainder_management,\n    MAX(CASE WHEN label_family_code = 'MODEENVOIFACTURE' THEN label_code END) AS invoice_delivery_mode,\n    MAX(CASE WHEN label_family_code = 'BADGE' THEN label_code END) AS badge,\n    MAX(CASE WHEN label_family_code = 'RECYCLAGE' THEN label_code END) AS recycling,\n    MAX(CASE WHEN label_family_code = 'TYPECOMPAGNIE' THEN label_code END) AS company_type,\n    MAX(CASE WHEN label_family_code = 'MODELEECOCLIENT' THEN label_code END) AS company_economic_model,\n    MAX(CASE WHEN label_family_code = 'BL_GRP' THEN label_code END) AS bl_group,\n    MAX(CASE WHEN label_family_code = 'KA' THEN label_code END) AS key_account\n  FROM company_labels\n  GROUP BY\n    company_id,\n    company_type_id,\n    company_code,\n    company_name,\n    created_at,\n    updated_at,\n    address1,\n    address2,\n    city,\n    postal_code,\n    country\n)\n\nSELECT\n  -- \ud83d\udd11 Identifiants\n  company_id,\n  company_type_id,\n\n  -- \ud83d\udcc7 Codes et noms\n  company_code,\n  company_name,\n\n  -- \ud83c\udfe2 Caract\u00e9ristiques entreprise\n  region,\n  sector,\n  sector_code,\n  activity_sector,\n  employee_range,\n  company_type,\n  company_economic_model,\n  client_status,\n  \n  CASE\n    WHEN LOWER(is_active) = 'yes' THEN TRUE\n    ELSE FALSE\n  END AS is_active,\n\n  -- \ud83d\udc65 Gestion commerciale\n  key_account,\n  katiers,\n\n  -- \ud83c\udfe8 Sp\u00e9cificit\u00e9s m\u00e9tier  \n  remote_work,\n\n  -- \ud83d\udd27 Services et options\n  proadman,\n  gsm,\n  badge,\n  recycling,\n\n  -- \ud83d\udccd Adresse\n  address1,\n  address2,\n  city,\n  postal_code,\n  country,\n\n  -- \ud83d\udd52 Dates\n  created_at,\n  updated_at\n\nFROM aggregated_labels", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["company_id"], "time_spine": null}, "model.dbt_warehouse.int_yuman__workorder_pricing": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_yuman__workorder_pricing", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/yuman/int_yuman__workorder_pricing.sql", "original_file_path": "models/intermediate/yuman/int_yuman__workorder_pricing.sql", "unique_id": "model.dbt_warehouse.int_yuman__workorder_pricing", "fqn": ["dbt_warehouse", "intermediate", "yuman", "int_yuman__workorder_pricing"], "alias": "int_yuman__workorder_pricing", "checksum": {"name": "sha256", "checksum": "0b66f40b7e3ef5a110f14993a8526f6149d8ab64d0c003cadeb9dbfb10b9075d"}, "config": {"enabled": true, "alias": "int_yuman__workorder_pricing", "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["billing_validation_status", "workorder_status", "demand_status", "partner_name"], "partition_by": {"field": "date_done", "data_type": "timestamp"}}, "tags": ["intermediate"], "description": "Vue interm\u00e9diaire de tarification automatique des interventions (workorders). Ce mod\u00e8le enrichit les donn\u00e9es unifi\u00e9es des interventions et des demandes issues de  `int_yuman__demands_workorders_enriched` avec les r\u00e9f\u00e9rentiels de types d'intervention, machines, tarifications et zones g\u00e9ographiques.  Il calcule les prix automatiques des interventions selon les r\u00e8gles de r\u00e9currence,  de partenaire et de localisation (m\u00e9tropole).\n", "columns": {"demand_id": {"name": "demand_id", "description": "Identifiant unique de la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_id": {"name": "workorder_id", "description": "Identifiant unique du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "Identifiant du mat\u00e9riel concern\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Identifiant du site client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Identifiant du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "technician_id": {"name": "technician_id", "description": "Identifiant du technicien associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "Identifiant du manager ou responsable associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_description": {"name": "demand_description", "description": "Description textuelle de la demande d\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_status": {"name": "demand_status", "description": "Statut de la demande d\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_created_at": {"name": "demand_created_at", "description": "Date de cr\u00e9ation de la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_updated_at": {"name": "demand_updated_at", "description": "Date de derni\u00e8re mise \u00e0 jour de la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_category_name": {"name": "demand_category_name", "description": "Cat\u00e9gorie de la demande d\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_number": {"name": "workorder_number", "description": "Num\u00e9ro unique du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_category": {"name": "workorder_category", "description": "Cat\u00e9gorie ou type brut du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_status": {"name": "workorder_status", "description": "Statut actuel du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_technician_name": {"name": "workorder_technician_name", "description": "Nom du technicien affect\u00e9 au bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_date_creation": {"name": "workorder_date_creation", "description": "Date de cr\u00e9ation du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_motif_non_intervention": {"name": "workorder_motif_non_intervention", "description": "Motif de non-intervention, si applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_detail_non_intervention": {"name": "workorder_detail_non_intervention", "description": "D\u00e9tail du motif de non-intervention, si applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_planned": {"name": "date_planned", "description": "Date planifi\u00e9e de l\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_started": {"name": "date_started", "description": "Date de d\u00e9but de l\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_done": {"name": "date_done", "description": "Date de cl\u00f4ture de l\u2019intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "partner_name": {"name": "partner_name", "description": "Nom du partenaire ou marque associ\u00e9e au client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code unique du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie commerciale ou segment du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_is_active": {"name": "client_is_active", "description": "Indique si le client est actif.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_code": {"name": "site_code", "description": "Code unique du site.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_name": {"name": "site_name", "description": "Nom du site client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_address": {"name": "site_address", "description": "Adresse compl\u00e8te du site client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal fourni dans le syst\u00e8me Yuman.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code_site": {"name": "postal_code_site", "description": "Code postal normalis\u00e9 du site (corrig\u00e9 ou extrait de la description si manquant).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie du mat\u00e9riel concern\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_type_raw": {"name": "workorder_type_raw", "description": "Type brut de l\u2019intervention avant normalisation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "machine_raw": {"name": "machine_raw", "description": "Cat\u00e9gorie brute du mat\u00e9riel avant nettoyage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_type_clean": {"name": "workorder_type_clean", "description": "Type d\u2019intervention normalis\u00e9 (pr\u00e9ventif, curatif, installation\u2026).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "machine_clean": {"name": "machine_clean", "description": "Cat\u00e9gorie de machine normalis\u00e9e.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "metropolitan": {"name": "metropolitan", "description": "Indicateur binaire (1 = m\u00e9tropole, 0 = hors m\u00e9tropole).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "metropole_city": {"name": "metropole_city", "description": "Ville de la m\u00e9tropole associ\u00e9e \u00e0 l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recurrence_count": {"name": "recurrence_count", "description": "Nombre d\u2019interventions r\u00e9alis\u00e9es pour un m\u00eame client le m\u00eame jour (r\u00e9currence).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pricing_type": {"name": "pricing_type", "description": "Type de tarification appliqu\u00e9e (Tarif normal, Remise niv1, Remise niv2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pricing_key_used": {"name": "pricing_key_used", "description": "Cl\u00e9 de tarification g\u00e9n\u00e9r\u00e9e pour le matching avec la table de r\u00e9f\u00e9rence.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Montant appliqu\u00e9 selon la tarification automatique.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "prod_number": {"name": "prod_number", "description": "Code produit ou r\u00e9f\u00e9rence tarifaire associ\u00e9e.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "to_invoice": {"name": "to_invoice", "description": "Indique si le bon d\u2019intervention doit \u00eatre factur\u00e9 (true = \u00e0 facturer).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billing_validation_status": {"name": "billing_validation_status", "description": "Statut de validation de la facturation (VALIDATED, MISSING_TARIF, NOT_BILLABLE).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/yuman/_yuman__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "alias": "int_yuman__workorder_pricing", "partition_by": {"field": "date_done", "data_type": "timestamp"}, "cluster_by": ["billing_validation_status", "workorder_status", "demand_status", "partner_name"]}, "created_at": 1760962912.0175965, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_yuman__workorder_pricing`", "raw_code": "{{ config(\n    materialized = \"table\",\n    schema='intermediate',\n    alias = \"int_yuman__workorder_pricing\",\n    partition_by={\"field\": \"date_done\", \"data_type\": \"timestamp\"},\n    cluster_by=['billing_validation_status','workorder_status','demand_status','partner_name']\n) }}\n\n-- ============================================================================\n-- MODEL: int_yuman__workorder_pricing\n-- PURPOSE: Determine automatic pricing for technical interventions from Yuman\n-- AUTHOR: Cebrail AKSOY\n-- UPDATED: {{ run_started_at }}\n-- ============================================================================\n\nWITH \n-- ============================================================================\n-- 1. BASE DATA EXTRACTION\n-- ============================================================================\nbase_workorders AS (\n  SELECT\n    demand_id,\n    workorder_id,\n    material_id,\n    site_id,\n    client_id,\n    technician_id,\n    manager_id,\n    demand_description,\n    demand_status,\n    demand_created_at,\n    demand_updated_at,\n    demand_category_name,\n    workorder_number,\n    workorder_category,\n    workorder_status,\n    workorder_technician_name,\n    workorder_date_creation,\n    workorder_motif_non_intervention,\n    workorder_detail_non_intervention,\n    date_planned,\n    date_started,\n    date_done,\n    partner_name,\n    client_code,\n    client_name,\n    client_category,\n    client_is_active,\n    site_code,\n    site_name,\n    site_address,\n    site_postal_code,\n    material_serial_number,\n    technician_equipe,\n\n    -- Normalize workorder type\n    LOWER(COALESCE(\n      workorder_category,\n      CASE\n        WHEN workorder_type = 'Reactive' THEN 'curatif'\n        WHEN workorder_type = 'Preventive' THEN 'pr\u00e9ventif'\n        WHEN workorder_type = 'Installation' THEN 'installation'\n        ELSE workorder_type\n      END\n    )) AS workorder_type_raw,\n\n    -- Normalize machine category\n    LOWER(TRIM(CASE\n      WHEN material_category IS NOT NULL THEN material_category\n      WHEN LOWER(client_name) LIKE '%generique%' THEN CONCAT(partner_name, '_GENERIQUE')\n      WHEN partner_name = 'AUUM' THEN 'MGZ'\n      WHEN partner_name = 'TWYD' THEN 'FONTAINE TWYD'\n      WHEN partner_name = 'EXPRESSO' THEN 'MILANO'\n      WHEN partner_name = 'NESHU' THEN 'MILANO'\n      WHEN partner_name = 'BRITA' THEN 'viv t 85 c2-tg-i-cu ce'\n      WHEN partner_name = 'DAAN' THEN 'lave-vaisselle'\n      WHEN partner_name = 'NU' THEN 'frigo nu'\n      ELSE NULL  \n    END)) AS machine_raw,\n\n    -- Postal code correction\n    CASE\n      WHEN site_postal_code IS NULL OR site_postal_code = '00000' THEN (\n        SELECT code_postal\n        FROM UNNEST(REGEXP_EXTRACT_ALL(demand_description, r'\\b\\d{5}\\b')) AS code_postal\n        WHERE NOT REGEXP_CONTAINS(\n          LEFT(demand_description, STRPOS(demand_description, code_postal)-1),\n          r'(?i)N\u00b0\\s*$|interventions?\\s*$'\n        )\n        LIMIT 1\n      )\n      ELSE REGEXP_EXTRACT(site_address, r'\\b(\\d{5})\\b')\n    END AS postal_code_site,\n\n    -- Billing indicator\n    CASE\n      WHEN workorder_status = 'Closed'\n        AND workorder_motif_non_intervention IS NULL\n        AND workorder_detail_non_intervention IS NULL\n      THEN TRUE\n      ELSE FALSE\n    END AS a_facturer\n\n  FROM {{ ref('int_yuman__demands_workorders_enriched') }}\n),\n\n-- ============================================================================\n-- 2. REFERENCE TABLES\n-- ============================================================================\nref_type_inter AS (\n  SELECT \n    LOWER(Type_intervention_Brut) AS workorder_type_raw,\n    LOWER(TYPE_INTER) AS workorder_type_clean\n  FROM {{ ref('type_inter_clean') }}\n),\n\nref_machine AS (\n  SELECT machine_raw, machine_clean\n  FROM (\n    SELECT \n      LOWER(TRIM(Machine_Brut)) AS machine_raw,\n      LOWER(TRIM(MACHINE)) AS machine_clean,\n      ROW_NUMBER() OVER(PARTITION BY LOWER(TRIM(Machine_Brut)) ORDER BY MACHINE) AS rn\n    FROM {{ ref('machines_clean') }}\n  )\n  WHERE rn = 1\n),\n\nref_cp_metropole AS (\n  SELECT Code_Postal, Metropole\n  FROM {{ ref('cp_metropole') }}\n),\n\nref_dpt_metropole AS (\n  SELECT Departement, Metropole\n  FROM {{ ref('dpt_metropole') }}\n),\n\nref_tarification AS (\n  SELECT\n    LOWER(CONCAT(\n      TYPE_INTER, '_',\n      MACHINE, '_',\n      MARQUE, '_',\n      Type_tarif, '_',\n      CAST(METROPOLE AS STRING)\n    )) AS key_tarif,\n    Montant,\n    PROD\n  FROM {{ ref('tarification_ref_clean') }}\n),\n\n-- ============================================================================\n-- 3. ENRICHMENT & NORMALIZATION\n-- ============================================================================\nworkorders_enriched AS (\n  SELECT\n    w.*,\n    COALESCE(ti.workorder_type_clean, w.workorder_type_raw) AS workorder_type_clean,\n    COALESCE(m.machine_clean, w.machine_raw) AS machine_clean,\n    COALESCE(cp.Metropole, dp.Metropole) AS metropole_city,\n    CASE\n      WHEN w.postal_code_site IS NULL THEN 1\n      WHEN cp.Code_Postal IS NOT NULL THEN 1\n      WHEN dp.Departement IS NOT NULL THEN 1\n      ELSE 0\n    END AS metropole,\n    ROW_NUMBER() OVER(PARTITION BY w.workorder_id ORDER BY w.date_done) AS rn\n  FROM base_workorders w\n  LEFT JOIN ref_type_inter ti ON w.workorder_type_raw = ti.workorder_type_raw\n  LEFT JOIN ref_machine m ON w.machine_raw = m.machine_raw\n  LEFT JOIN ref_cp_metropole cp ON w.postal_code_site = cp.Code_Postal\n  LEFT JOIN ref_dpt_metropole dp ON LEFT(w.postal_code_site, 2) = dp.Departement\n),\n\n-- ============================================================================\n-- 4. DEDUPLICATION & RECURRENCE CALCULATION\n-- ============================================================================\nworkorders_dedup AS (\n  SELECT\n    *,\n    CASE\n      WHEN postal_code_site IS NULL THEN 1\n      ELSE COUNT(*) OVER (PARTITION BY client_id, DATE(date_done))\n    END AS reccurence\n  FROM workorders_enriched\n),\n\n-- ============================================================================\n-- 5. PRICING TYPE DETERMINATION\n-- ============================================================================\nworkorders_with_tarif AS (\n  SELECT\n    *,\n    CASE\n      WHEN postal_code_site IS NULL THEN 'Tarif normal'\n      WHEN partner_name IN ('AUUM', 'FONTAINCO', 'TWYD', 'NESHU', 'NU', 'DAANTECH', 'EXPRESSO', 'DAAN') THEN\n        CASE\n          WHEN reccurence < 5 THEN 'Tarif normal'\n          WHEN reccurence BETWEEN 5 AND 20 THEN 'Remise niv1'\n          ELSE 'Remise niv2'\n        END\n      WHEN partner_name IN ('BRITA', 'FONTAINCO') THEN\n        CASE\n          WHEN reccurence < 2 THEN 'Tarif normal'\n          WHEN reccurence BETWEEN 2 AND 5 THEN 'Remise niv1'\n          ELSE 'Remise niv2'\n        END\n      ELSE 'Tarif normal'\n    END AS type_tarif\n  FROM workorders_dedup\n),\n\n-- ============================================================================\n-- 6. FINAL JOIN WITH TARIFF TABLE\n-- ============================================================================\nfinal_result AS (\n  SELECT\n    w.*,\n    t.Montant,\n    t.PROD,\n    LOWER(CONCAT(\n      w.workorder_type_clean, '_',\n      w.machine_clean, '_',\n      w.partner_name, '_',\n      w.type_tarif, '_',\n      CAST(w.metropole AS STRING)\n    )) AS key_tarif_used\n  FROM workorders_with_tarif w\n  LEFT JOIN ref_tarification t\n    ON LOWER(CONCAT(\n      w.workorder_type_clean, '_',\n      w.machine_clean, '_',\n      w.partner_name, '_',\n      w.type_tarif, '_',\n      CAST(w.metropole AS STRING)\n    )) = t.key_tarif\n)\n\n-- ============================================================================\n-- 7. FINAL SELECT (CLEAN OUTPUT)\n-- ============================================================================\nSELECT\n  demand_id,\n  workorder_id,\n  material_id,\n  site_id,\n  client_id,\n  technician_id,\n  manager_id,\n  demand_description,\n  demand_status,\n  demand_created_at,\n  demand_updated_at,\n  demand_category_name,\n  workorder_number,\n  workorder_category,\n  workorder_status,\n  workorder_technician_name,\n  workorder_date_creation,\n  workorder_motif_non_intervention,\n  workorder_detail_non_intervention,\n  date_planned,\n  date_started,\n  date_done,\n  partner_name,\n  client_code,\n  client_name,\n  client_category,\n  client_is_active,\n  site_code,\n  site_name,\n  site_address,\n  postal_code_site as site_postal_code,\n  material_serial_number,\n  workorder_type_raw,\n  machine_raw,\n\n  -- Renamed metrics and keys\n  workorder_type_clean,\n  machine_clean,\n  metropole             AS metropolitan,\n  metropole_city,\n  technician_equipe,\n  reccurence            AS recurrence_count,\n  type_tarif            AS pricing_type,\n  key_tarif_used        AS pricing_key_used,\n  a_facturer            AS to_invoice,\n  Montant               AS amount,\n  PROD                  AS prod_number,\n  CASE\n    WHEN Montant IS NOT NULL AND a_facturer = TRUE THEN 'VALIDATED'\n    WHEN Montant IS NULL AND a_facturer = TRUE THEN 'MISSING_TARIF'\n    ELSE 'NOT_BILLABLE'\n  END as billing_validation_status\n\nFROM final_result", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_yuman__demands_workorders_enriched", "package": null, "version": null}, {"name": "type_inter_clean", "package": null, "version": null}, {"name": "machines_clean", "package": null, "version": null}, {"name": "cp_metropole", "package": null, "version": null}, {"name": "dpt_metropole", "package": null, "version": null}, {"name": "tarification_ref_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.int_yuman__demands_workorders_enriched", "seed.dbt_warehouse.type_inter_clean", "seed.dbt_warehouse.machines_clean", "seed.dbt_warehouse.cp_metropole", "seed.dbt_warehouse.dpt_metropole", "seed.dbt_warehouse.tarification_ref_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/yuman/int_yuman__workorder_pricing.sql", "compiled": true, "compiled_code": "\n\n-- ============================================================================\n-- MODEL: int_yuman__workorder_pricing\n-- PURPOSE: Determine automatic pricing for technical interventions from Yuman\n-- AUTHOR: Cebrail AKSOY\n-- UPDATED: 2025-10-20 12:24:03.774653+00:00\n-- ============================================================================\n\nWITH \n-- ============================================================================\n-- 1. BASE DATA EXTRACTION\n-- ============================================================================\nbase_workorders AS (\n  SELECT\n    demand_id,\n    workorder_id,\n    material_id,\n    site_id,\n    client_id,\n    technician_id,\n    manager_id,\n    demand_description,\n    demand_status,\n    demand_created_at,\n    demand_updated_at,\n    demand_category_name,\n    workorder_number,\n    workorder_category,\n    workorder_status,\n    workorder_technician_name,\n    workorder_date_creation,\n    workorder_motif_non_intervention,\n    workorder_detail_non_intervention,\n    date_planned,\n    date_started,\n    date_done,\n    partner_name,\n    client_code,\n    client_name,\n    client_category,\n    client_is_active,\n    site_code,\n    site_name,\n    site_address,\n    site_postal_code,\n    material_serial_number,\n    technician_equipe,\n\n    -- Normalize workorder type\n    LOWER(COALESCE(\n      workorder_category,\n      CASE\n        WHEN workorder_type = 'Reactive' THEN 'curatif'\n        WHEN workorder_type = 'Preventive' THEN 'pr\u00e9ventif'\n        WHEN workorder_type = 'Installation' THEN 'installation'\n        ELSE workorder_type\n      END\n    )) AS workorder_type_raw,\n\n    -- Normalize machine category\n    LOWER(TRIM(CASE\n      WHEN material_category IS NOT NULL THEN material_category\n      WHEN LOWER(client_name) LIKE '%generique%' THEN CONCAT(partner_name, '_GENERIQUE')\n      WHEN partner_name = 'AUUM' THEN 'MGZ'\n      WHEN partner_name = 'TWYD' THEN 'FONTAINE TWYD'\n      WHEN partner_name = 'EXPRESSO' THEN 'MILANO'\n      WHEN partner_name = 'NESHU' THEN 'MILANO'\n      WHEN partner_name = 'BRITA' THEN 'viv t 85 c2-tg-i-cu ce'\n      WHEN partner_name = 'DAAN' THEN 'lave-vaisselle'\n      WHEN partner_name = 'NU' THEN 'frigo nu'\n      ELSE NULL  \n    END)) AS machine_raw,\n\n    -- Postal code correction\n    CASE\n      WHEN site_postal_code IS NULL OR site_postal_code = '00000' THEN (\n        SELECT code_postal\n        FROM UNNEST(REGEXP_EXTRACT_ALL(demand_description, r'\\b\\d{5}\\b')) AS code_postal\n        WHERE NOT REGEXP_CONTAINS(\n          LEFT(demand_description, STRPOS(demand_description, code_postal)-1),\n          r'(?i)N\u00b0\\s*$|interventions?\\s*$'\n        )\n        LIMIT 1\n      )\n      ELSE REGEXP_EXTRACT(site_address, r'\\b(\\d{5})\\b')\n    END AS postal_code_site,\n\n    -- Billing indicator\n    CASE\n      WHEN workorder_status = 'Closed'\n        AND workorder_motif_non_intervention IS NULL\n        AND workorder_detail_non_intervention IS NULL\n      THEN TRUE\n      ELSE FALSE\n    END AS a_facturer\n\n  FROM `evs-datastack-prod`.`prod_intermediate`.`int_yuman__demands_workorders_enriched`\n),\n\n-- ============================================================================\n-- 2. REFERENCE TABLES\n-- ============================================================================\nref_type_inter AS (\n  SELECT \n    LOWER(Type_intervention_Brut) AS workorder_type_raw,\n    LOWER(TYPE_INTER) AS workorder_type_clean\n  FROM `evs-datastack-prod`.`prod_reference`.`type_inter_clean`\n),\n\nref_machine AS (\n  SELECT machine_raw, machine_clean\n  FROM (\n    SELECT \n      LOWER(TRIM(Machine_Brut)) AS machine_raw,\n      LOWER(TRIM(MACHINE)) AS machine_clean,\n      ROW_NUMBER() OVER(PARTITION BY LOWER(TRIM(Machine_Brut)) ORDER BY MACHINE) AS rn\n    FROM `evs-datastack-prod`.`prod_reference`.`machines_clean`\n  )\n  WHERE rn = 1\n),\n\nref_cp_metropole AS (\n  SELECT Code_Postal, Metropole\n  FROM `evs-datastack-prod`.`prod_reference`.`cp_metropole`\n),\n\nref_dpt_metropole AS (\n  SELECT Departement, Metropole\n  FROM `evs-datastack-prod`.`prod_reference`.`dpt_metropole`\n),\n\nref_tarification AS (\n  SELECT\n    LOWER(CONCAT(\n      TYPE_INTER, '_',\n      MACHINE, '_',\n      MARQUE, '_',\n      Type_tarif, '_',\n      CAST(METROPOLE AS STRING)\n    )) AS key_tarif,\n    Montant,\n    PROD\n  FROM `evs-datastack-prod`.`prod_reference`.`tarification_ref_clean`\n),\n\n-- ============================================================================\n-- 3. ENRICHMENT & NORMALIZATION\n-- ============================================================================\nworkorders_enriched AS (\n  SELECT\n    w.*,\n    COALESCE(ti.workorder_type_clean, w.workorder_type_raw) AS workorder_type_clean,\n    COALESCE(m.machine_clean, w.machine_raw) AS machine_clean,\n    COALESCE(cp.Metropole, dp.Metropole) AS metropole_city,\n    CASE\n      WHEN w.postal_code_site IS NULL THEN 1\n      WHEN cp.Code_Postal IS NOT NULL THEN 1\n      WHEN dp.Departement IS NOT NULL THEN 1\n      ELSE 0\n    END AS metropole,\n    ROW_NUMBER() OVER(PARTITION BY w.workorder_id ORDER BY w.date_done) AS rn\n  FROM base_workorders w\n  LEFT JOIN ref_type_inter ti ON w.workorder_type_raw = ti.workorder_type_raw\n  LEFT JOIN ref_machine m ON w.machine_raw = m.machine_raw\n  LEFT JOIN ref_cp_metropole cp ON w.postal_code_site = cp.Code_Postal\n  LEFT JOIN ref_dpt_metropole dp ON LEFT(w.postal_code_site, 2) = dp.Departement\n),\n\n-- ============================================================================\n-- 4. DEDUPLICATION & RECURRENCE CALCULATION\n-- ============================================================================\nworkorders_dedup AS (\n  SELECT\n    *,\n    CASE\n      WHEN postal_code_site IS NULL THEN 1\n      ELSE COUNT(*) OVER (PARTITION BY client_id, DATE(date_done))\n    END AS reccurence\n  FROM workorders_enriched\n),\n\n-- ============================================================================\n-- 5. PRICING TYPE DETERMINATION\n-- ============================================================================\nworkorders_with_tarif AS (\n  SELECT\n    *,\n    CASE\n      WHEN postal_code_site IS NULL THEN 'Tarif normal'\n      WHEN partner_name IN ('AUUM', 'FONTAINCO', 'TWYD', 'NESHU', 'NU', 'DAANTECH', 'EXPRESSO', 'DAAN') THEN\n        CASE\n          WHEN reccurence < 5 THEN 'Tarif normal'\n          WHEN reccurence BETWEEN 5 AND 20 THEN 'Remise niv1'\n          ELSE 'Remise niv2'\n        END\n      WHEN partner_name IN ('BRITA', 'FONTAINCO') THEN\n        CASE\n          WHEN reccurence < 2 THEN 'Tarif normal'\n          WHEN reccurence BETWEEN 2 AND 5 THEN 'Remise niv1'\n          ELSE 'Remise niv2'\n        END\n      ELSE 'Tarif normal'\n    END AS type_tarif\n  FROM workorders_dedup\n),\n\n-- ============================================================================\n-- 6. FINAL JOIN WITH TARIFF TABLE\n-- ============================================================================\nfinal_result AS (\n  SELECT\n    w.*,\n    t.Montant,\n    t.PROD,\n    LOWER(CONCAT(\n      w.workorder_type_clean, '_',\n      w.machine_clean, '_',\n      w.partner_name, '_',\n      w.type_tarif, '_',\n      CAST(w.metropole AS STRING)\n    )) AS key_tarif_used\n  FROM workorders_with_tarif w\n  LEFT JOIN ref_tarification t\n    ON LOWER(CONCAT(\n      w.workorder_type_clean, '_',\n      w.machine_clean, '_',\n      w.partner_name, '_',\n      w.type_tarif, '_',\n      CAST(w.metropole AS STRING)\n    )) = t.key_tarif\n)\n\n-- ============================================================================\n-- 7. FINAL SELECT (CLEAN OUTPUT)\n-- ============================================================================\nSELECT\n  demand_id,\n  workorder_id,\n  material_id,\n  site_id,\n  client_id,\n  technician_id,\n  manager_id,\n  demand_description,\n  demand_status,\n  demand_created_at,\n  demand_updated_at,\n  demand_category_name,\n  workorder_number,\n  workorder_category,\n  workorder_status,\n  workorder_technician_name,\n  workorder_date_creation,\n  workorder_motif_non_intervention,\n  workorder_detail_non_intervention,\n  date_planned,\n  date_started,\n  date_done,\n  partner_name,\n  client_code,\n  client_name,\n  client_category,\n  client_is_active,\n  site_code,\n  site_name,\n  site_address,\n  postal_code_site as site_postal_code,\n  material_serial_number,\n  workorder_type_raw,\n  machine_raw,\n\n  -- Renamed metrics and keys\n  workorder_type_clean,\n  machine_clean,\n  metropole             AS metropolitan,\n  metropole_city,\n  technician_equipe,\n  reccurence            AS recurrence_count,\n  type_tarif            AS pricing_type,\n  key_tarif_used        AS pricing_key_used,\n  a_facturer            AS to_invoice,\n  Montant               AS amount,\n  PROD                  AS prod_number,\n  CASE\n    WHEN Montant IS NOT NULL AND a_facturer = TRUE THEN 'VALIDATED'\n    WHEN Montant IS NULL AND a_facturer = TRUE THEN 'MISSING_TARIF'\n    ELSE 'NOT_BILLABLE'\n  END as billing_validation_status\n\nFROM final_result", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.int_yuman__demands_workorders_enriched": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_yuman__demands_workorders_enriched", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/yuman/int_yuman__demands_workorders_enriched.sql", "original_file_path": "models/intermediate/yuman/int_yuman__demands_workorders_enriched.sql", "unique_id": "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "fqn": ["dbt_warehouse", "intermediate", "yuman", "int_yuman__demands_workorders_enriched"], "alias": "int_yuman__demands_workorders_enriched", "checksum": {"name": "sha256", "checksum": "8de554e6147c6b5704ea4501432f60edbb4335bd53caa7ef0137b7b4401ebde2"}, "config": {"enabled": true, "alias": "int_yuman__demands_workorders_enriched", "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["workorder_status", "demand_status", "partner_name"], "partition_by": {"data_type": "timestamp", "field": "demand_created_at"}}, "tags": ["intermediate"], "description": "Vue interm\u00e9diaire unifi\u00e9e regroupant les demandes d'intervention (workorder_demands) et les interventions (workorders).  Ce mod\u00e8le combine \u00e9galement les informations associ\u00e9es aux clients, sites, mat\u00e9riels,  cat\u00e9gories et utilisateurs.  Il sert de base de donn\u00e9es centrale pour les analyses et mod\u00e8les marts relatifs aux  op\u00e9rations de maintenance et d'intervention.\n", "columns": {"demand_id": {"name": "demand_id", "description": "Identifiant unique de la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_id": {"name": "workorder_id", "description": "Identifiant du bon de travail associ\u00e9 \u00e0 la demande (si existant).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "Identifiant du mat\u00e9riel concern\u00e9 par la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Identifiant du site client concern\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Identifiant du client concern\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Identifiant de l'utilisateur ayant cr\u00e9\u00e9 la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_description": {"name": "demand_description", "description": "Description textuelle de la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_status": {"name": "demand_status", "description": "Statut actuel de la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_reject_comment": {"name": "demand_reject_comment", "description": "Commentaire \u00e9ventuel de rejet de la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_created_at": {"name": "demand_created_at", "description": "Date et heure de cr\u00e9ation de la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_updated_at": {"name": "demand_updated_at", "description": "Date et heure de la derni\u00e8re mise \u00e0 jour de la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "demand_category_name": {"name": "demand_category_name", "description": "Nom de la cat\u00e9gorie associ\u00e9e \u00e0 la demande d'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "technician_id": {"name": "technician_id", "description": "Identifiant du technicien affect\u00e9 \u00e0 l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_number": {"name": "workorder_number", "description": "Num\u00e9ro unique du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_category": {"name": "workorder_category", "description": "Cat\u00e9gorie de l'intervention (pr\u00e9ventive, curative, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_status": {"name": "workorder_status", "description": "Statut actuel du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_title": {"name": "workorder_title", "description": "Titre ou r\u00e9sum\u00e9 de l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_description": {"name": "workorder_description", "description": "Description d\u00e9taill\u00e9e du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_report": {"name": "workorder_report", "description": "Compte-rendu ou rapport de l'intervention r\u00e9alis\u00e9e.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_technician_name": {"name": "workorder_technician_name", "description": "Nom du technicien affect\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_date_creation": {"name": "workorder_date_creation", "description": "Date de cr\u00e9ation du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_motif_non_intervention": {"name": "workorder_motif_non_intervention", "description": "Motif de non-intervention, si applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_detail_non_intervention": {"name": "workorder_detail_non_intervention", "description": "D\u00e9tails suppl\u00e9mentaires sur la non-intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_raison_mise_en_pause": {"name": "workorder_raison_mise_en_pause", "description": "Raison de mise en pause du bon de travail.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_explication_mise_en_pause": {"name": "workorder_explication_mise_en_pause", "description": "Explications d\u00e9taill\u00e9es concernant la mise en pause.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_necessite_intervenir": {"name": "workorder_necessite_intervenir", "description": "Indique si une intervention est n\u00e9cessaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workorder_si_non_pourquoi": {"name": "workorder_si_non_pourquoi", "description": "Justification en cas de non-intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_planned": {"name": "date_planned", "description": "Date planifi\u00e9e de l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_started": {"name": "date_started", "description": "Date de d\u00e9but r\u00e9el de l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_done": {"name": "date_done", "description": "Date de fin ou de cl\u00f4ture de l'intervention.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "partner_name": {"name": "partner_name", "description": "Nom du partenaire associ\u00e9 au client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code unique du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie ou segment du client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_is_active": {"name": "client_is_active", "description": "Indicateur pr\u00e9cisant si le client est actif.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_code": {"name": "site_code", "description": "Code unique du site client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_name": {"name": "site_name", "description": "Nom du site.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_address": {"name": "site_address", "description": "Adresse compl\u00e8te du site.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal du site.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_name": {"name": "material_name", "description": "Nom ou d\u00e9signation du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_brand": {"name": "material_brand", "description": "Marque ou fabricant du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_description": {"name": "material_description", "description": "Description ou caract\u00e9ristiques du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_in_service_date": {"name": "material_in_service_date", "description": "Date de mise en service du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_category": {"name": "material_category", "description": "Cat\u00e9gorie fonctionnelle du mat\u00e9riel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "Identifiant du manager associ\u00e9 \u00e0 l'utilisateur.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_name": {"name": "user_name", "description": "Nom de l'utilisateur ou du cr\u00e9ateur de la demande.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_type": {"name": "user_type", "description": "Type d'utilisateur (technicien, manager, client, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_manager_as_technician": {"name": "is_manager_as_technician", "description": "Indique si un manager agit en tant que technicien.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "technician_agency_stock": {"name": "technician_agency_stock", "description": "Agence de rattachement du technicien selon le mapping fourni de Vincent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/yuman/_yuman__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "alias": "int_yuman__demands_workorders_enriched", "partition_by": {"data_type": "timestamp", "field": "demand_created_at"}, "cluster_by": ["workorder_status", "demand_status", "partner_name"]}, "created_at": 1760962912.0105765, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_yuman__demands_workorders_enriched`", "raw_code": "{{ config(\n    materialized='table',\n    schema='intermediate',\n    alias='int_yuman__demands_workorders_enriched',\n    partition_by={\"field\": \"demand_created_at\", \"data_type\": \"timestamp\"},\n    cluster_by=['workorder_status','demand_status','partner_name']\n) }}\n\n-- =====================================================================\n-- Model: int_yuman__demands_workorders_enriched\n-- Description:\n--   Vue unifi\u00e9e des demandes d'intervention et des interventions\n--   enrichie avec les informations clients, sites, mat\u00e9riels et utilisateurs.\n--   Ce mod\u00e8le sert de base interm\u00e9diaire (int) entre les donn\u00e9es staging\n--   et les mod\u00e8les marts m\u00e9tier.\n-- =====================================================================\n\n-- =======================\n-- CTE 1 : Demandes d'intervention\n-- =======================\nwith workorder_demands as (\n    select\n        demand_id,\n        workorder_id,\n        material_id,\n        site_id,\n        client_id,\n        user_id,\n        demand_description,\n        demand_status,\n        demand_reject_comment,\n        created_at as demand_created_at,\n        updated_at as demand_updated_at,\n        demand_category_id\n    from {{ ref('stg_yuman__workorder_demands') }}\n),\n\n-- =======================\n-- CTE 2 : Cat\u00e9gories de demandes\n-- =======================\nworkorder_demands_categories as (\n    select\n        demand_category_id,\n        demand_category_name\n    from {{ ref('stg_yuman__workorder_demands_categories') }}\n),\n\n-- =======================\n-- CTE 3 : Interventions (workorders)\n-- =======================\nworkorders as (\n    select\n        workorder_id,\n        technician_id,\n        workorder_number,\n        workorder_category,\n        workorder_type,\n        workorder_status,\n        workorder_title,\n        workorder_description,\n        workorder_report,\n        workorder_technician_name,\n        workorder_date_creation,\n        workorder_motif_non_intervention,\n        workorder_detail_non_intervention,\n        workorder_raison_mise_en_pause,\n        workorder_explication_mise_en_pause,\n        workorder_necessite_intervenir,\n        workorder_si_non_pourquoi,\n        date_planned,\n        date_started,\n        date_done\n    from {{ ref('stg_yuman__workorders') }}\n),\n\n-- =======================\n-- CTE 4 : Clients\n-- =======================\nclients as (\n    select\n        client_id,\n        partner_name,\n        client_code,\n        client_name,\n        client_category,\n        is_active as client_is_active\n    from {{ ref('stg_yuman__clients') }}\n),\n\n-- =======================\n-- CTE 5 : Sites\n-- =======================\nsites as (\n    select\n        site_id,\n        site_code,\n        site_name,\n        site_address,\n        site_postal_code\n    from {{ ref('stg_yuman__sites') }}\n),\n\n-- =======================\n-- CTE 6 : Mat\u00e9riels\n-- =======================\nmaterials as (\n    select\n        material_id,\n        material_name,\n        material_serial_number,\n        material_brand,\n        material_description,\n        material_in_service_date,\n        category_id\n    from {{ ref('stg_yuman__materials') }}\n),\n\n-- =======================\n-- CTE 7 : Cat\u00e9gories de mat\u00e9riels\n-- =======================\nmaterials_categories as (\n    select\n        category_id,\n        category_name as material_category\n    from {{ ref('stg_yuman__materials_categories') }}\n),\n\n-- =======================\n-- CTE 8 : Utilisateurs\n-- =======================\nusers as (\n    select\n        user_id,\n        manager_id,\n        user_name,\n        user_type,\n        is_manager_as_technician\n    from {{ ref('stg_yuman__users') }}\n),\n\n-- =======================\n-- CTE 9 : Mapping techniciens - agences\n-- =======================\ntech_agence_mapping as (\n    select\n        nom,\n        prenom,\n        agence,\n        equipe\n    from {{ ref('tech_piece_agence_mapping') }}\n)\n\n-- =======================\n-- FINAL SELECT : Assemblage des donn\u00e9es\n-- =======================\nselect\n    -- === Demandes d'intervention ===\n    wd.demand_id,\n    wd.workorder_id,\n    wd.material_id,\n    wd.site_id,\n    wd.client_id,\n    wd.user_id,\n    wd.demand_description,\n    wd.demand_status,\n    wd.demand_reject_comment,\n    wd.demand_created_at,\n    wd.demand_updated_at,\n\n    -- === Cat\u00e9gorie demande ===\n    wdc.demand_category_name,\n\n    -- === Interventions ===\n    wo.technician_id,\n    wo.workorder_number,\n    wo.workorder_category,\n    wo.workorder_type,\n    wo.workorder_status,\n    wo.workorder_title,\n    wo.workorder_description,\n    wo.workorder_report,\n    wo.workorder_technician_name,\n    wo.workorder_date_creation,\n    wo.workorder_motif_non_intervention,\n    wo.workorder_detail_non_intervention,\n    wo.workorder_raison_mise_en_pause,\n    wo.workorder_explication_mise_en_pause,\n    wo.workorder_necessite_intervenir,\n    wo.workorder_si_non_pourquoi,\n    wo.date_planned,\n    wo.date_started,\n    wo.date_done,\n\n    -- === Clients ===\n    cl.partner_name,\n    cl.client_code,\n    cl.client_name,\n    cl.client_category,\n    cl.client_is_active,\n\n    -- === Sites ===\n    s.site_code,\n    s.site_name,\n    s.site_address,\n    s.site_postal_code,\n\n    -- === Mat\u00e9riels ===\n    m.material_name,\n    m.material_serial_number,\n    m.material_brand,\n    m.material_description,\n    m.material_in_service_date,\n\n    -- === Cat\u00e9gories de mat\u00e9riels ===\n    mc.material_category,\n\n    -- === Utilisateurs ===\n    u.manager_id,\n    u.user_name,\n    u.user_type,\n    u.is_manager_as_technician,\n\n    -- === Agence du technicien (via mapping) ===\n    tam.agence as technician_agency_stock,\n    tam.equipe as technician_equipe\n\nfrom workorder_demands wd\nleft join workorder_demands_categories wdc\n    on wd.demand_category_id = wdc.demand_category_id\n\nfull join workorders wo\n    on wd.workorder_id = wo.workorder_id\n\nleft join clients cl\n    on wd.client_id = cl.client_id\n\nleft join sites s\n    on wd.site_id = s.site_id\n\nleft join materials m\n    on wd.material_id = m.material_id\n\nleft join materials_categories mc\n    on m.category_id = mc.category_id\n\nleft join users u\n    on wd.user_id = u.user_id\n\nleft join tech_agence_mapping tam\n    on UPPER(TRIM(REGEXP_REPLACE(wo.workorder_technician_name, r'\\[INACTIF\\]\\s*', ''))) = \n       UPPER(TRIM(tam.nom || ' ' || tam.prenom))", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}, {"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__materials", "package": null, "version": null}, {"name": "stg_yuman__materials_categories", "package": null, "version": null}, {"name": "stg_yuman__users", "package": null, "version": null}, {"name": "tech_piece_agence_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands", "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "model.dbt_warehouse.stg_yuman__workorders", "model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories", "model.dbt_warehouse.stg_yuman__users", "seed.dbt_warehouse.tech_piece_agence_mapping"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/yuman/int_yuman__demands_workorders_enriched.sql", "compiled": true, "compiled_code": "\n\n-- =====================================================================\n-- Model: int_yuman__demands_workorders_enriched\n-- Description:\n--   Vue unifi\u00e9e des demandes d'intervention et des interventions\n--   enrichie avec les informations clients, sites, mat\u00e9riels et utilisateurs.\n--   Ce mod\u00e8le sert de base interm\u00e9diaire (int) entre les donn\u00e9es staging\n--   et les mod\u00e8les marts m\u00e9tier.\n-- =====================================================================\n\n-- =======================\n-- CTE 1 : Demandes d'intervention\n-- =======================\nwith workorder_demands as (\n    select\n        demand_id,\n        workorder_id,\n        material_id,\n        site_id,\n        client_id,\n        user_id,\n        demand_description,\n        demand_status,\n        demand_reject_comment,\n        created_at as demand_created_at,\n        updated_at as demand_updated_at,\n        demand_category_id\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n),\n\n-- =======================\n-- CTE 2 : Cat\u00e9gories de demandes\n-- =======================\nworkorder_demands_categories as (\n    select\n        demand_category_id,\n        demand_category_name\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories`\n),\n\n-- =======================\n-- CTE 3 : Interventions (workorders)\n-- =======================\nworkorders as (\n    select\n        workorder_id,\n        technician_id,\n        workorder_number,\n        workorder_category,\n        workorder_type,\n        workorder_status,\n        workorder_title,\n        workorder_description,\n        workorder_report,\n        workorder_technician_name,\n        workorder_date_creation,\n        workorder_motif_non_intervention,\n        workorder_detail_non_intervention,\n        workorder_raison_mise_en_pause,\n        workorder_explication_mise_en_pause,\n        workorder_necessite_intervenir,\n        workorder_si_non_pourquoi,\n        date_planned,\n        date_started,\n        date_done\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n),\n\n-- =======================\n-- CTE 4 : Clients\n-- =======================\nclients as (\n    select\n        client_id,\n        partner_name,\n        client_code,\n        client_name,\n        client_category,\n        is_active as client_is_active\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\n),\n\n-- =======================\n-- CTE 5 : Sites\n-- =======================\nsites as (\n    select\n        site_id,\n        site_code,\n        site_name,\n        site_address,\n        site_postal_code\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n),\n\n-- =======================\n-- CTE 6 : Mat\u00e9riels\n-- =======================\nmaterials as (\n    select\n        material_id,\n        material_name,\n        material_serial_number,\n        material_brand,\n        material_description,\n        material_in_service_date,\n        category_id\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\n),\n\n-- =======================\n-- CTE 7 : Cat\u00e9gories de mat\u00e9riels\n-- =======================\nmaterials_categories as (\n    select\n        category_id,\n        category_name as material_category\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories`\n),\n\n-- =======================\n-- CTE 8 : Utilisateurs\n-- =======================\nusers as (\n    select\n        user_id,\n        manager_id,\n        user_name,\n        user_type,\n        is_manager_as_technician\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__users`\n),\n\n-- =======================\n-- CTE 9 : Mapping techniciens - agences\n-- =======================\ntech_agence_mapping as (\n    select\n        nom,\n        prenom,\n        agence,\n        equipe\n    from `evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`\n)\n\n-- =======================\n-- FINAL SELECT : Assemblage des donn\u00e9es\n-- =======================\nselect\n    -- === Demandes d'intervention ===\n    wd.demand_id,\n    wd.workorder_id,\n    wd.material_id,\n    wd.site_id,\n    wd.client_id,\n    wd.user_id,\n    wd.demand_description,\n    wd.demand_status,\n    wd.demand_reject_comment,\n    wd.demand_created_at,\n    wd.demand_updated_at,\n\n    -- === Cat\u00e9gorie demande ===\n    wdc.demand_category_name,\n\n    -- === Interventions ===\n    wo.technician_id,\n    wo.workorder_number,\n    wo.workorder_category,\n    wo.workorder_type,\n    wo.workorder_status,\n    wo.workorder_title,\n    wo.workorder_description,\n    wo.workorder_report,\n    wo.workorder_technician_name,\n    wo.workorder_date_creation,\n    wo.workorder_motif_non_intervention,\n    wo.workorder_detail_non_intervention,\n    wo.workorder_raison_mise_en_pause,\n    wo.workorder_explication_mise_en_pause,\n    wo.workorder_necessite_intervenir,\n    wo.workorder_si_non_pourquoi,\n    wo.date_planned,\n    wo.date_started,\n    wo.date_done,\n\n    -- === Clients ===\n    cl.partner_name,\n    cl.client_code,\n    cl.client_name,\n    cl.client_category,\n    cl.client_is_active,\n\n    -- === Sites ===\n    s.site_code,\n    s.site_name,\n    s.site_address,\n    s.site_postal_code,\n\n    -- === Mat\u00e9riels ===\n    m.material_name,\n    m.material_serial_number,\n    m.material_brand,\n    m.material_description,\n    m.material_in_service_date,\n\n    -- === Cat\u00e9gories de mat\u00e9riels ===\n    mc.material_category,\n\n    -- === Utilisateurs ===\n    u.manager_id,\n    u.user_name,\n    u.user_type,\n    u.is_manager_as_technician,\n\n    -- === Agence du technicien (via mapping) ===\n    tam.agence as technician_agency_stock,\n    tam.equipe as technician_equipe\n\nfrom workorder_demands wd\nleft join workorder_demands_categories wdc\n    on wd.demand_category_id = wdc.demand_category_id\n\nfull join workorders wo\n    on wd.workorder_id = wo.workorder_id\n\nleft join clients cl\n    on wd.client_id = cl.client_id\n\nleft join sites s\n    on wd.site_id = s.site_id\n\nleft join materials m\n    on wd.material_id = m.material_id\n\nleft join materials_categories mc\n    on m.category_id = mc.category_id\n\nleft join users u\n    on wd.user_id = u.user_id\n\nleft join tech_agence_mapping tam\n    on UPPER(TRIM(REGEXP_REPLACE(wo.workorder_technician_name, r'\\[INACTIF\\]\\s*', ''))) = \n       UPPER(TRIM(tam.nom || ' ' || tam.prenom))", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__inventaire_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__inventaire_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__inventaire_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__inventaire_tasks"], "alias": "int_oracle_neshu__inventaire_tasks", "checksum": {"name": "sha256", "checksum": "59319f7bcb3d4687c4ada277f34f49feacc2bdc2bd4c44042ccdd73801e20a73"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d\"inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de d'inventaire. Filtr\u00e9e sur les t\u00e2ches de type INVENTAIRE (idtask_type=162)  avec statut FAIT/VALIDE/ANNULE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_id": {"name": "product_source_id", "description": "ID du produit source", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_type": {"name": "product_source_type", "description": "Type du produit source", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_code": {"name": "source_code", "description": "Code source du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code statut de la t\u00e2che (FAIT, VALIDE, ANNULE)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation du produit (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d\"inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation"}, "created_at": 1760962912.0291276, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id', 'task_status_code'],\n        description='Table interm\u00e9diaire des t\u00e2ches d\"inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation'\n    )\n}}\n\nwith inventaire_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n\n        -- Codes\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then r.code\n        end as source_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__product') }} p on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n\n    -- jointure company pour la source si COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- jointure resources pour la source si RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} r \n        on t.idproduct_source = r.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 162 -- INVENTAIRE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        thp.idproduct, thp.net_price,\n        cs.code, r.code, p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n\n    -- Codes\n    source_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom inventaire_base\nwhere source_code is not null", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__inventaire_tasks.sql", "compiled": true, "compiled_code": "\n\nwith inventaire_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n\n        -- Codes\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then r.code\n        end as source_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n\n    -- jointure company pour la source si COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- jointure resources pour la source si RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` r \n        on t.idproduct_source = r.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 162 -- INVENTAIRE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        thp.idproduct, thp.net_price,\n        cs.code, r.code, p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n\n    -- Codes\n    source_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom inventaire_base\nwhere source_code is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__telemetry_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__telemetry_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__telemetry_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__telemetry_tasks"], "alias": "int_oracle_neshu__telemetry_tasks", "checksum": {"name": "sha256", "checksum": "065c70d0af48be8b5624acc79436cb0c16bec04c689f23ac02e691efa79df05d"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "task_product_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "device_id", "product_id"], "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "description": "Table interm\u00e9diaire des t\u00e2ches de t\u00e9l\u00e9m\u00e9trie - Filtr\u00e9e sur type t\u00e9l\u00e9m\u00e9trie avec labels TELEM_SOURCE"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de t\u00e9l\u00e9m\u00e9trie. Filtr\u00e9e sur les t\u00e2ches de type t\u00e9l\u00e9m\u00e9trie (idtask_type=3)  avec statut FAIT/VALIDE et label TELEM_SOURCE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_id": {"name": "device_id", "description": "ID du device associ\u00e9 \u00e0 la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_id": {"name": "location_id", "description": "ID de la localisation de la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_code": {"name": "device_code", "description": "Code m\u00e9tier du device (num\u00e9ro de s\u00e9rie)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client de l'entreprise", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Nom de l'entreprise cliente", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_location_info": {"name": "task_location_info", "description": "Informations d'acc\u00e8s de la localisation de la t\u00e2che", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "telemetry_quantity": {"name": "telemetry_quantity", "description": "Quantit\u00e9 t\u00e9l\u00e9m\u00e9trique (toujours 1 par convention m\u00e9tier)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "unique_key": "task_product_id", "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "incremental_strategy": "merge", "cluster_by": ["company_id", "device_id", "product_id"], "description": "Table interm\u00e9diaire des t\u00e2ches de t\u00e9l\u00e9m\u00e9trie - Filtr\u00e9e sur type t\u00e9l\u00e9m\u00e9trie avec labels TELEM_SOURCE"}, "created_at": 1760962912.021013, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='task_product_id',\n        partition_by={'field': 'task_start_date', 'data_type': 'timestamp'},\n        incremental_strategy='merge',\n        cluster_by=['company_id', 'device_id', 'product_id'],\n        description='Table interm\u00e9diaire des t\u00e2ches de t\u00e9l\u00e9m\u00e9trie - Filtr\u00e9e sur type t\u00e9l\u00e9m\u00e9trie avec labels TELEM_SOURCE'\n    )\n}}\n\nwith telemetry_tasks as (\n    select\n        -- PK naturelle de task_has_product\n        thp.idtask_has_product as task_product_id,\n        \n        -- IDs business\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idlocation as location_id,\n        \n        -- Codes m\u00e9tier pour les jointures futures\n        d.code as device_code,\n        thp.code as product_code,\n        c.code as company_code,\n        \n        -- Donn\u00e9es m\u00e9tier\n        c.name as company_name,\n        l.access_info as task_location_info,\n        \n        -- Dates business\n        t.real_start_date as task_start_date,\n        \n        -- M\u00e9trique business\n        CAST(1 AS INT64) AS telemetry_quantity,  -- 1 T\u00e2che = 1 unit\u00e9 de t\u00e9l\u00e9m\u00e9trie\n        \n        -- Timestamps techniques pour l'incr\u00e9ment\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n        \n    from {{ ref('stg_oracle_neshu__task') }} t\n    \n    -- Jointure obligatoire pour r\u00e9cup\u00e9rer les produits\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp\n        on thp.idtask = t.idtask\n    \n    -- Jointures pour enrichissement\n    left join {{ ref('stg_oracle_neshu__company') }} c\n        on c.idcompany = t.idcompany_peer\n        \n    left join {{ ref('stg_oracle_neshu__device') }} d\n        on d.iddevice = t.iddevice\n        \n    left join {{ ref('stg_oracle_neshu__location') }} l\n        on l.idlocation = t.idlocation\n    \n    -- Jointures pour le filtrage sur labels t\u00e9l\u00e9m\u00e9trie\n    inner join {{ ref('stg_oracle_neshu__label_has_task') }} lht\n        on t.idtask = lht.idtask\n        \n    inner join {{ ref('stg_oracle_neshu__label') }} la\n        on lht.idlabel = la.idlabel\n        \n    inner join {{ ref('stg_oracle_neshu__label_family') }} lf\n        on la.idlabel_family = lf.idlabel_family\n    \n    where 1=1\n        -- Filtres business critiques\n        and t.idtask_status in (1, 4)  -- FAIT et VALIDE uniquement\n        and t.code_status_record = '1'   -- Enregistrement actif (string)\n        and t.idtask_type = 3           -- Type t\u00e9l\u00e9m\u00e9trie\n        and lf.code = 'TELEM_SOURCE'    -- Label famille t\u00e9l\u00e9m\u00e9trie source\n        \n        -- Filtre qualit\u00e9 donn\u00e9es\n        and t.real_start_date is not null  -- \u00c9viter les t\u00e2ches sans date de d\u00e9but\n)\n\nselect * from telemetry_tasks\n\n{% if is_incremental() %}\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from {{ this }}\n    )\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__telemetry_tasks.sql", "compiled": true, "compiled_code": "\n\nwith telemetry_tasks as (\n    select\n        -- PK naturelle de task_has_product\n        thp.idtask_has_product as task_product_id,\n        \n        -- IDs business\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idlocation as location_id,\n        \n        -- Codes m\u00e9tier pour les jointures futures\n        d.code as device_code,\n        thp.code as product_code,\n        c.code as company_code,\n        \n        -- Donn\u00e9es m\u00e9tier\n        c.name as company_name,\n        l.access_info as task_location_info,\n        \n        -- Dates business\n        t.real_start_date as task_start_date,\n        \n        -- M\u00e9trique business\n        CAST(1 AS INT64) AS telemetry_quantity,  -- 1 T\u00e2che = 1 unit\u00e9 de t\u00e9l\u00e9m\u00e9trie\n        \n        -- Timestamps techniques pour l'incr\u00e9ment\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n        \n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    \n    -- Jointure obligatoire pour r\u00e9cup\u00e9rer les produits\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp\n        on thp.idtask = t.idtask\n    \n    -- Jointures pour enrichissement\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c\n        on c.idcompany = t.idcompany_peer\n        \n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device` d\n        on d.iddevice = t.iddevice\n        \n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` l\n        on l.idlocation = t.idlocation\n    \n    -- Jointures pour le filtrage sur labels t\u00e9l\u00e9m\u00e9trie\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task` lht\n        on t.idtask = lht.idtask\n        \n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` la\n        on lht.idlabel = la.idlabel\n        \n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf\n        on la.idlabel_family = lf.idlabel_family\n    \n    where 1=1\n        -- Filtres business critiques\n        and t.idtask_status in (1, 4)  -- FAIT et VALIDE uniquement\n        and t.code_status_record = '1'   -- Enregistrement actif (string)\n        and t.idtask_type = 3           -- Type t\u00e9l\u00e9m\u00e9trie\n        and lf.code = 'TELEM_SOURCE'    -- Label famille t\u00e9l\u00e9m\u00e9trie source\n        \n        -- Filtre qualit\u00e9 donn\u00e9es\n        and t.real_start_date is not null  -- \u00c9viter les t\u00e2ches sans date de d\u00e9but\n)\n\nselect * from telemetry_tasks\n\n\n    where updated_at >= (\n        select max(updated_at) - interval 1 day\n        from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__livraison_interne_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__livraison_interne_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__livraison_interne_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__livraison_interne_tasks"], "alias": "int_oracle_neshu__livraison_interne_tasks", "checksum": {"name": "sha256", "checksum": "1d2b87d607850af4f92024094f532d2abfdafe1fd3cd1d4b71e0af5f66899980"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des livraisons internes - avec enrichissement produit, source, destination, quantit\u00e9 et valorisation"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de Livraison interne. Filtr\u00e9e sur les t\u00e2ches de type LIVRAISON INTERNE (idtask_type=161)  avec statut FAIT/VALIDE/ANNULE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_id": {"name": "product_source_id", "description": "ID du produit source", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_type": {"name": "product_source_type", "description": "Type du produit source", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_id": {"name": "product_destination_id", "description": "ID du produit de destination", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_type": {"name": "product_destination_type", "description": "Type du produit de destination", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "destination_code": {"name": "destination_code", "description": "Code de destination du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_code": {"name": "source_code", "description": "Code source du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code statut de la t\u00e2che (FAIT, VALIDE, ANNULE)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation du produit (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des livraisons internes - avec enrichissement produit, source, destination, quantit\u00e9 et valorisation"}, "created_at": 1760962912.0358896, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id','task_status_code'],\n        description='Table interm\u00e9diaire des livraisons internes - avec enrichissement produit, source, destination, quantit\u00e9 et valorisation'\n    )\n}}\n\nwith mouvement_interne_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes (source et destination)\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then rs.code\n        end as source_code,\n\n        case \n            when t.type_product_destination = 'COMPANY' then cd.code\n            when t.type_product_destination = 'RESOURCES' then rd.code\n        end as destination_code,\n\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp \n        on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__product') }} p \n        on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Source = COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- Source = RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} rs \n        on t.idproduct_source = rs.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    -- Destination = COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cd \n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    -- Destination = RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} rd \n        on t.idproduct_destination = rd.idresources\n       and t.type_product_destination = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 161 -- LIVRAISONS INTERNE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        cs.code, rs.code, cd.code, rd.code,\n        p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    source_code,\n    destination_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom mouvement_interne_base\nwhere source_code is not null\n  and destination_code is not null", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__livraison_interne_tasks.sql", "compiled": true, "compiled_code": "\n\nwith mouvement_interne_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes (source et destination)\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then rs.code\n        end as source_code,\n\n        case \n            when t.type_product_destination = 'COMPANY' then cd.code\n            when t.type_product_destination = 'RESOURCES' then rd.code\n        end as destination_code,\n\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp \n        on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p \n        on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Source = COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- Source = RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` rs \n        on t.idproduct_source = rs.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    -- Destination = COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cd \n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    -- Destination = RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` rd \n        on t.idproduct_destination = rd.idresources\n       and t.type_product_destination = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 161 -- LIVRAISONS INTERNE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        cs.code, rs.code, cd.code, rd.code,\n        p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    source_code,\n    destination_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom mouvement_interne_base\nwhere source_code is not null\n  and destination_code is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__chargement_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__chargement_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__chargement_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__chargement_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__chargement_tasks"], "alias": "int_oracle_neshu__chargement_tasks", "checksum": {"name": "sha256", "checksum": "8f7b1c554ba68eb3544a854bbe444e155dc26e0dac890f44e266507b6d29f6fa"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "task_product_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "device_id", "product_id", "task_status_code"], "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "description": "Table interm\u00e9diaire des t\u00e2ches de chargement - avec enrichissement ressources (roadman, v\u00e9hicule)"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de chargement machine. Filtr\u00e9e sur les t\u00e2ches de type CHARGEMENT (idtask_type=13)  avec statut FAIT/VALIDE/ANNULE et label du chargement (LOADING / REMOVING).\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "roadman_id": {"name": "roadman_id", "description": "ID du roadman associ\u00e9 \u00e0 la t\u00e2che, lien avec la table RESOURCES", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vehicle_id": {"name": "vehicle_id", "description": "ID du v\u00e9hicule associ\u00e9 \u00e0 la t\u00e2che, lien avec la table RESOURCES", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_id": {"name": "location_id", "description": "ID de la localisation de la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_code": {"name": "device_code", "description": "Code m\u00e9tier du device (num\u00e9ro de s\u00e9rie)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client de l'entreprise", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_quantity": {"name": "load_quantity", "description": "Quantit\u00e9 produit charg\u00e9e ou retir\u00e9e", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_valuation": {"name": "load_valuation", "description": "Valorisation du chargement (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "unique_key": "task_product_id", "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "incremental_strategy": "merge", "cluster_by": ["company_id", "device_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches de chargement - avec enrichissement ressources (roadman, v\u00e9hicule)"}, "created_at": 1760962912.024316, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='task_product_id',\n        partition_by={'field': 'task_start_date', 'data_type': 'timestamp'},\n        incremental_strategy='merge',\n        cluster_by=['company_id', 'device_id', 'product_id','task_status_code'],\n        description='Table interm\u00e9diaire des t\u00e2ches de chargement - avec enrichissement ressources (roadman, v\u00e9hicule)'\n    )\n}}\n\nwith chargement_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        t.idlocation as location_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n        thp.idproduct as product_id,\n\n        -- Codes\n        c.code as company_code,\n        d.code as device_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as load_type_code,\n\n        -- Informations m\u00e9tier\n        l.access_info as task_location_info,\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as load_quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) * thp.net_price as load_valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__company') }} c on c.idcompany = t.idcompany_peer\n    left join {{ ref('stg_oracle_neshu__device') }} d on d.iddevice = t.iddevice\n    left join {{ ref('stg_oracle_neshu__product') }} p on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__location') }} l on l.idlocation = t.idlocation\n    left join {{ ref('stg_oracle_neshu__label_has_task') }} lht on t.idtask = lht.idtask\n    left join {{ ref('stg_oracle_neshu__label') }} la on lht.idlabel = la.idlabel\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 13 -- CHARGEMENT MACHINE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.iddevice, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source, t.idlocation,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        c.code, d.code, p.code,\n        ts.code, la.code,\n        l.access_info, t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n),\n\nressources_roadman as (\n    select \n        thr.idtask, \n        min(r.idresources) as roadman_id,\n        min(r.code) as roadman_code\n    from {{ ref('stg_oracle_neshu__task_has_resources') }} thr\n    join {{ ref('stg_oracle_neshu__resources') }} r on r.idresources = thr.idresources\n    where r.idresources_type = 2\n    group by thr.idtask\n),\n\nressources_vehicle as (\n    select \n        thr.idtask, \n        min(r.idresources) as vehicle_id,\n        min(r.code) as vehicle_code\n    from {{ ref('stg_oracle_neshu__task_has_resources') }} thr\n    join {{ ref('stg_oracle_neshu__resources') }} r on r.idresources = thr.idresources\n    where r.idresources_type = 3\n    group by thr.idtask\n),\n\nchargement_enrichi as (\n    select \n        cb.*,\n        rr.roadman_id,\n        rr.roadman_code,\n        rv.vehicle_id,\n        rv.vehicle_code\n    from chargement_base cb\n    left join ressources_roadman rr on cb.task_id = rr.idtask\n    left join ressources_vehicle rv on cb.task_id = rv.idtask\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    device_id,\n    company_id,\n    product_id,\n    location_id,\n    product_source_id,\n    product_destination_id,\n    roadman_id,\n    vehicle_id,\n\n    -- Codes\n    company_code,\n    device_code,\n    product_code,\n    roadman_code,\n    vehicle_code,\n    task_status_code,\n    load_type_code,\n\n    -- Infos m\u00e9tier\n    product_source_type,\n    product_destination_type,\n    task_location_info,\n    task_start_date,\n\n    -- M\u00e9triques\n    load_quantity,\n    load_valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom chargement_enrichi\n\n{% if is_incremental() %}\n  where updated_at >= (\n      select max(updated_at) - interval 1 day\n      from {{ this }}\n  )\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__chargement_tasks.sql", "compiled": true, "compiled_code": "\n\nwith chargement_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        t.idlocation as location_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n        thp.idproduct as product_id,\n\n        -- Codes\n        c.code as company_code,\n        d.code as device_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as load_type_code,\n\n        -- Informations m\u00e9tier\n        l.access_info as task_location_info,\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as load_quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) * thp.net_price as load_valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c on c.idcompany = t.idcompany_peer\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device` d on d.iddevice = t.iddevice\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` l on l.idlocation = t.idlocation\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task` lht on t.idtask = lht.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` la on lht.idlabel = la.idlabel\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 13 -- CHARGEMENT MACHINE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.iddevice, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source, t.idlocation,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        c.code, d.code, p.code,\n        ts.code, la.code,\n        l.access_info, t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n),\n\nressources_roadman as (\n    select \n        thr.idtask, \n        min(r.idresources) as roadman_id,\n        min(r.code) as roadman_code\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources` thr\n    join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` r on r.idresources = thr.idresources\n    where r.idresources_type = 2\n    group by thr.idtask\n),\n\nressources_vehicle as (\n    select \n        thr.idtask, \n        min(r.idresources) as vehicle_id,\n        min(r.code) as vehicle_code\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources` thr\n    join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` r on r.idresources = thr.idresources\n    where r.idresources_type = 3\n    group by thr.idtask\n),\n\nchargement_enrichi as (\n    select \n        cb.*,\n        rr.roadman_id,\n        rr.roadman_code,\n        rv.vehicle_id,\n        rv.vehicle_code\n    from chargement_base cb\n    left join ressources_roadman rr on cb.task_id = rr.idtask\n    left join ressources_vehicle rv on cb.task_id = rv.idtask\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    device_id,\n    company_id,\n    product_id,\n    location_id,\n    product_source_id,\n    product_destination_id,\n    roadman_id,\n    vehicle_id,\n\n    -- Codes\n    company_code,\n    device_code,\n    product_code,\n    roadman_code,\n    vehicle_code,\n    task_status_code,\n    load_type_code,\n\n    -- Infos m\u00e9tier\n    product_source_type,\n    product_destination_type,\n    task_location_info,\n    task_start_date,\n\n    -- M\u00e9triques\n    load_quantity,\n    load_valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom chargement_enrichi\n\n\n  where updated_at >= (\n      select max(updated_at) - interval 1 day\n      from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\n  )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__appro_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__appro_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__appro_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__appro_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__appro_tasks"], "alias": "int_oracle_neshu__appro_tasks", "checksum": {"name": "sha256", "checksum": "23c4800be5ac8867cac5da1c102e29ba421a5768ca24d72aec06263bf9761d2c"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "task_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "device_id", "task_status_code"], "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "description": "Table interm\u00e9diaire des passages approvisionneurs - avec enrichissement"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des passages approvisionneurs. Filtr\u00e9e sur les t\u00e2ches de type PASSAGE APPRO (idtask_type=32)  avec statut actif (code_status_record=1) et enrichie avec ressources (roadman, v\u00e9hicule).\n", "columns": {"task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_id": {"name": "device_id", "description": "ID du device associ\u00e9 \u00e0 la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_id": {"name": "product_source_id", "description": "ID du produit source de la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_id": {"name": "product_destination_id", "description": "ID du produit destination de la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "roadman_id": {"name": "roadman_id", "description": "ID du roadman associ\u00e9 \u00e0 la t\u00e2che (resources type=2)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vehicle_id": {"name": "vehicle_id", "description": "ID du v\u00e9hicule associ\u00e9 \u00e0 la t\u00e2che (resources type=3)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client de l'entreprise (company.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "roadman_code": {"name": "roadman_code", "description": "Code m\u00e9tier du roadman (resources.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vehicle_code": {"name": "vehicle_code", "description": "Code m\u00e9tier du v\u00e9hicule (resources.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code du statut de la t\u00e2che (task_status.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_type": {"name": "product_source_type", "description": "Type de la source produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_type": {"name": "product_destination_type", "description": "Type de la destination produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_location_info": {"name": "task_location_info", "description": "Informations de localisation de la t\u00e2che", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure de d\u00e9but r\u00e9el du passage appro", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_end_date": {"name": "task_end_date", "description": "Date et heure de fin r\u00e9el du passage appro", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "unique_key": "task_id", "partition_by": {"field": "task_start_date", "data_type": "timestamp"}, "incremental_strategy": "merge", "cluster_by": ["company_id", "device_id", "task_status_code"], "description": "Table interm\u00e9diaire des passages approvisionneurs - avec enrichissement"}, "created_at": 1760962912.0385516, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='task_id',\n        partition_by={'field': 'task_start_date', 'data_type': 'timestamp'},\n        incremental_strategy='merge',\n        cluster_by=['company_id', 'device_id', 'task_status_code'],\n        description='Table interm\u00e9diaire des passages approvisionneurs - avec enrichissement'\n    )\n}}\n\nwith passage_appro_base as (\n\n    select\n        -- Identifiants\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        c.code as company_code,\n\n        -- Infos m\u00e9tier\n        l.access_info as task_location_info,\n        t.real_start_date as task_start_date,\n        t.real_end_date as task_end_date,\n\n        -- Status\n        ts.code as task_status_code,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    left join {{ ref('stg_oracle_neshu__company') }} c on c.idcompany = t.idcompany_peer\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n    left join {{ ref('stg_oracle_neshu__location') }} l on l.idlocation = t.idlocation\n\n    where 1=1\n        and t.idtask_type = 32 -- PASSAGE APPROVISIONNEURS\n        and t.code_status_record = '1'\n        and t.real_start_date is not null\n\n    group by\n        t.idtask, t.iddevice, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        ts.code, c.code, l.access_info,\n        t.real_start_date, t.real_end_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_id,\n    device_id,\n    company_id,\n    product_source_id,\n    product_destination_id,\n\n    -- Codes\n    company_code,\n\n    -- Infos m\u00e9tier\n    product_source_type,\n    product_destination_type,\n    task_location_info,\n    task_status_code,\n    task_start_date,\n    task_end_date,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom passage_appro_base\n\n{% if is_incremental() %}\n  where updated_at >= (\n      select max(updated_at) - interval 1 day\n      from {{ this }}\n  )\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__appro_tasks.sql", "compiled": true, "compiled_code": "\n\nwith passage_appro_base as (\n\n    select\n        -- Identifiants\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        c.code as company_code,\n\n        -- Infos m\u00e9tier\n        l.access_info as task_location_info,\n        t.real_start_date as task_start_date,\n        t.real_end_date as task_end_date,\n\n        -- Status\n        ts.code as task_status_code,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c on c.idcompany = t.idcompany_peer\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` l on l.idlocation = t.idlocation\n\n    where 1=1\n        and t.idtask_type = 32 -- PASSAGE APPROVISIONNEURS\n        and t.code_status_record = '1'\n        and t.real_start_date is not null\n\n    group by\n        t.idtask, t.iddevice, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        ts.code, c.code, l.access_info,\n        t.real_start_date, t.real_end_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_id,\n    device_id,\n    company_id,\n    product_source_id,\n    product_destination_id,\n\n    -- Codes\n    company_code,\n\n    -- Infos m\u00e9tier\n    product_source_type,\n    product_destination_type,\n    task_location_info,\n    task_status_code,\n    task_start_date,\n    task_end_date,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom passage_appro_base\n\n\n  where updated_at >= (\n      select max(updated_at) - interval 1 day\n      from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\n  )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__commande_interne": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__commande_interne", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__commande_interne.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__commande_interne.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__commande_interne"], "alias": "int_oracle_neshu__commande_interne", "checksum": {"name": "sha256", "checksum": "b496d3550c124469b5c067f8b14cbab91c4c6f61d03afda1072b6aa5f7e8b175"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des mouvements internes (livraisons internes) avec source et destination enrichies. \\\n    D\u00e9dupliqu\u00e9e sur task_product_id avec priorit\u00e9 au label_code = LIVRE."}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des mouvements internes (commandes internes). Filtr\u00e9e sur les t\u00e2ches de type LIVRAISON INTERNE (idtask_type = 132) avec statut FAIT / VALIDE / ANNULE, et labels de la famille STATUT_LIVRAISON. Contient les m\u00e9triques de quantit\u00e9 et valorisation, avec les codes source et destination (entreprise ou ressource) associ\u00e9s.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation t\u00e2che-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "Identifiant de la t\u00e2che (r\u00e9f\u00e9rence EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "Identifiant de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Identifiant du produit concern\u00e9", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_id": {"name": "product_source_id", "description": "Identifiant du produit source (COMPANY ou RESOURCES)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_type": {"name": "product_source_type", "description": "Type du produit source (COMPANY ou RESOURCES)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_id": {"name": "product_destination_id", "description": "Identifiant du produit destination (COMPANY ou RESOURCES)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_type": {"name": "product_destination_type", "description": "Type du produit destination (COMPANY ou RESOURCES)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_code": {"name": "source_code", "description": "Code de la source du mouvement (entreprise ou ressource)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "destination_code": {"name": "destination_code", "description": "Code de la destination du mouvement (entreprise ou ressource)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit (r\u00e9f\u00e9rence EVS.PRODUCT)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code statut de la t\u00e2che (FAIT, VALIDE, ANNULE)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "label_code": {"name": "label_code", "description": "Code du label associ\u00e9 \u00e0 la t\u00e2che (famille STATUT_LIVRAISON)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de d\u00e9but de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 totale du produit transf\u00e9r\u00e9 (avec coefficients unitaires)", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation totale (quantit\u00e9 * prix unitaire net)", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re mise \u00e0 jour de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle (suivi de synchronisation)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "description": "Table interm\u00e9diaire des mouvements internes (livraisons internes) avec source et destination enrichies. \\\n    D\u00e9dupliqu\u00e9e sur task_product_id avec priorit\u00e9 au label_code = LIVRE.", "cluster_by": ["company_id", "product_id", "task_status_code"]}, "created_at": 1760962912.046451, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`", "raw_code": "{{ config(\n    materialized='table',\n    description='Table interm\u00e9diaire des mouvements internes (livraisons internes) avec source et destination enrichies. \\\n    D\u00e9dupliqu\u00e9e sur task_product_id avec priorit\u00e9 au label_code = LIVRE.',\n    cluster_by=['company_id', 'product_id', 'task_status_code']\n) }}\n\nwith commande_interne_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes (source et destination)\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then rs.code\n        end as source_code,\n        case \n            when t.type_product_destination = 'COMPANY' then cd.code\n            when t.type_product_destination = 'RESOURCES' then rd.code\n        end as destination_code,\n\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as label_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp \n        on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__product') }} p \n        on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Source = COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- Source = RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} rs \n        on t.idproduct_source = rs.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    -- Destination = COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cd \n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    -- Destination = RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} rd \n        on t.idproduct_destination = rd.idresources\n       and t.type_product_destination = 'RESOURCES'\n\n    -- Jointures pour le filtrage sur labels t\u00e9l\u00e9m\u00e9trie\n    left join {{ ref('stg_oracle_neshu__label_has_task') }} lht\n        on t.idtask = lht.idtask   \n    left join {{ ref('stg_oracle_neshu__label') }} la\n        on lht.idlabel = la.idlabel  \n    left join {{ ref('stg_oracle_neshu__label_family') }} lf\n        on la.idlabel_family = lf.idlabel_family\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 132  -- LIVRAISON INTERNE\n        and lf.code = 'STATUT_LIVRAISON'\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, \n        t.idtask, \n        t.idcompany_peer,\n        thp.idproduct, \n        thp.net_price,\n        t.idproduct_source, \n        t.type_product_source,\n        t.idproduct_destination, \n        t.type_product_destination,\n        cs.code, rs.code, cd.code, rd.code,\n        p.code, ts.code, la.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n),\n\ndedup as (\n    select\n        *,\n        row_number() over (\n            partition by task_product_id\n            order by \n                case when label_code = 'LIVRE' then 1 else 2 end\n        ) as rn\n    from commande_interne_base\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    source_code,\n    destination_code,\n    product_code,\n    task_status_code,\n    label_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom dedup\nwhere rn = 1\n  and source_code is not null\n  and destination_code is not null", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__commande_interne.sql", "compiled": true, "compiled_code": "\n\nwith commande_interne_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes (source et destination)\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then rs.code\n        end as source_code,\n        case \n            when t.type_product_destination = 'COMPANY' then cd.code\n            when t.type_product_destination = 'RESOURCES' then rd.code\n        end as destination_code,\n\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as label_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp \n        on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p \n        on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Source = COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- Source = RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` rs \n        on t.idproduct_source = rs.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    -- Destination = COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cd \n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    -- Destination = RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` rd \n        on t.idproduct_destination = rd.idresources\n       and t.type_product_destination = 'RESOURCES'\n\n    -- Jointures pour le filtrage sur labels t\u00e9l\u00e9m\u00e9trie\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task` lht\n        on t.idtask = lht.idtask   \n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` la\n        on lht.idlabel = la.idlabel  \n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf\n        on la.idlabel_family = lf.idlabel_family\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 132  -- LIVRAISON INTERNE\n        and lf.code = 'STATUT_LIVRAISON'\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, \n        t.idtask, \n        t.idcompany_peer,\n        thp.idproduct, \n        thp.net_price,\n        t.idproduct_source, \n        t.type_product_source,\n        t.idproduct_destination, \n        t.type_product_destination,\n        cs.code, rs.code, cd.code, rd.code,\n        p.code, ts.code, la.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n),\n\ndedup as (\n    select\n        *,\n        row_number() over (\n            partition by task_product_id\n            order by \n                case when label_code = 'LIVRE' then 1 else 2 end\n        ) as rn\n    from commande_interne_base\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    source_code,\n    destination_code,\n    product_code,\n    task_status_code,\n    label_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom dedup\nwhere rn = 1\n  and source_code is not null\n  and destination_code is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__reception_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__reception_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__reception_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__reception_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__reception_tasks"], "alias": "int_oracle_neshu__reception_tasks", "checksum": {"name": "sha256", "checksum": "2df8a3977ae44718f6d096079f60f91bd7e78589c3fb286740b91c93147bb51f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches de bon de r\u00e9ception - avec enrichissement produit, destination, quantit\u00e9 et valorisation"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de RECEPTION. Filtr\u00e9e sur les t\u00e2ches de type RECEPTION (idtask_type=121)  avec statut FAIT/VALIDE/ANNULE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_id": {"name": "product_destination_id", "description": "ID du produit de destination", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_destination_type": {"name": "product_destination_type", "description": "Type du produit de destination", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "destination_code": {"name": "destination_code", "description": "Code de destination du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code statut de la t\u00e2che (FAIT, VALIDE, ANNULE)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation du produit (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches de bon de r\u00e9ception - avec enrichissement produit, destination, quantit\u00e9 et valorisation"}, "created_at": 1760962912.0338414, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id','task_status_code'],\n        description='Table interm\u00e9diaire des t\u00e2ches de bon de r\u00e9ception - avec enrichissement produit, destination, quantit\u00e9 et valorisation'\n    )\n}}\n\nwith reception_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        cd.code as destination_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp \n        on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__product') }} p \n        on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Destination = COMPANY uniquement\n    left join {{ ref('stg_oracle_neshu__company') }} cd\n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 121 -- BON RECEPTION\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        cd.code,\n        p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    destination_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom reception_base", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__reception_tasks.sql", "compiled": true, "compiled_code": "\n\nwith reception_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        cd.code as destination_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp \n        on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p \n        on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts \n        on t.idtask_status = ts.idtask_status\n\n    -- Destination = COMPANY uniquement\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cd\n        on t.idproduct_destination = cd.idcompany \n       and t.type_product_destination = 'COMPANY'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 121 -- BON RECEPTION\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        cd.code,\n        p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_destination_id,\n    product_destination_type,\n\n    -- Codes\n    destination_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom reception_base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__livraison_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__livraison_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__livraison_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__livraison_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__livraison_tasks"], "alias": "int_oracle_neshu__livraison_tasks", "checksum": {"name": "sha256", "checksum": "17c5e16468cabf08b134be65e4713e7840525d63cc74797444b633408a5cb150"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches de livraison - avec enrichissement produit, client, quantit\u00e9 et valorisation"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de bon de livraison. Filtr\u00e9e sur les t\u00e2ches de type BON LIVRAISON (idtask_type=101)  avec statut FAIT/VALIDE/ANNULE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client de l'entreprise", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation du produit (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches de livraison - avec enrichissement produit, client, quantit\u00e9 et valorisation"}, "created_at": 1760962912.0262861, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id','task_status_code'],\n        description='Table interm\u00e9diaire des t\u00e2ches de livraison - avec enrichissement produit, client, quantit\u00e9 et valorisation'\n    )\n}}\n\nwith livraison_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        c.code as company_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__company') }} c on c.idcompany = t.idcompany_peer\n    left join {{ ref('stg_oracle_neshu__product') }} p on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 101 -- BON LIVRAISON\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        c.code, p.code,\n        ts.code, t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_destination_id,\n    product_source_type,\n    product_destination_type,\n\n    -- Codes\n    company_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom livraison_base", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__livraison_tasks.sql", "compiled": true, "compiled_code": "\n\nwith livraison_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.idproduct_destination as product_destination_id,\n        t.type_product_source as product_source_type,\n        t.type_product_destination as product_destination_type,\n\n        -- Codes\n        c.code as company_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c on c.idcompany = t.idcompany_peer\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 101 -- BON LIVRAISON\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        t.idproduct_destination, t.type_product_destination,\n        thp.idproduct, thp.net_price,\n        c.code, p.code,\n        ts.code, t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_destination_id,\n    product_source_type,\n    product_destination_type,\n\n    -- Codes\n    company_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom livraison_base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__valo_parc_machine", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__valo_parc_machine.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__valo_parc_machine.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__valo_parc_machine"], "alias": "int_oracle_neshu__valo_parc_machine", "checksum": {"name": "sha256", "checksum": "2e226c7d3bf1bda4dc36b2bbe504b1d7152e266c8a41a5865768dfd43d203b40"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate", "valorisation", "intermediate", "oracle_neshu"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["machine_modele"], "description": "Valorisation du parc machine par mod\u00e8le (Montant_INV depuis prod_reference * nombre de machines compt\u00e9es depuis les stg). Exclut les d\u00e9p\u00f4ts/ateliers internes."}, "tags": ["intermediate", "valorisation", "oracle_neshu"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["valorisation", "intermediate", "oracle_neshu"], "description": "Valorisation du parc machine par mod\u00e8le (Montant_INV depuis prod_reference * nombre de machines compt\u00e9es depuis les stg). Exclut les d\u00e9p\u00f4ts/ateliers internes.", "cluster_by": ["machine_modele"]}, "created_at": 1760962910.3319788, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__valo_parc_machine`", "raw_code": "{{\n  config(\n    materialized = 'table',\n    description = 'Valorisation du parc machine par mod\u00e8le (Montant_INV depuis prod_reference * nombre de machines compt\u00e9es depuis les stg). Exclut les d\u00e9p\u00f4ts/ateliers internes.',\n    tags = ['valorisation','intermediate','oracle_neshu'],\n    cluster_by = ['machine_modele']\n  )\n}}\n\nwith machine_infos as (\n\n  select\n    d.iddevice,\n    d.idcompany_customer,\n    p.name as product_name\n  from {{ ref('stg_oracle_neshu__device') }} d\n  left join {{ ref('stg_oracle_neshu__product') }} p\n    on d.idmodel = p.idproduct\n  left join {{ ref('stg_oracle_neshu__location') }} l\n    on d.idlocation = l.idlocation\n  where d.iddevice_type = 1\n\n),\n\ncompanies as (\n\n  select\n    idcompany,\n    code as company_code,\n    name as company_name\n  from {{ ref('stg_oracle_neshu__company') }}\n\n),\n\nfiltered_machines as (\n\n  select\n    lower(trim(mi.product_name)) as machine_modele\n  from machine_infos mi\n  left join companies c\n    on mi.idcompany_customer = c.idcompany\n  where c.company_name not in (\n    '06 - ATELIER RUNGIS DEPOT',\n    '07 - ATELIER LYON DEPOT',\n    '08 - ATELIER BORDEAUX DEPOT',\n    '10 - REBUS DEPOT',\n    '11 - REMISE EN ETAT - RUNGIS',\n    '12 - REMISE EN ETAT - LYON'\n  )\n\n),\n\ncounts as (\n\n  select\n    machine_modele,\n    count(*) as count_machine\n  from filtered_machines\n  group by machine_modele\n\n),\n\nref_valo as (\n\n  select\n    lower(trim(machine_modele)) as machine_modele,\n    montant_inv as montant_unitaire\n  from {{ ref('valo_parc_machine') }}\n\n),\n\n-- Changement principal : utiliser FULL OUTER JOIN\njoined as (\n\n  select\n    coalesce(c.machine_modele, v.machine_modele) as machine_modele,\n    v.montant_unitaire,\n    coalesce(c.count_machine, 0) as count_machine,\n    case\n      when v.montant_unitaire is null then null\n      else v.montant_unitaire * coalesce(c.count_machine, 0)\n    end as montant_inv_total\n  from counts c\n  full outer join ref_valo v  -- Changement ici\n    on c.machine_modele = v.machine_modele\n\n)\n\nselect\n  machine_modele,\n  montant_unitaire,\n  count_machine,\n  montant_inv_total\nfrom joined", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "valo_parc_machine", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__company", "seed.dbt_warehouse.valo_parc_machine"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__valo_parc_machine.sql", "compiled": true, "compiled_code": "\n\nwith machine_infos as (\n\n  select\n    d.iddevice,\n    d.idcompany_customer,\n    p.name as product_name\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device` d\n  left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p\n    on d.idmodel = p.idproduct\n  left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location` l\n    on d.idlocation = l.idlocation\n  where d.iddevice_type = 1\n\n),\n\ncompanies as (\n\n  select\n    idcompany,\n    code as company_code,\n    name as company_name\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n\n),\n\nfiltered_machines as (\n\n  select\n    lower(trim(mi.product_name)) as machine_modele\n  from machine_infos mi\n  left join companies c\n    on mi.idcompany_customer = c.idcompany\n  where c.company_name not in (\n    '06 - ATELIER RUNGIS DEPOT',\n    '07 - ATELIER LYON DEPOT',\n    '08 - ATELIER BORDEAUX DEPOT',\n    '10 - REBUS DEPOT',\n    '11 - REMISE EN ETAT - RUNGIS',\n    '12 - REMISE EN ETAT - LYON'\n  )\n\n),\n\ncounts as (\n\n  select\n    machine_modele,\n    count(*) as count_machine\n  from filtered_machines\n  group by machine_modele\n\n),\n\nref_valo as (\n\n  select\n    lower(trim(machine_modele)) as machine_modele,\n    montant_inv as montant_unitaire\n  from `evs-datastack-prod`.`prod_reference`.`valo_parc_machine`\n\n),\n\n-- Changement principal : utiliser FULL OUTER JOIN\njoined as (\n\n  select\n    coalesce(c.machine_modele, v.machine_modele) as machine_modele,\n    v.montant_unitaire,\n    coalesce(c.count_machine, 0) as count_machine,\n    case\n      when v.montant_unitaire is null then null\n      else v.montant_unitaire * coalesce(c.count_machine, 0)\n    end as montant_inv_total\n  from counts c\n  full outer join ref_valo v  -- Changement ici\n    on c.machine_modele = v.machine_modele\n\n)\n\nselect\n  machine_modele,\n  montant_unitaire,\n  count_machine,\n  montant_inv_total\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__ecart_inventaire_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__ecart_inventaire_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__ecart_inventaire_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__ecart_inventaire_tasks"], "alias": "int_oracle_neshu__ecart_inventaire_tasks", "checksum": {"name": "sha256", "checksum": "d85701dcb20ac952b0c6b514c5191919049553b9912797790be887aa3ee5c702"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d\"ecart inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des t\u00e2ches de d'ecart inventaire. Filtr\u00e9e sur les t\u00e2ches de type ECART INVENTAIRE (idtask_type=163)  avec statut FAIT/VALIDE/ANNULE.\n", "columns": {"task_product_id": {"name": "task_product_id", "description": "Cl\u00e9 primaire de task_has_product - Identifiant unique de la relation task-produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_id": {"name": "task_id", "description": "ID de la t\u00e2che (r\u00e9f\u00e9rence vers EVS.TASK)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit t\u00e9l\u00e9m\u00e9trique", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_id": {"name": "product_source_id", "description": "ID du produit source", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source_type": {"name": "product_source_type", "description": "Type du produit source", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_code": {"name": "source_code", "description": "Code source du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code m\u00e9tier du produit", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code statut de la t\u00e2che (FAIT, VALIDE, ANNULE)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure r\u00e9elle de la t\u00e2che", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantit\u00e9 produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valuation": {"name": "valuation", "description": "Valorisation du produit (quantit\u00e9 * prix unitaire)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d\"ecart inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation"}, "created_at": 1760962912.0309243, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id', 'task_status_code'],\n        description='Table interm\u00e9diaire des t\u00e2ches d\"ecart inventaire - avec enrichissement produit, source, quantit\u00e9 et valorisation'\n    )\n}}\n\nwith ecart_inventaire_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n\n        -- Codes\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then r.code\n        end as source_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    inner join {{ ref('stg_oracle_neshu__task_has_product') }} thp on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__product') }} p on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n\n    -- jointure company pour la source si COMPANY\n    left join {{ ref('stg_oracle_neshu__company') }} cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- jointure resources pour la source si RESOURCES\n    left join {{ ref('stg_oracle_neshu__resources') }} r \n        on t.idproduct_source = r.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 163 -- ECART INVENTAIRE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        thp.idproduct, thp.net_price,\n        cs.code, r.code, p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n\n    -- Codes\n    source_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom ecart_inventaire_base\nwhere source_code is not null", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__ecart_inventaire_tasks.sql", "compiled": true, "compiled_code": "\n\nwith ecart_inventaire_base as (\n\n    select\n        -- Identifiants\n        thp.idtask_has_product as task_product_id,\n        t.idtask as task_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n        t.idproduct_source as product_source_id,\n        t.type_product_source as product_source_type,\n\n        -- Codes\n        case \n            when t.type_product_source = 'COMPANY' then cs.code\n            when t.type_product_source = 'RESOURCES' then r.code\n        end as source_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n\n        -- Informations date\n        t.real_start_date as task_start_date,\n\n        -- M\u00e9triques\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div) as quantity,\n        sum(thp.real_quantity * thp.unit_coeff_multi / thp.unit_coeff_div * thp.net_price) as valuation,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    inner join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n\n    -- jointure company pour la source si COMPANY\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` cs \n        on t.idproduct_source = cs.idcompany \n       and t.type_product_source = 'COMPANY'\n\n    -- jointure resources pour la source si RESOURCES\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources` r \n        on t.idproduct_source = r.idresources\n       and t.type_product_source = 'RESOURCES'\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 163 -- ECART INVENTAIRE\n        and t.real_start_date is not null\n\n    group by\n        thp.idtask_has_product, t.idtask, t.idcompany_peer,\n        t.idproduct_source, t.type_product_source,\n        thp.idproduct, thp.net_price,\n        cs.code, r.code, p.code, ts.code,\n        t.real_start_date,\n        t.updated_at, t.created_at, t.extracted_at\n)\n\nselect\n    -- Identifiants\n    task_product_id,\n    task_id,\n    company_id,\n    product_id,\n    product_source_id,\n    product_source_type,\n\n    -- Codes\n    source_code,\n    product_code,\n    task_status_code,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n\n    -- M\u00e9triques\n    quantity,\n    valuation,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom ecart_inventaire_base\nwhere source_code is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_product_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__inter_techinique_tasks", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__inter_techinique_tasks.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__inter_techinique_tasks.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__inter_techinique_tasks"], "alias": "int_oracle_neshu__inter_techinique_tasks", "checksum": {"name": "sha256", "checksum": "65dfa61fc2de75b574cdbc701c20a5438dd658aa52b321e4ae302377ca5413ee"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d'intervention technique preventive - avec enrichissement produit, source, client et pivot des labels"}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire des inter technique. Filtr\u00e9e sur les t\u00e2ches de type INTER TECHNIQUE (idtask_type=131)  & filtr\u00e9 sur label C4 D\u00e9tartrage/filtre avec statut actif (code_status_record=1) et enrichie avec code produit.\n", "columns": {"task_id": {"name": "task_id", "description": "ID de la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_id": {"name": "device_id", "description": "ID du device associ\u00e9 \u00e0 la t\u00e2che", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_id": {"name": "company_id", "description": "ID de l'entreprise cliente (peer company)", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "ID du produit", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code client de l'entreprise (company.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Code produit (si utilis\u00e9 pour la t\u00e2che)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_status_code": {"name": "task_status_code", "description": "Code du statut de la t\u00e2che (task_status.code)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "statut_inter": {"name": "statut_inter", "description": "Statut de l'intervention technique (TERMINE ou envoy\u00e9 \u00e0 la technique)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dc04": {"name": "dc04", "description": "Label famille DC04 qui correspond au : D\u00e9tail C4 -", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mission_type": {"name": "mission_type", "description": "Type de mission", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "objet_intervent": {"name": "objet_intervent", "description": "Objet de l'intervention : Filtr\u00e9 sur C4 - D\u00e9tartrage/filtre", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_start_date": {"name": "task_start_date", "description": "Date et heure de d\u00e9but r\u00e9el du passage appro", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_end_date": {"name": "task_end_date", "description": "Date et heure de fin r\u00e9el du passage appro", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "Timestamp de derni\u00e8re modification (pour incr\u00e9ment)", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "Timestamp de cr\u00e9ation", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Timestamp d'extraction depuis Oracle", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "cluster_by": ["company_id", "product_id", "task_status_code"], "description": "Table interm\u00e9diaire des t\u00e2ches d'intervention technique preventive - avec enrichissement produit, source, client et pivot des labels"}, "created_at": 1760962912.0418782, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by=['company_id', 'product_id', 'task_status_code'],\n        description=\"Table interm\u00e9diaire des t\u00e2ches d'intervention technique preventive - avec enrichissement produit, source, client et pivot des labels\"\n    )\n}}\n\nwith inter_base as (\n\n    select\n        -- Identifiants\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n\n        -- Codes\n        c.code as company_code,\n        d.code as device_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as label_code,\n        lf.code as label_family_code,\n\n        -- Informations m\u00e9tier\n        t.real_start_date as task_start_date,\n        t.real_end_date as task_end_date,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from {{ ref('stg_oracle_neshu__task') }} t\n    left join {{ ref('stg_oracle_neshu__task_has_product') }} thp on thp.idtask = t.idtask\n    left join {{ ref('stg_oracle_neshu__company') }} c on c.idcompany = t.idcompany_peer\n    left join {{ ref('stg_oracle_neshu__device') }} d on d.iddevice = t.iddevice\n    left join {{ ref('stg_oracle_neshu__product') }} p on p.idproduct = thp.idproduct\n    left join {{ ref('stg_oracle_neshu__label_has_task') }} lht on t.idtask = lht.idtask\n    left join {{ ref('stg_oracle_neshu__label') }} la on lht.idlabel = la.idlabel\n    left join {{ ref('stg_oracle_neshu__label_family') }} lf on la.idlabel_family = lf.idlabel_family\n    left join {{ ref('stg_oracle_neshu__task_status') }} ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 131 -- INTERVENTION TECHNIQUE\n        and t.real_start_date is not null\n)\n\nselect\n    -- Identifiants\n    task_id,\n    device_id,\n    company_id,\n    product_id,\n\n    -- Codes\n    company_code,\n    device_code,\n    product_code,\n    task_status_code,\n\n    -- Pivot des labels\n    max(case when label_family_code = 'Statut inter' then label_code end) as statut_inter,\n    max(case when label_family_code = 'DC04' then label_code end) as dc04,\n    max(case when label_family_code = 'MISSION_TYPE' then label_code end) as mission_type,\n    max(case when label_family_code = 'Objet intervent' then label_code end) as objet_intervent,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n    task_end_date,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom inter_base\ngroup by\n    task_id, device_id, company_id, product_id,\n    company_code, device_code, product_code, task_status_code,\n    task_start_date, task_end_date, updated_at, created_at, extracted_at\nHAVING MAX(CASE WHEN label_family_code = 'Objet intervent' THEN label_code END) = 'OC04'", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}, {"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_family", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_status", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__inter_techinique_tasks.sql", "compiled": true, "compiled_code": "\n\nwith inter_base as (\n\n    select\n        -- Identifiants\n        t.idtask as task_id,\n        t.iddevice as device_id,\n        t.idcompany_peer as company_id,\n        thp.idproduct as product_id,\n\n        -- Codes\n        c.code as company_code,\n        d.code as device_code,\n        p.code as product_code,\n        ts.code as task_status_code,\n        la.code as label_code,\n        lf.code as label_family_code,\n\n        -- Informations m\u00e9tier\n        t.real_start_date as task_start_date,\n        t.real_end_date as task_end_date,\n\n        -- Timestamps techniques\n        t.updated_at,\n        t.created_at,\n        t.extracted_at\n\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task` t\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product` thp on thp.idtask = t.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company` c on c.idcompany = t.idcompany_peer\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device` d on d.iddevice = t.iddevice\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product` p on p.idproduct = thp.idproduct\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task` lht on t.idtask = lht.idtask\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label` la on lht.idlabel = la.idlabel\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family` lf on la.idlabel_family = lf.idlabel_family\n    left join `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status` ts on t.idtask_status = ts.idtask_status\n\n    where 1=1\n        and t.idtask_status in (1, 4, 3)  -- FAIT, VALIDE, ANNULE\n        and t.code_status_record = '1'\n        and t.idtask_type = 131 -- INTERVENTION TECHNIQUE\n        and t.real_start_date is not null\n)\n\nselect\n    -- Identifiants\n    task_id,\n    device_id,\n    company_id,\n    product_id,\n\n    -- Codes\n    company_code,\n    device_code,\n    product_code,\n    task_status_code,\n\n    -- Pivot des labels\n    max(case when label_family_code = 'Statut inter' then label_code end) as statut_inter,\n    max(case when label_family_code = 'DC04' then label_code end) as dc04,\n    max(case when label_family_code = 'MISSION_TYPE' then label_code end) as mission_type,\n    max(case when label_family_code = 'Objet intervent' then label_code end) as objet_intervent,\n\n    -- Infos m\u00e9tier\n    task_start_date,\n    task_end_date,\n\n    -- Timestamps techniques\n    updated_at,\n    created_at,\n    extracted_at\n\nfrom inter_base\ngroup by\n    task_id, device_id, company_id, product_id,\n    company_code, device_code, product_code, task_status_code,\n    task_start_date, task_end_date, updated_at, created_at, extracted_at\nHAVING MAX(CASE WHEN label_family_code = 'Objet intervent' THEN label_code END) = 'OC04'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["task_id"], "time_spine": null}, "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base": {"database": "evs-datastack-prod", "schema": "prod_intermediate", "name": "int_oracle_neshu__machines_yuman_maintenance_base", "resource_type": "model", "package_name": "dbt_warehouse", "path": "intermediate/oracle_neshu/int_oracle_neshu__machines_yuman_maintenance_base.sql", "original_file_path": "models/intermediate/oracle_neshu/int_oracle_neshu__machines_yuman_maintenance_base.sql", "unique_id": "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "int_oracle_neshu__machines_yuman_maintenance_base"], "alias": "int_oracle_neshu__machines_yuman_maintenance_base", "checksum": {"name": "sha256", "checksum": "7ad3763447121765c102c88ba4b06de18d1ead2bb7aacebfe6d635e63ce5fc5f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "description": "Table interm\u00e9diaire reliant les machines Oracle NESHU aux mat\u00e9riels Yuman (avec enrichissement client et site)."}, "tags": ["intermediate"], "description": "Table interm\u00e9diaire reliant les machines Oracle NESHU (issues de dim_oracle_neshu__device) aux mat\u00e9riels Yuman (materials, sites, clients, cat\u00e9gories).  Sert de dimension de r\u00e9f\u00e9rence pour les analyses de maintenance, enrichie avec informations client et site.\n", "columns": {"device_id": {"name": "device_id", "description": "Identifiant unique de la machine dans Oracle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "Identifiant du mat\u00e9riel dans Yuman.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_code": {"name": "device_code", "description": "Code machine Oracle avec pr\u00e9fixe 'NESH_'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_name": {"name": "device_name", "description": "Libell\u00e9 de la machine Oracle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_code": {"name": "company_code", "description": "Code soci\u00e9t\u00e9 Oracle, pr\u00e9fix\u00e9 'NESH_' et filtr\u00e9 sur le format CN[0-9]{4}.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_installation_date": {"name": "last_installation_date", "description": "Derni\u00e8re date d\u2019installation de la machine (Oracle).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_serial_number": {"name": "material_serial_number", "description": "Num\u00e9ro de s\u00e9rie du mat\u00e9riel Yuman (match\u00e9 avec le device_code Oracle).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Identifiant du client Yuman associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_code": {"name": "client_code", "description": "Code client Yuman associ\u00e9 \u00e0 la machine.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_name": {"name": "client_name", "description": "Nom du client Yuman associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_category": {"name": "client_category", "description": "Cat\u00e9gorie du client Yuman.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Identifiant du site Yuman associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_code": {"name": "site_code", "description": "Code site Yuman associ\u00e9 (excluant d\u00e9p\u00f4ts et ateliers).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_postal_code": {"name": "site_postal_code", "description": "Code postal du site Yuman associ\u00e9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_created_at": {"name": "material_created_at", "description": "Date de cr\u00e9ation du mat\u00e9riel Yuman.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_updated_at": {"name": "material_updated_at", "description": "Derni\u00e8re mise \u00e0 jour du mat\u00e9riel Yuman.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "intermediate", "tags": ["intermediate"], "description": "Table interm\u00e9diaire reliant les machines Oracle NESHU aux mat\u00e9riels Yuman (avec enrichissement client et site)."}, "created_at": 1760962912.0436347, "relation_name": "`evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__machines_yuman_maintenance_base`", "raw_code": "-- int_oracle_neshu__machines_yuman_maintenance_base.sql\n{{ config(\n    materialized = \"table\",\n    description = \"Table interm\u00e9diaire reliant les machines Oracle NESHU aux mat\u00e9riels Yuman (avec enrichissement client et site).\"\n) }}\n\n\n-- LISTE MACHINE DLOG filtr\u00e9 & clean\nWITH liste_machine_oracle AS (\n    SELECT\n      d.device_id,\n      CONCAT('NESH_', d.device_code) AS device_code,\n      d.device_name,\n      CONCAT('NESH_', company_code) AS company_code,\n      d.company_name,\n      d.last_installation_date,\n      d.created_at as device_created_at,\n      d.updated_at as device_updated_at\n    FROM {{ ref('dim_oracle_neshu__device') }} d\n    WHERE is_active\n      AND device_type_id IN (1, 2)\n      AND REGEXP_CONTAINS(company_code, r'^CN[0-9]{4}$')\n      AND device_name in ('MOMENTO 100', 'GEMINI 200', 'MOMENTO 200', 'MINITOWER GEMINI', 'MINITOWER MOMENTO',\n        'SBS MOMENTO 100', 'TOWER GEMINI', 'TOWER MOMENTO', 'MILANO LYO FTS120',\n        'MILANO GRAIN FTS60E', 'MILANO GRAIN FTS60E + MODULO', 'BLUSODA', 'BLUSODA GAZ',\n        'TOWER BLUSODA', 'TOWER BLUSODA GAZ', 'MILANO LYO FTS120 + MODULO',\n        'BLUSODA', 'TOWER ONE GAZ', 'OPTIBEANX12 + MODULO', 'OPTIBEAN X 12', 'OPTIBEAN X 12 TS','OPTIBEANX12TS + MODULO','OPTIBEANX12TS + MODULO','OPTIBEAN 12')\n),\n-- LISTE MACHINE YUMAN ENRICHI CLIENT / SITE filtr\u00e9 & clean\nyuman_materials_clean  AS (\n    SELECT \n        ym.material_id,\n        ym.material_description,\n        ym.material_name,\n        ym.material_brand,\n        ym.material_serial_number,\n        ycat.category_name,\n        ym.material_in_service_date,\n        ym.created_at,\n        ym.updated_at,\n        yc.client_id,\n        yc.client_code,\n        yc.client_name,\n        yc.client_category,\n        yc.partner_name,\n        ys.site_id,\n        ys.site_code,\n        ys.site_postal_code\n    FROM {{ ref('stg_yuman__materials') }} ym\n    LEFT JOIN {{ ref('stg_yuman__sites') }} ys \n        ON ym.site_id = ys.site_id\n    LEFT JOIN {{ ref('stg_yuman__clients') }} yc \n        ON ys.client_id = yc.client_id\n    LEFT JOIN {{ ref('stg_yuman__materials_categories') }} ycat \n        ON ycat.category_id = ym.category_id\n    WHERE partner_name = 'NESHU'\n      AND site_code NOT IN (\n            \"NESH_DEPOTATELIERBORDEAUX\", \"NESH_DEPOTATELIERLYON\", \"NESH_DEPOTATELIERMARSEILLE\",\n            \"NESH_DEPOTATELIERRUNGIS\", \"NESH_DEPOTATELIERSTRASBOURG\", \"NESH_DEPOTBORDEAUX\",\n            \"NESH_DEPOTLYON\", \"NESH_DEPOTMARSEILLE\", \"NESH_DEPOTPERIMES\", \"NESH_DEPOTREBUS\",\n            \"NESH_DEPOTRUNGIS\", \"NESH_DEPOTSTRASBOURG\", \"NESH_RELYON\", \"NESH_RERUNGIS\", \"NESH_STOCKNUNSHEN\"\n        )\n      AND material_name NOT LIKE '%GENERIQUE NESHU%'\n      AND material_serial_number not in \n      ('NESH_MA00226', 'NESH_MA00227', 'NESH_MA00247', 'NESH_MA00248', 'NESH_MA00249',\n      'NESH_MA00250', 'NESH_MA00251', 'NESH_MA00252', 'NESH_MA00253', 'NESH_MA00254',\n      'NESH_MA00193', 'NESH_MA00194', 'NESH_MA00195', 'NESH_MA00196', 'NESH_MA00197',\n      'NESH_MA00198', 'NESH_MA00199', 'NESH_MA00200', 'NESH_MA00201', 'NESH_MA00202',\n      'NESH_MA00203', 'NESH_MA00204', 'NESH_MA00205', 'NESH_MA00206', 'NESH_MA00207',\n      'NESH_MA00208', 'NESH_MA00209', 'NESH_MA00210', 'NESH_MA00211', 'NESH_MA00212',\n      'NESH_MA00213', 'NESH_MA00214', 'NESH_MA00215', 'NESH_MA00228', 'NESH_MA00229',\n      'NESH_MA00230', 'NESH_MA00231', 'NESH_MA00232', 'NESH_MA00233', 'NESH_MA00234',\n      'NESH_MA00235', 'NESH_MA00236', 'NESH_MA00237', 'NESH_MA00238', 'NESH_MA00239',\n      'NESH_MA00240', 'NESH_MA00241', 'NESH_MA00242', 'NESH_MA00244', 'NESH_MA00245',\n      'NESH_MA00246', 'NESH_MA00256', 'NESH_MA00257', 'NESH_MA00258', 'NESH_MA00259',\n      'NESH_MA00260', 'NESH_MA00261', 'NESH_MA00262', 'NESH_MA00263', 'NESH_MA00264',\n      'NESH_MA00265', 'NESH_MA00266', 'NESH_MA00270', 'NESH_MA00216', 'NESH_MA00217',\n      'NESH_MA00220', 'NESH_MA00221', 'NESH_MA00222', 'NESH_MA00223', 'NESH_MA00181',\n      'NESH_MA00182', 'NESH_MA00184', 'NESH_MA00185', 'NESH_MA00183', 'NESH_MA00186',\n      'NESH_MA00187', 'NESH_AS00401', 'NESH_AS00403', 'NESH_AS00393', 'NESH_AS00557',\n      'NESH_AS00558', 'NESH_AS00242', 'NESH_AS00241', 'NESH_AS00562', 'NESH_AS00559',\n      'NESH_AS00070', 'NESH_AS00568', 'NESH_AS00563', 'NESH_AS00561', 'NESH_AS00560',\n      'NESH_AS00317', 'NESH_AS00314', 'NESH_MA00136', 'NESH_AS00011', 'NESH_AS00012',\n      'NESH_MA00170', 'NESH_AS00004')\n),\n-- JOINTURE ENTRE LA LISTE MACHINE DLOG avec les donn\u00e9es YUMAN\nmerged_materials_dlog_yuman AS (\n    SELECT \n        lo.device_id,\n        lo.device_code,\n        lo.device_name,\n        lo.company_code,\n        lo.company_name,\n        lo.last_installation_date,\n        lo.device_created_at,\n        lo.device_updated_at,\n        ym.material_id,\n        ym.material_serial_number,\n        ym.material_name,\n        ym.client_id,\n        ym.client_code,\n        ym.client_name,\n        ym.client_category,\n        ym.site_id,\n        ym.site_code,\n        ym.site_postal_code,\n        ym.created_at AS material_created_at,\n        ym.updated_at AS material_updated_at\n    FROM liste_machine_oracle lo\n    LEFT JOIN yuman_materials_clean ym\n        ON lo.device_code = ym.material_serial_number and lo.company_code = ym.client_code\n)\nSELECT * from merged_materials_dlog_yuman", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_yuman__materials", "package": null, "version": null}, {"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__materials_categories", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__materials_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/int_oracle_neshu__machines_yuman_maintenance_base.sql", "compiled": true, "compiled_code": "-- int_oracle_neshu__machines_yuman_maintenance_base.sql\n\n\n\n-- LISTE MACHINE DLOG filtr\u00e9 & clean\nWITH liste_machine_oracle AS (\n    SELECT\n      d.device_id,\n      CONCAT('NESH_', d.device_code) AS device_code,\n      d.device_name,\n      CONCAT('NESH_', company_code) AS company_code,\n      d.company_name,\n      d.last_installation_date,\n      d.created_at as device_created_at,\n      d.updated_at as device_updated_at\n    FROM `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device` d\n    WHERE is_active\n      AND device_type_id IN (1, 2)\n      AND REGEXP_CONTAINS(company_code, r'^CN[0-9]{4}$')\n      AND device_name in ('MOMENTO 100', 'GEMINI 200', 'MOMENTO 200', 'MINITOWER GEMINI', 'MINITOWER MOMENTO',\n        'SBS MOMENTO 100', 'TOWER GEMINI', 'TOWER MOMENTO', 'MILANO LYO FTS120',\n        'MILANO GRAIN FTS60E', 'MILANO GRAIN FTS60E + MODULO', 'BLUSODA', 'BLUSODA GAZ',\n        'TOWER BLUSODA', 'TOWER BLUSODA GAZ', 'MILANO LYO FTS120 + MODULO',\n        'BLUSODA', 'TOWER ONE GAZ', 'OPTIBEANX12 + MODULO', 'OPTIBEAN X 12', 'OPTIBEAN X 12 TS','OPTIBEANX12TS + MODULO','OPTIBEANX12TS + MODULO','OPTIBEAN 12')\n),\n-- LISTE MACHINE YUMAN ENRICHI CLIENT / SITE filtr\u00e9 & clean\nyuman_materials_clean  AS (\n    SELECT \n        ym.material_id,\n        ym.material_description,\n        ym.material_name,\n        ym.material_brand,\n        ym.material_serial_number,\n        ycat.category_name,\n        ym.material_in_service_date,\n        ym.created_at,\n        ym.updated_at,\n        yc.client_id,\n        yc.client_code,\n        yc.client_name,\n        yc.client_category,\n        yc.partner_name,\n        ys.site_id,\n        ys.site_code,\n        ys.site_postal_code\n    FROM `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials` ym\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites` ys \n        ON ym.site_id = ys.site_id\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients` yc \n        ON ys.client_id = yc.client_id\n    LEFT JOIN `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories` ycat \n        ON ycat.category_id = ym.category_id\n    WHERE partner_name = 'NESHU'\n      AND site_code NOT IN (\n            \"NESH_DEPOTATELIERBORDEAUX\", \"NESH_DEPOTATELIERLYON\", \"NESH_DEPOTATELIERMARSEILLE\",\n            \"NESH_DEPOTATELIERRUNGIS\", \"NESH_DEPOTATELIERSTRASBOURG\", \"NESH_DEPOTBORDEAUX\",\n            \"NESH_DEPOTLYON\", \"NESH_DEPOTMARSEILLE\", \"NESH_DEPOTPERIMES\", \"NESH_DEPOTREBUS\",\n            \"NESH_DEPOTRUNGIS\", \"NESH_DEPOTSTRASBOURG\", \"NESH_RELYON\", \"NESH_RERUNGIS\", \"NESH_STOCKNUNSHEN\"\n        )\n      AND material_name NOT LIKE '%GENERIQUE NESHU%'\n      AND material_serial_number not in \n      ('NESH_MA00226', 'NESH_MA00227', 'NESH_MA00247', 'NESH_MA00248', 'NESH_MA00249',\n      'NESH_MA00250', 'NESH_MA00251', 'NESH_MA00252', 'NESH_MA00253', 'NESH_MA00254',\n      'NESH_MA00193', 'NESH_MA00194', 'NESH_MA00195', 'NESH_MA00196', 'NESH_MA00197',\n      'NESH_MA00198', 'NESH_MA00199', 'NESH_MA00200', 'NESH_MA00201', 'NESH_MA00202',\n      'NESH_MA00203', 'NESH_MA00204', 'NESH_MA00205', 'NESH_MA00206', 'NESH_MA00207',\n      'NESH_MA00208', 'NESH_MA00209', 'NESH_MA00210', 'NESH_MA00211', 'NESH_MA00212',\n      'NESH_MA00213', 'NESH_MA00214', 'NESH_MA00215', 'NESH_MA00228', 'NESH_MA00229',\n      'NESH_MA00230', 'NESH_MA00231', 'NESH_MA00232', 'NESH_MA00233', 'NESH_MA00234',\n      'NESH_MA00235', 'NESH_MA00236', 'NESH_MA00237', 'NESH_MA00238', 'NESH_MA00239',\n      'NESH_MA00240', 'NESH_MA00241', 'NESH_MA00242', 'NESH_MA00244', 'NESH_MA00245',\n      'NESH_MA00246', 'NESH_MA00256', 'NESH_MA00257', 'NESH_MA00258', 'NESH_MA00259',\n      'NESH_MA00260', 'NESH_MA00261', 'NESH_MA00262', 'NESH_MA00263', 'NESH_MA00264',\n      'NESH_MA00265', 'NESH_MA00266', 'NESH_MA00270', 'NESH_MA00216', 'NESH_MA00217',\n      'NESH_MA00220', 'NESH_MA00221', 'NESH_MA00222', 'NESH_MA00223', 'NESH_MA00181',\n      'NESH_MA00182', 'NESH_MA00184', 'NESH_MA00185', 'NESH_MA00183', 'NESH_MA00186',\n      'NESH_MA00187', 'NESH_AS00401', 'NESH_AS00403', 'NESH_AS00393', 'NESH_AS00557',\n      'NESH_AS00558', 'NESH_AS00242', 'NESH_AS00241', 'NESH_AS00562', 'NESH_AS00559',\n      'NESH_AS00070', 'NESH_AS00568', 'NESH_AS00563', 'NESH_AS00561', 'NESH_AS00560',\n      'NESH_AS00317', 'NESH_AS00314', 'NESH_MA00136', 'NESH_AS00011', 'NESH_AS00012',\n      'NESH_MA00170', 'NESH_AS00004')\n),\n-- JOINTURE ENTRE LA LISTE MACHINE DLOG avec les donn\u00e9es YUMAN\nmerged_materials_dlog_yuman AS (\n    SELECT \n        lo.device_id,\n        lo.device_code,\n        lo.device_name,\n        lo.company_code,\n        lo.company_name,\n        lo.last_installation_date,\n        lo.device_created_at,\n        lo.device_updated_at,\n        ym.material_id,\n        ym.material_serial_number,\n        ym.material_name,\n        ym.client_id,\n        ym.client_code,\n        ym.client_name,\n        ym.client_category,\n        ym.site_id,\n        ym.site_code,\n        ym.site_postal_code,\n        ym.created_at AS material_created_at,\n        ym.updated_at AS material_updated_at\n    FROM liste_machine_oracle lo\n    LEFT JOIN yuman_materials_clean ym\n        ON lo.device_code = ym.material_serial_number and lo.company_code = ym.client_code\n)\nSELECT * from merged_materials_dlog_yuman", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.dbt_warehouse.valo_parc_machine": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "valo_parc_machine", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/valo_parc_machine.csv", "original_file_path": "data/reference_data/valo_parc_machine.csv", "unique_id": "seed.dbt_warehouse.valo_parc_machine", "fqn": ["dbt_warehouse", "reference_data", "valo_parc_machine"], "alias": "valo_parc_machine", "checksum": {"name": "sha256", "checksum": "9d837034ff71a71a74f123fc6f02f8067937f7def7c84fa6a40e791b77974e9e"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Fichier de r\u00e9f\u00e9rence (machine -> valorisation unitaire).", "columns": {"machine_modele": {"name": "machine_modele", "description": "Identifiant / libell\u00e9 du mod\u00e8le de machine.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "montant_inv": {"name": "montant_inv", "description": "Valorisation unitaire (format texte ou num\u00e9rique selon l'import).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"]}, "created_at": 1760962912.282781, "relation_name": "`evs-datastack-prod`.`prod_reference`.`valo_parc_machine`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.marque_clean": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "marque_clean", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/marque_clean.csv", "original_file_path": "data/reference_data/marque_clean.csv", "unique_id": "seed.dbt_warehouse.marque_clean", "fqn": ["dbt_warehouse", "reference_data", "marque_clean"], "alias": "marque_clean", "checksum": {"name": "sha256", "checksum": "c36dc7ed91aa2ade1557865850cf89b7bc3500d2c35a25cc5502801334b653e7"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"NOM_DU_TECHNICIEN": "STRING", "MARQUE": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Correspondance technicien vers marque", "columns": {"NOM_DU_TECHNICIEN": {"name": "NOM_DU_TECHNICIEN", "description": "Nom du technicien", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MARQUE": {"name": "MARQUE", "description": "Marque associ\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"NOM_DU_TECHNICIEN": "STRING", "MARQUE": "STRING"}}, "created_at": 1760962912.2772293, "relation_name": "`evs-datastack-prod`.`prod_reference`.`marque_clean`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.tech_piece_agence_mapping": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "tech_piece_agence_mapping", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/tech_piece_agence_mapping.csv", "original_file_path": "data/reference_data/tech_piece_agence_mapping.csv", "unique_id": "seed.dbt_warehouse.tech_piece_agence_mapping", "fqn": ["dbt_warehouse", "reference_data", "tech_piece_agence_mapping"], "alias": "tech_piece_agence_mapping", "checksum": {"name": "sha256", "checksum": "a8491cfa653099dd4a9d0fc105b78f1d7a4b356e980f3b1a1f37dd1385d49ca2"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Mapping entre tech et agence stock", "columns": {"nom": {"name": "nom", "description": "nom tech", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "prenom": {"name": "prenom", "description": "pr\u00e9nom du tech", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "agence": {"name": "agence", "description": "agence rattach\u00e9 pour le stock", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "equipe": {"name": "equipe", "description": "\u00e9quipe du technicien", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"]}, "created_at": 1760962912.2887547, "relation_name": "`evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.cp_metropole": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "cp_metropole", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/cp_metropole.csv", "original_file_path": "data/reference_data/cp_metropole.csv", "unique_id": "seed.dbt_warehouse.cp_metropole", "fqn": ["dbt_warehouse", "reference_data", "cp_metropole"], "alias": "cp_metropole", "checksum": {"name": "sha256", "checksum": "08af828cf7e80eedf8a0f07d774f66f1707c06ac247f58a8fce5234cc11502e6"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"Code_Postal": "STRING", "Metropole": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Correspondance codes postaux vers m\u00e9tropoles", "columns": {"Code_Postal": {"name": "Code_Postal", "description": "Code postal (5 chiffres)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Metropole": {"name": "Metropole", "description": "Nom de la m\u00e9tropole", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"Code_Postal": "STRING", "Metropole": "STRING"}}, "created_at": 1760962912.273215, "relation_name": "`evs-datastack-prod`.`prod_reference`.`cp_metropole`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.cps_tech": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "cps_tech", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/cps_tech.csv", "original_file_path": "data/reference_data/cps_tech.csv", "unique_id": "seed.dbt_warehouse.cps_tech", "fqn": ["dbt_warehouse", "reference_data", "cps_tech"], "alias": "cps_tech", "checksum": {"name": "sha256", "checksum": "32492dd72f4b15abd13fd7dfdd9708b7630cb4807d3e5e6269b207a56abe792a"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"cp_depart_int": "integer", "cp_depart_texte": "string", "cp_final_int": "integer", "cp_final_texte": "string", "libelle_cp": "string", "num_departement_texte": "string", "nom_departement": "string", "region_tech": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Correspondance codes postaux et regions pour les techniciens", "columns": {"cp_depart_int": {"name": "cp_depart_int", "description": "code postal de d\u00e9part (cedex) - integer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cp_depart_texte": {"name": "cp_depart_texte", "description": "code postal de d\u00e9part (cedex) - texte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cp_final_int": {"name": "cp_final_int", "description": "code postal de fin (simplifi\u00e9) - integer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cp_final_texte": {"name": "cp_final_texte", "description": "code postal de fin (simplifi\u00e9) - texte", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "libelle_cp": {"name": "libelle_cp", "description": "libell\u00e9 du code postal de fin", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "num_departement_texte": {"name": "num_departement_texte", "description": "num\u00e9ro du d\u00e9partement - texte (2 chiffres)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "nom_departement": {"name": "nom_departement", "description": "Nom du d\u00e9partement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region_tech": {"name": "region_tech", "description": "R\u00e9gion correspondante pour la sectorisation des techniciens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"cp_depart_int": "integer", "cp_depart_texte": "string", "cp_final_int": "integer", "cp_final_texte": "string", "libelle_cp": "string", "num_departement_texte": "string", "nom_departement": "string", "region_tech": "string"}}, "created_at": 1760962912.2865374, "relation_name": "`evs-datastack-prod`.`prod_reference`.`cps_tech`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.dpt_metropole": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "dpt_metropole", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/dpt_metropole.csv", "original_file_path": "data/reference_data/dpt_metropole.csv", "unique_id": "seed.dbt_warehouse.dpt_metropole", "fqn": ["dbt_warehouse", "reference_data", "dpt_metropole"], "alias": "dpt_metropole", "checksum": {"name": "sha256", "checksum": "233d9d82d7da508ae048fa3d6d1aefa96a4645a838cbb7c66b278541a1fa1206"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"Departement": "STRING", "Metropole": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Correspondance d\u00e9partements vers m\u00e9tropoles", "columns": {"Departement": {"name": "Departement", "description": "Num\u00e9ro de d\u00e9partement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Metropole": {"name": "Metropole", "description": "Nom de la m\u00e9tropole", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"Departement": "STRING", "Metropole": "STRING"}}, "created_at": 1760962912.2743406, "relation_name": "`evs-datastack-prod`.`prod_reference`.`dpt_metropole`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.machines_clean": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "machines_clean", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/machines_clean.csv", "original_file_path": "data/reference_data/machines_clean.csv", "unique_id": "seed.dbt_warehouse.machines_clean", "fqn": ["dbt_warehouse", "reference_data", "machines_clean"], "alias": "machines_clean", "checksum": {"name": "sha256", "checksum": "3a01c5f2d0262be6ed37a67b21229571f35600b4cdd6768516abfe3da663eacf"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"Machine_Brut": "STRING", "MACHINE": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Mapping noms machines bruts vers standardis\u00e9s", "columns": {"Machine_Brut": {"name": "Machine_Brut", "description": "Nom machine tel qu'en source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MACHINE": {"name": "MACHINE", "description": "Nom machine standardis\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"Machine_Brut": "STRING", "MACHINE": "STRING"}}, "created_at": 1760962912.2758281, "relation_name": "`evs-datastack-prod`.`prod_reference`.`machines_clean`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.type_inter_clean": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "type_inter_clean", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/type_inter_clean.csv", "original_file_path": "data/reference_data/type_inter_clean.csv", "unique_id": "seed.dbt_warehouse.type_inter_clean", "fqn": ["dbt_warehouse", "reference_data", "type_inter_clean"], "alias": "type_inter_clean", "checksum": {"name": "sha256", "checksum": "e1283d867b456f975223f232769761ac5cfec41e13abeeeb500766e545da27c3"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"Type_intervention_Brut": "STRING", "TYPE_INTER": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Mapping types d'interventions", "columns": {"Type_intervention_Brut": {"name": "Type_intervention_Brut", "description": "Type intervention source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_INTER": {"name": "TYPE_INTER", "description": "Type intervention standardis\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"Type_intervention_Brut": "STRING", "TYPE_INTER": "STRING"}}, "created_at": 1760962912.2797737, "relation_name": "`evs-datastack-prod`.`prod_reference`.`type_inter_clean`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.techniciens_clean": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "techniciens_clean", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/techniciens_clean.csv", "original_file_path": "data/reference_data/techniciens_clean.csv", "unique_id": "seed.dbt_warehouse.techniciens_clean", "fqn": ["dbt_warehouse", "reference_data", "techniciens_clean"], "alias": "techniciens_clean", "checksum": {"name": "sha256", "checksum": "42b5678829ce576286b246beeb82a4c3e2942d19fdb7166d9b6ca849bc51f580"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"TECHNICIEN": "STRING", "Nom": "STRING", "Prenom": "STRING", "Nom_Prenom": "STRING", "EQUIPE": "STRING"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "R\u00e9f\u00e9rentiel des techniciens et \u00e9quipes", "columns": {"TECHNICIEN": {"name": "TECHNICIEN", "description": "Format 'pr\u00e9nom nom'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "EQUIPE": {"name": "EQUIPE", "description": "\u00c9quipe d'affectation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"TECHNICIEN": "STRING", "Nom": "STRING", "Prenom": "STRING", "Nom_Prenom": "STRING", "EQUIPE": "STRING"}}, "created_at": 1760962912.27857, "relation_name": "`evs-datastack-prod`.`prod_reference`.`techniciens_clean`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "seed.dbt_warehouse.tarification_ref_clean": {"database": "evs-datastack-prod", "schema": "prod_reference", "name": "tarification_ref_clean", "resource_type": "seed", "package_name": "dbt_warehouse", "path": "reference_data/tarification_ref_clean.csv", "original_file_path": "data/reference_data/tarification_ref_clean.csv", "unique_id": "seed.dbt_warehouse.tarification_ref_clean", "fqn": ["dbt_warehouse", "reference_data", "tarification_ref_clean"], "alias": "tarification_ref_clean", "checksum": {"name": "sha256", "checksum": "9a6b396db8b35114fa8130756d7701993cbd84cb2e6ada4cf3a75f354f75bcdd"}, "config": {"enabled": true, "alias": null, "schema": "reference", "database": null, "tags": ["reference"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"TYPE_INTER": "STRING", "MACHINE": "STRING", "KEY": "STRING", "MARQUE": "STRING", "METROPOLE": "STRING", "Type_tarif": "STRING", "Montant": "INTEGER", "PROD": "INTEGER"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["reference"], "description": "Grille tarifaire compl\u00e8te", "columns": {"KEY": {"name": "KEY", "description": "Cl\u00e9 de tarification composite", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Montant": {"name": "Montant", "description": "Montant en euros", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PROD": {"name": "PROD", "description": "Indicateur production", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_warehouse://data/schema.yml", "build_path": null, "unrendered_config": {"materialized": "seed", "schema": "reference", "tags": ["reference"], "column_types": {"TYPE_INTER": "STRING", "MACHINE": "STRING", "KEY": "STRING", "MARQUE": "STRING", "METROPOLE": "STRING", "Type_tarif": "STRING", "Montant": "INTEGER", "PROD": "INTEGER"}}, "created_at": 1760962912.2815764, "relation_name": "`evs-datastack-prod`.`prod_reference`.`tarification_ref_clean`", "raw_code": "", "doc_blocks": [], "root_path": "/home/runner/work/dbt_transform/dbt_transform", "depends_on": {"macros": []}}, "test.dbt_warehouse.unique_stg_yuman__clients_client_id.f44f6dd39f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__clients_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__clients_client_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__clients_client_id.f44f6dd39f", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__clients_client_id"], "alias": "unique_stg_yuman__clients_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.142635, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__clients_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select client_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\n  where client_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__clients", "attached_node": "model.dbt_warehouse.stg_yuman__clients", "test_metadata": {"name": "unique", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__clients_client_id.2396172faf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__clients_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__clients_client_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__clients_client_id.2396172faf", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__clients_client_id"], "alias": "not_null_stg_yuman__clients_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1459699, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__clients_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__clients", "attached_node": "model.dbt_warehouse.stg_yuman__clients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__sites_site_id.c2fdd1abc3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__sites_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__sites_site_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__sites_site_id.c2fdd1abc3", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__sites_site_id"], "alias": "unique_stg_yuman__sites_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1487005, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__sites_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select site_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n  where site_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__sites", "attached_node": "model.dbt_warehouse.stg_yuman__sites", "test_metadata": {"name": "unique", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__sites_site_id.7b80b04fc4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__sites_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__sites_site_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__sites_site_id.7b80b04fc4", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__sites_site_id"], "alias": "not_null_stg_yuman__sites_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1513338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__sites_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__sites", "attached_node": "model.dbt_warehouse.stg_yuman__sites", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__sites_client_id.a2a87aa602": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__sites_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__sites_client_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__sites_client_id.a2a87aa602", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__sites_client_id"], "alias": "not_null_stg_yuman__sites_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1542065, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__sites_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__sites", "attached_node": "model.dbt_warehouse.stg_yuman__sites", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_"], "alias": "relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4"}, "created_at": 1760962911.1579945, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__sites_9e706969cb26ef4921df384c710c23d4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select client_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n    where client_id is not null\n),\n\nparent as (\n    select client_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__sites", "attached_node": "model.dbt_warehouse.stg_yuman__sites", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__clients')", "field": "client_id", "column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__materials_material_id.0de6595c40": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__materials_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__materials_material_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__materials_material_id.0de6595c40", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__materials_material_id"], "alias": "unique_stg_yuman__materials_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1854906, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__materials_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select material_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\n  where material_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.stg_yuman__materials", "attached_node": "model.dbt_warehouse.stg_yuman__materials", "test_metadata": {"name": "unique", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('stg_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__materials_material_id.ebfe5a9c25": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__materials_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__materials_material_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__materials_material_id.ebfe5a9c25", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__materials_material_id"], "alias": "not_null_stg_yuman__materials_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1880054, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__materials_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect material_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\nwhere material_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.stg_yuman__materials", "attached_node": "model.dbt_warehouse.stg_yuman__materials", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('stg_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__materials_site_id.e77c7f24c2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__materials_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__materials_site_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__materials_site_id.e77c7f24c2", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__materials_site_id"], "alias": "not_null_stg_yuman__materials_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.1905975, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__materials_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__materials", "attached_node": "model.dbt_warehouse.stg_yuman__materials", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_"], "alias": "relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69"}, "created_at": 1760962911.1930645, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__mater_0e822cb7c2cb679776031cffd5e75d69.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select site_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\n    where site_id is not null\n),\n\nparent as (\n    select site_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__materials", "attached_node": "model.dbt_warehouse.stg_yuman__materials", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__sites')", "field": "site_id", "column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_"], "alias": "relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a"}, "created_at": 1760962911.199508, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials_categories", "package": null, "version": null}, {"name": "stg_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__materials_categories", "model.dbt_warehouse.stg_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__mater_8c7a3f1975002609dd8dcd2def505b0a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\n    where category_id is not null\n),\n\nparent as (\n    select category_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials_categories`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.stg_yuman__materials", "attached_node": "model.dbt_warehouse.stg_yuman__materials", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__materials_categories')", "field": "category_id", "column_name": "category_id", "model": "{{ get_where_subquery(ref('stg_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__products_product_id.da6f1079d3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__products_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__products_product_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__products_product_id.da6f1079d3", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__products_product_id"], "alias": "unique_stg_yuman__products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2057333, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__products_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__products`\n  where product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_yuman__products", "attached_node": "model.dbt_warehouse.stg_yuman__products", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_yuman__products')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__products_product_id.4e68e010db": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__products_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__products_product_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__products_product_id.4e68e010db", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__products_product_id"], "alias": "not_null_stg_yuman__products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2081435, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__products_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__products`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_yuman__products", "attached_node": "model.dbt_warehouse.stg_yuman__products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_yuman__products')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__users_user_id.e4b2c79cf4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__users_user_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__users_user_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__users_user_id.e4b2c79cf4", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__users_user_id"], "alias": "unique_stg_yuman__users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.210541, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__users", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__users"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__users_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__users`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_yuman__users", "attached_node": "model.dbt_warehouse.stg_yuman__users", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_yuman__users')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__users_user_id.9881abfe99": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__users_user_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__users_user_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__users_user_id.9881abfe99", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__users_user_id"], "alias": "not_null_stg_yuman__users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2128904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__users", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__users"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__users_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__users`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_yuman__users", "attached_node": "model.dbt_warehouse.stg_yuman__users", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_yuman__users')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__workorder_demands_categories_demand_category_id.36d7a5e24e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__workorder_demands_categories_demand_category_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__workorder_demands_categories_demand_category_id.36d7a5e24e", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__workorder_demands_categories_demand_category_id"], "alias": "unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e"}, "created_at": 1760962911.2153928, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__workorder_de_2ba319bb5c2d2cedaf9d83ca8807380e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select demand_category_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories`\n  where demand_category_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "demand_category_id", "file_key_name": "models.stg_yuman__workorder_demands_categories", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "test_metadata": {"name": "unique", "kwargs": {"column_name": "demand_category_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_categories_demand_category_id.5e8aa9b42e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_demands_categories_demand_category_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_categories_demand_category_id.5e8aa9b42e", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_demands_categories_demand_category_id"], "alias": "not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03"}, "created_at": 1760962911.2177932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder__5bf1112cea3d47a227b8c5e379d51f03.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect demand_category_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories`\nwhere demand_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "demand_category_id", "file_key_name": "models.stg_yuman__workorder_demands_categories", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "demand_category_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__workorder_demands_demand_id.adbb788cb2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__workorder_demands_demand_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__workorder_demands_demand_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__workorder_demands_demand_id.adbb788cb2", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__workorder_demands_demand_id"], "alias": "unique_stg_yuman__workorder_demands_demand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2201526, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__workorder_demands_demand_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select demand_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n  where demand_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "demand_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "unique", "kwargs": {"column_name": "demand_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_demand_id.12776f5dd4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_demands_demand_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder_demands_demand_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_demand_id.12776f5dd4", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_demands_demand_id"], "alias": "not_null_stg_yuman__workorder_demands_demand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.222509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder_demands_demand_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect demand_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\nwhere demand_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "demand_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "demand_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_"], "alias": "relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4"}, "created_at": 1760962911.2250097, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_8c2c2f37721851b0877573d486f902d4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select client_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n    where client_id is not null\n),\n\nparent as (\n    select client_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__clients')", "field": "client_id", "column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_"], "alias": "relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88"}, "created_at": 1760962911.2311513, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_4b29871a4baddf7bf03c947fc51fdb88.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select site_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n    where site_id is not null\n),\n\nparent as (\n    select site_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__sites')", "field": "site_id", "column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_"], "alias": "relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2"}, "created_at": 1760962911.2383163, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__materials", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_a45da52ca93ae51f754530ed358860b2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select material_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n    where material_id is not null\n),\n\nparent as (\n    select material_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__materials`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__materials')", "field": "material_id", "column_name": "material_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_"], "alias": "relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73"}, "created_at": 1760962911.2443817, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__users", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__users", "model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_d90ed3d96dd76554a2a96d794b4f5f73.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select user_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n    where user_id is not null\n),\n\nparent as (\n    select user_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__users')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_"], "alias": "relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d"}, "created_at": 1760962911.2505343, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_demands_categories", "package": null, "version": null}, {"name": "stg_yuman__workorder_demands", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories", "model.dbt_warehouse.stg_yuman__workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_2fedaa5787cb9c63ed34f2475dcc950d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select demand_category_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands`\n    where demand_category_id is not null\n),\n\nparent as (\n    select demand_category_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_demands_categories`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "demand_category_id", "file_key_name": "models.stg_yuman__workorder_demands", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_demands", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__workorder_demands_categories')", "field": "demand_category_id", "column_name": "demand_category_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__workorders_workorder_id.38a2d26084": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__workorders_workorder_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__workorders_workorder_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__workorders_workorder_id.38a2d26084", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__workorders_workorder_id"], "alias": "unique_stg_yuman__workorders_workorder_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2566383, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__workorders_workorder_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select workorder_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n  where workorder_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_id", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "workorder_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorders_workorder_id.7745d31fcf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorders_workorder_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorders_workorder_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorders_workorder_id.7745d31fcf", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorders_workorder_id"], "alias": "not_null_stg_yuman__workorders_workorder_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.259029, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorders_workorder_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect workorder_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\nwhere workorder_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_id", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workorder_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_"], "alias": "relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10"}, "created_at": 1760962911.2614794, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__clients", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_17e1e149f7c5891093e52ba361d54b10.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select client_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n    where client_id is not null\n),\n\nparent as (\n    select client_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__clients`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__clients')", "field": "client_id", "column_name": "client_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_"], "alias": "relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638"}, "created_at": 1760962911.2675571, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__sites", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_9f2ef5f413b9391d7a529d75bce07638.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select site_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n    where site_id is not null\n),\n\nparent as (\n    select site_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__sites`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__sites')", "field": "site_id", "column_name": "site_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_"], "alias": "relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018"}, "created_at": 1760962911.2736187, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorders_categories", "package": null, "version": null}, {"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorders_categories", "model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_77c952f2164c45b3de764900712d5018.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n    where category_id is not null\n),\n\nparent as (\n    select category_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders_categories`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__workorders_categories')", "field": "category_id", "column_name": "category_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorders_created_at.0aad14f863": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorders_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorders_created_at.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorders_created_at.0aad14f863", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorders_created_at"], "alias": "not_null_stg_yuman__workorders_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2798858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorders_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_yuman__workorders", "attached_node": "model.dbt_warehouse.stg_yuman__workorders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_yuman__workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__purchase_orders_purchase_order_line_id.6a52ee22dc": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__purchase_orders_purchase_order_line_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__purchase_orders_purchase_order_line_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__purchase_orders_purchase_order_line_id.6a52ee22dc", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__purchase_orders_purchase_order_line_id"], "alias": "unique_stg_yuman__purchase_orders_purchase_order_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2823286, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__purchase_orders_purchase_order_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select purchase_order_line_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__purchase_orders`\n  where purchase_order_line_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_line_id", "file_key_name": "models.stg_yuman__purchase_orders", "attached_node": "model.dbt_warehouse.stg_yuman__purchase_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "purchase_order_line_id", "model": "{{ get_where_subquery(ref('stg_yuman__purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_line_id.d6eed878cf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__purchase_orders_purchase_order_line_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__purchase_orders_purchase_order_line_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_line_id.d6eed878cf", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__purchase_orders_purchase_order_line_id"], "alias": "not_null_stg_yuman__purchase_orders_purchase_order_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2847328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__purchase_orders_purchase_order_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_line_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__purchase_orders`\nwhere purchase_order_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_line_id", "file_key_name": "models.stg_yuman__purchase_orders", "attached_node": "model.dbt_warehouse.stg_yuman__purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_order_line_id", "model": "{{ get_where_subquery(ref('stg_yuman__purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_id.668459bb5c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__purchase_orders_purchase_order_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__purchase_orders_purchase_order_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_id.668459bb5c", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__purchase_orders_purchase_order_id"], "alias": "not_null_stg_yuman__purchase_orders_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2871292, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__purchase_orders_purchase_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__purchase_orders`\nwhere purchase_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_id", "file_key_name": "models.stg_yuman__purchase_orders", "attached_node": "model.dbt_warehouse.stg_yuman__purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ get_where_subquery(ref('stg_yuman__purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_"], "alias": "relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9"}, "created_at": 1760962911.2896948, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__products", "package": null, "version": null}, {"name": "stg_yuman__purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__products", "model.dbt_warehouse.stg_yuman__purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__purch_a62d6bf06f336d5e28cb022119dce0a9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__purchase_orders`\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__products`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_yuman__purchase_orders", "attached_node": "model.dbt_warehouse.stg_yuman__purchase_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__products')", "field": "product_id", "column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_yuman__purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_yuman__workorder_products_workorder_product_id.1591ef7ef7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_yuman__workorder_products_workorder_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_yuman__workorder_products_workorder_product_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_yuman__workorder_products_workorder_product_id.1591ef7ef7", "fqn": ["dbt_warehouse", "staging", "yuman", "unique_stg_yuman__workorder_products_workorder_product_id"], "alias": "unique_stg_yuman__workorder_products_workorder_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2957044, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/unique_stg_yuman__workorder_products_workorder_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select workorder_product_id as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\n  where workorder_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_product_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "unique", "kwargs": {"column_name": "workorder_product_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_product_id.f12c8d1634": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_products_workorder_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder_products_workorder_product_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_product_id.f12c8d1634", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_products_workorder_product_id"], "alias": "not_null_stg_yuman__workorder_products_workorder_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.2982647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder_products_workorder_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect workorder_product_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\nwhere workorder_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_product_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workorder_product_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_id.a954e8ba15": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_products_workorder_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder_products_workorder_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_id.a954e8ba15", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_products_workorder_id"], "alias": "not_null_stg_yuman__workorder_products_workorder_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3006582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder_products_workorder_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect workorder_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\nwhere workorder_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "workorder_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_"], "alias": "relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238"}, "created_at": 1760962911.3030636, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorders", "package": null, "version": null}, {"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorders", "model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_ec673429d046e75397091e7e9c4eb238.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select workorder_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\n    where workorder_id is not null\n),\n\nparent as (\n    select workorder_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorders`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workorder_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__workorders')", "field": "workorder_id", "column_name": "workorder_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_id.92e35e7cb0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_products_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder_products_product_id.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_id.92e35e7cb0", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_products_product_id"], "alias": "not_null_stg_yuman__workorder_products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3091204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder_products_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9", "fqn": ["dbt_warehouse", "staging", "yuman", "relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_"], "alias": "relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106"}, "created_at": 1760962911.3115695, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__products", "package": null, "version": null}, {"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__products", "model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/relationships_stg_yuman__worko_dea20f83a5c6a518e37f443bcab89106.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_yuman__products`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_yuman__products')", "field": "product_id", "column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_quantity.9f9bbee75c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_yuman__workorder_products_product_quantity", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_yuman__workorder_products_product_quantity.sql", "original_file_path": "models/staging/yuman/_yuman__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_quantity.9f9bbee75c", "fqn": ["dbt_warehouse", "staging", "yuman", "not_null_stg_yuman__workorder_products_product_quantity"], "alias": "not_null_stg_yuman__workorder_products_product_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3176432, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_yuman__workorder_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_yuman__workorder_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__models.yml/not_null_stg_yuman__workorder_products_product_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_quantity\nfrom `evs-datastack-prod`.`prod_staging`.`stg_yuman__workorder_products`\nwhere product_quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_quantity", "file_key_name": "models.stg_yuman__workorder_products", "attached_node": "model.dbt_warehouse.stg_yuman__workorder_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_quantity", "model": "{{ get_where_subquery(ref('stg_yuman__workorder_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__company_idcompany.f25c2833cc": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__company_idcompany.f25c2833cc", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__company_idcompany"], "alias": "unique_stg_oracle_neshu__company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.375012, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcompany as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n  where idcompany is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__company_idcompany.a1f4fb5739": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__company_idcompany.a1f4fb5739", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__company_idcompany"], "alias": "not_null_stg_oracle_neshu__company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3776453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_"], "alias": "relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68"}, "created_at": 1760962911.380114, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_type", "package": null, "version": null}, {"name": "stg_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_type", "model.dbt_warehouse.stg_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_48b52fb87a8a0a16deb4c935acd6bd68.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_type as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n    where idcompany_type is not null\n),\n\nparent as (\n    select idcompany_type as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_type`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_type", "file_key_name": "models.stg_oracle_neshu__company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company_type')", "field": "idcompany_type", "column_name": "idcompany_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation.a2b189f3f3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__company_has_location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__company_has_location_idlocation.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation.a2b189f3f3", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__company_has_location_idlocation"], "alias": "not_null_stg_oracle_neshu__company_has_location_idlocation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3865616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__company_has_location_idlocation.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`\nwhere idlocation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__company_has_location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_"], "alias": "relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b"}, "created_at": 1760962911.3890264, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_36806d9228585ebdda76ff1358df000b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlocation as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`\n    where idlocation is not null\n),\n\nparent as (\n    select idlocation as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__company_has_location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__location')", "field": "idlocation", "column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idcompany.ed01157bcd": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__company_has_location_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__company_has_location_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idcompany.ed01157bcd", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__company_has_location_idcompany"], "alias": "not_null_stg_oracle_neshu__company_has_location_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.3952315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__company_has_location_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__company_has_location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d"}, "created_at": 1760962911.397689, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_869227855006811f1fb546e32b87e84d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`\n    where idcompany is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__company_has_location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation_type.9d6f83a35c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__company_has_location_idlocation_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__company_has_location_idlocation_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation_type.9d6f83a35c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__company_has_location_idlocation_type"], "alias": "not_null_stg_oracle_neshu__company_has_location_idlocation_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.404362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_has_location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__company_has_location_idlocation_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation_type\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_has_location`\nwhere idlocation_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation_type", "file_key_name": "models.stg_oracle_neshu__company_has_location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__company_type_idcompany_type.d5392ad073": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__company_type_idcompany_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__company_type_idcompany_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__company_type_idcompany_type.d5392ad073", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__company_type_idcompany_type"], "alias": "unique_stg_oracle_neshu__company_type_idcompany_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4068205, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__company_type_idcompany_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcompany_type as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_type`\n  where idcompany_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_type", "file_key_name": "models.stg_oracle_neshu__company_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_type", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcompany_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__company_type_idcompany_type.7432808513": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__company_type_idcompany_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__company_type_idcompany_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__company_type_idcompany_type.7432808513", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__company_type_idcompany_type"], "alias": "not_null_stg_oracle_neshu__company_type_idcompany_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4091964, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__company_type_idcompany_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany_type\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company_type`\nwhere idcompany_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_type", "file_key_name": "models.stg_oracle_neshu__company_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__company_type", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__company_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__contact_idcontact.fc71eec394": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__contact_idcontact", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__contact_idcontact.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__contact_idcontact.fc71eec394", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__contact_idcontact"], "alias": "unique_stg_oracle_neshu__contact_idcontact", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4117143, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contact", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__contact_idcontact.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcontact as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contact`\n  where idcontact is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontact", "file_key_name": "models.stg_oracle_neshu__contact", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contact", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcontact", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contact')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__contact_idcontact.257cd1bcbe": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__contact_idcontact", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__contact_idcontact.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__contact_idcontact.257cd1bcbe", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__contact_idcontact"], "alias": "not_null_stg_oracle_neshu__contact_idcontact", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4141064, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contact", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__contact_idcontact.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontact\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contact`\nwhere idcontact is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontact", "file_key_name": "models.stg_oracle_neshu__contact", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contact", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontact", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contact')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663"}, "created_at": 1760962911.4165723, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__contact", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_d4bbf29767ffd1e199f4d3d53795f663.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contact`\n    where idcompany is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__contact", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contact", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contact')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__contract_idcontract.7b7904e17e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__contract_idcontract.7b7904e17e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__contract_idcontract"], "alias": "unique_stg_oracle_neshu__contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4228106, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcontract as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract`\n  where idcontract is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "models.stg_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contract", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__contract_idcontract.fd3fe25c02": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__contract_idcontract.fd3fe25c02", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__contract_idcontract"], "alias": "not_null_stg_oracle_neshu__contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4252083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontract\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract`\nwhere idcontract is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "models.stg_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973"}, "created_at": 1760962911.4276407, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_f4cf96e1404658e314a201abbcc90973.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_peer as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract`\n    where idcompany_peer is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_peer", "file_key_name": "models.stg_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__contract", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_peer", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__device_iddevice.0ca29b8e9a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__device_iddevice.0ca29b8e9a", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__device_iddevice"], "alias": "unique_stg_oracle_neshu__device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.433742, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select iddevice as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n  where iddevice is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "unique", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__device_iddevice.27e0db8158": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__device_iddevice.27e0db8158", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__device_iddevice"], "alias": "not_null_stg_oracle_neshu__device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4361708, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect iddevice\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\nwhere iddevice is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_"], "alias": "relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd"}, "created_at": 1760962911.4387817, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_7e52b9f69cb43af4a85d3ea136cd29fd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlocation as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n    where idlocation is not null\n),\n\nparent as (\n    select idlocation as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__location')", "field": "idlocation", "column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969"}, "created_at": 1760962911.4448364, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_a360e35662d9e20d71b92f770f808969.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_customer as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n    where idcompany_customer is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_customer", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_customer", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032"}, "created_at": 1760962911.4509854, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_e2ae107d5fa659e1ec15443949768032.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_supplier as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n    where idcompany_supplier is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_supplier", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_supplier", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3"}, "created_at": 1760962911.4572375, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_d6ca625754439b557acb327b6e4d22f3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_owner as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n    where idcompany_owner is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_owner", "file_key_name": "models.stg_oracle_neshu__device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_owner", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__label_idlabel.9ab3749a9c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__label_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__label_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__label_idlabel.9ab3749a9c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__label_idlabel"], "alias": "unique_stg_oracle_neshu__label_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4633803, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__label_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlabel as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n  where idlabel is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_idlabel.f0d32bb28d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_idlabel.f0d32bb28d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_idlabel"], "alias": "not_null_stg_oracle_neshu__label_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.465812, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__label_family_idlabel_family.bcaa4d9c71": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__label_family_idlabel_family", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__label_family_idlabel_family.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__label_family_idlabel_family.bcaa4d9c71", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__label_family_idlabel_family"], "alias": "unique_stg_oracle_neshu__label_family_idlabel_family", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4681888, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__label_family_idlabel_family.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlabel_family as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family`\n  where idlabel_family is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel_family", "file_key_name": "models.stg_oracle_neshu__label_family", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_family", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlabel_family", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_family')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_family_idlabel_family.da97b662a1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_family_idlabel_family", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_family_idlabel_family.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_family_idlabel_family.da97b662a1", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_family_idlabel_family"], "alias": "not_null_stg_oracle_neshu__label_family_idlabel_family", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4706018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_family", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_family_idlabel_family.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel_family\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_family`\nwhere idlabel_family is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel_family", "file_key_name": "models.stg_oracle_neshu__label_family", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_family", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel_family", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_family')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idlabel.1abe8b79c5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_company_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_company_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idlabel.1abe8b79c5", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_company_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_company_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.473102, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_company_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_"], "alias": "relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124"}, "created_at": 1760962911.475544, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_821049bfb6397ec441c42b6bca97f124.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlabel as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company`\n    where idlabel is not null\n),\n\nparent as (\n    select idlabel as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__label')", "field": "idlabel", "column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idcompany.b2f23ed472": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idcompany.b2f23ed472", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_company_idcompany"], "alias": "not_null_stg_oracle_neshu__label_has_company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4817495, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__label_has_company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844"}, "created_at": 1760962911.4842093, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_dfd6f1ac5aa4ad76d89ebc9a6d49e844.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_company`\n    where idcompany is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__label_has_company", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idlabel.6c3946bf93": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_contract_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_contract_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idlabel.6c3946bf93", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_contract_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_contract_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4903283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_contract_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_"], "alias": "relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7"}, "created_at": 1760962911.492773, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_f123f3daa438f42aee7ad677d33ffac7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlabel as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract`\n    where idlabel is not null\n),\n\nparent as (\n    select idlabel as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__label')", "field": "idlabel", "column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idcontract.dbb35a2666": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idcontract.dbb35a2666", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_contract_idcontract"], "alias": "not_null_stg_oracle_neshu__label_has_contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.4989095, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontract\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract`\nwhere idcontract is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "models.stg_oracle_neshu__label_has_contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_"], "alias": "relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5"}, "created_at": 1760962911.5013807, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contract", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contract", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_fd7f3b1fc5532997446c221296ae23a5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcontract as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_contract`\n    where idcontract is not null\n),\n\nparent as (\n    select idcontract as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contract`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "models.stg_oracle_neshu__label_has_contract", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__contract')", "field": "idcontract", "column_name": "idcontract", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_idlabel.2efbd34860": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_device_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_device_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_idlabel.2efbd34860", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_device_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_device_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5079777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_device_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_"], "alias": "relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4"}, "created_at": 1760962911.5104525, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_a13666c7e333759cf9cb4bc20ac07bb4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlabel as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device`\n    where idlabel is not null\n),\n\nparent as (\n    select idlabel as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__label')", "field": "idlabel", "column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_iddevice.c9592a7b37": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_iddevice.c9592a7b37", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_device_iddevice"], "alias": "not_null_stg_oracle_neshu__label_has_device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5165346, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect iddevice\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device`\nwhere iddevice is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "models.stg_oracle_neshu__label_has_device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_"], "alias": "relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685"}, "created_at": 1760962911.5189593, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_312c70593b7554be86b4ecbdb2d44685.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select iddevice as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_device`\n    where iddevice is not null\n),\n\nparent as (\n    select iddevice as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "models.stg_oracle_neshu__label_has_device", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__device')", "field": "iddevice", "column_name": "iddevice", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idlabel.c10c951091": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_product_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_product_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idlabel.c10c951091", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_product_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_product_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5250235, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_product_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_"], "alias": "relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490"}, "created_at": 1760962911.5274994, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_2ce35de72eb67fb8b88a60f7b7f18490.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlabel as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product`\n    where idlabel is not null\n),\n\nparent as (\n    select idlabel as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__label')", "field": "idlabel", "column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idproduct.48b2a5d583": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idproduct.48b2a5d583", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_product_idproduct"], "alias": "not_null_stg_oracle_neshu__label_has_product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.533561, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product`\nwhere idproduct is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "models.stg_oracle_neshu__label_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_"], "alias": "relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68"}, "created_at": 1760962911.5359905, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_8955084f61de5e6f26c09a10a00a2e68.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idproduct as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_product`\n    where idproduct is not null\n),\n\nparent as (\n    select idproduct as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "models.stg_oracle_neshu__label_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__product')", "field": "idproduct", "column_name": "idproduct", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idlabel.03938ed9d6": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_resources_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_resources_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idlabel.03938ed9d6", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_resources_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_resources_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5420482, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_resources_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_resources`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_"], "alias": "relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be"}, "created_at": 1760962911.5445037, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_8681b24e0b1fe5fc7d45aec392fef3be.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlabel as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_resources`\n    where idlabel is not null\n),\n\nparent as (\n    select idlabel as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__label')", "field": "idlabel", "column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idresources.c45dd6d64e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idresources.c45dd6d64e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_resources_idresources"], "alias": "not_null_stg_oracle_neshu__label_has_resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5506096, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__label_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_"], "alias": "relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0"}, "created_at": 1760962911.553064, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__label_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_18d00bc11953403279d2ab2e2985ece0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idresources as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_resources`\n    where idresources is not null\n),\n\nparent as (\n    select idresources as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__label_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__resources')", "field": "idresources", "column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idlabel.231c8d8c24": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_task_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_task_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idlabel.231c8d8c24", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_task_idlabel"], "alias": "not_null_stg_oracle_neshu__label_has_task_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5591629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_task_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "models.stg_oracle_neshu__label_has_task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idtask.dd0526ea2b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__label_has_task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__label_has_task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idtask.dd0526ea2b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__label_has_task_idtask"], "alias": "not_null_stg_oracle_neshu__label_has_task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5615847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__label_has_task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__label_has_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__label_has_task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__label_has_task`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__label_has_task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__label_has_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__location_idlocation.1903e54c83": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__location_idlocation.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__location_idlocation.1903e54c83", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__location_idlocation"], "alias": "unique_stg_oracle_neshu__location_idlocation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5639544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__location_idlocation.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlocation as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\n  where idlocation is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__location", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__location')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__location_idlocation.fc8389056b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__location_idlocation.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__location_idlocation.fc8389056b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__location_idlocation"], "alias": "not_null_stg_oracle_neshu__location_idlocation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5665417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__location_idlocation.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\nwhere idlocation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__location", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__location')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__product_idproduct.ecd2622966": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__product_idproduct.ecd2622966", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__product_idproduct"], "alias": "unique_stg_oracle_neshu__product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5689135, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idproduct as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`\n  where idproduct is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "models.stg_oracle_neshu__product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__product_idproduct.2c91d8d9c3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__product_idproduct.2c91d8d9c3", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__product_idproduct"], "alias": "not_null_stg_oracle_neshu__product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.571282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`\nwhere idproduct is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "models.stg_oracle_neshu__product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_"], "alias": "relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d"}, "created_at": 1760962911.5737143, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product_type", "package": null, "version": null}, {"name": "stg_oracle_neshu__product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product_type", "model.dbt_warehouse.stg_oracle_neshu__product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_ab9f920f71225cac75d04806b2c9040d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idproduct_type as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`\n    where idproduct_type is not null\n),\n\nparent as (\n    select idproduct_type as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product_type`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct_type", "file_key_name": "models.stg_oracle_neshu__product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__product_type')", "field": "idproduct_type", "column_name": "idproduct_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__product')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__product_type_idproduct_type.9bdaa55835": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__product_type_idproduct_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__product_type_idproduct_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__product_type_idproduct_type.9bdaa55835", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__product_type_idproduct_type"], "alias": "unique_stg_oracle_neshu__product_type_idproduct_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.579814, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__product_type_idproduct_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idproduct_type as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product_type`\n  where idproduct_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct_type", "file_key_name": "models.stg_oracle_neshu__product_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__product_type", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idproduct_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__product_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__product_type_idproduct_type.99ebe48fd1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__product_type_idproduct_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__product_type_idproduct_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__product_type_idproduct_type.99ebe48fd1", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__product_type_idproduct_type"], "alias": "not_null_stg_oracle_neshu__product_type_idproduct_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5821624, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__product_type_idproduct_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct_type\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product_type`\nwhere idproduct_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct_type", "file_key_name": "models.stg_oracle_neshu__product_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__product_type", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__product_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__resources_idresources.20bf66b8cb": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__resources_idresources.20bf66b8cb", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__resources_idresources"], "alias": "unique_stg_oracle_neshu__resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.5845494, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idresources as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n  where idresources is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_idresources.eb8d9bd2ca": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_idresources.eb8d9bd2ca", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__resources_idresources"], "alias": "not_null_stg_oracle_neshu__resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.587111, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388"}, "created_at": 1760962911.5895278, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_5980569e1385454bfa9b3c50a025f388.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n    where idcompany is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "models.stg_oracle_neshu__resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_"], "alias": "relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65"}, "created_at": 1760962911.5956385, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_9fbd5ecdbe5cd7883a39fc55479a0e65.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlocation as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n    where idlocation is not null\n),\n\nparent as (\n    select idlocation as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__location')", "field": "idlocation", "column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_"], "alias": "relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920"}, "created_at": 1760962911.6017766, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources_type", "package": null, "version": null}, {"name": "stg_oracle_neshu__resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources_type", "model.dbt_warehouse.stg_oracle_neshu__resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_7effdd5082afdcd67111c87350a14920.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idresources_type as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n    where idresources_type is not null\n),\n\nparent as (\n    select idresources_type as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources_type`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources_type", "file_key_name": "models.stg_oracle_neshu__resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__resources_type')", "field": "idresources_type", "column_name": "idresources_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__resources_type_idresources_type.60d0042392": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__resources_type_idresources_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__resources_type_idresources_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__resources_type_idresources_type.60d0042392", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__resources_type_idresources_type"], "alias": "unique_stg_oracle_neshu__resources_type_idresources_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6085272, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__resources_type_idresources_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idresources_type as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources_type`\n  where idresources_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources_type", "file_key_name": "models.stg_oracle_neshu__resources_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources_type", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idresources_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_type_idresources_type.9e5d062342": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__resources_type_idresources_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__resources_type_idresources_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_type_idresources_type.9e5d062342", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__resources_type_idresources_type"], "alias": "not_null_stg_oracle_neshu__resources_type_idresources_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6109753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__resources_type_idresources_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources_type\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources_type`\nwhere idresources_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources_type", "file_key_name": "models.stg_oracle_neshu__resources_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__resources_type", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__resources_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__task_idtask.d1f0e7ba99": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__task_idtask.d1f0e7ba99", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__task_idtask"], "alias": "unique_stg_oracle_neshu__task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.613349, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n  where idtask is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_idtask.2b9ac7a02d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_idtask.2b9ac7a02d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_idtask"], "alias": "not_null_stg_oracle_neshu__task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6156995, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d"}, "created_at": 1760962911.618071, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_5d738e7918ee3e609a913ea12049107d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_peer as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where idcompany_peer is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_peer", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_peer", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_"], "alias": "relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d"}, "created_at": 1760962911.6240692, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_type", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_type", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_17cf82ca8476f1b6c59a942ebe28ad6d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idtask_type as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where idtask_type is not null\n),\n\nparent as (\n    select idtask_type as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_type`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_type", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__task_type')", "field": "idtask_type", "column_name": "idtask_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_"], "alias": "relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1"}, "created_at": 1760962911.6301172, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_status", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_status", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_18a4042a71e63320513e7fe6ad19b8c1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idtask_status as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where idtask_status is not null\n),\n\nparent as (\n    select idtask_status as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_status", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__task_status')", "field": "idtask_status", "column_name": "idtask_status", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_"], "alias": "relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f"}, "created_at": 1760962911.6362453, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__device", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_eecc0037192dadf5c797af11d5dafc6f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select iddevice as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where iddevice is not null\n),\n\nparent as (\n    select iddevice as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__device`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__device')", "field": "iddevice", "column_name": "iddevice", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_"], "alias": "relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47"}, "created_at": 1760962911.6423628, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__contact", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__contact", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_1d48fd73fe803a2ad8678beba9961c47.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcontact as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where idcontact is not null\n),\n\nparent as (\n    select idcontact as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__contact`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontact", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__contact')", "field": "idcontact", "column_name": "idcontact", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_"], "alias": "relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d"}, "created_at": 1760962911.6483169, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__location", "package": null, "version": null}, {"name": "stg_oracle_neshu__task", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_34ead456245e0af32ec162163c2e1a7d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idlocation as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n    where idlocation is not null\n),\n\nparent as (\n    select idlocation as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__location`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "models.stg_oracle_neshu__task", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__location')", "field": "idlocation", "column_name": "idlocation", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__task_has_product_idtask_has_product.3f7428b52a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__task_has_product_idtask_has_product", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__task_has_product_idtask_has_product.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__task_has_product_idtask_has_product.3f7428b52a", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__task_has_product_idtask_has_product"], "alias": "unique_stg_oracle_neshu__task_has_product_idtask_has_product", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6543736, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__task_has_product_idtask_has_product.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_has_product as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\n  where idtask_has_product is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_has_product", "file_key_name": "models.stg_oracle_neshu__task_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_has_product", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_product_idtask_has_product.d3f98a1a05": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_has_product_idtask_has_product", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_has_product_idtask_has_product.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_product_idtask_has_product.d3f98a1a05", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_has_product_idtask_has_product"], "alias": "not_null_stg_oracle_neshu__task_has_product_idtask_has_product", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6567476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_has_product_idtask_has_product.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_has_product\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\nwhere idtask_has_product is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_has_product", "file_key_name": "models.stg_oracle_neshu__task_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_has_product", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_"], "alias": "relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743"}, "created_at": 1760962911.659337, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_22fd544ec94b6f0d9d6dea8096b2e743.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idtask as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\n    where idtask is not null\n),\n\nparent as (\n    select idtask as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__task_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__task')", "field": "idtask", "column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_"], "alias": "relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c"}, "created_at": 1760962911.6654134, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__product", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_9087b9d45de6d65dac04021f450c835c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idproduct as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\n    where idproduct is not null\n),\n\nparent as (\n    select idproduct as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__product`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "models.stg_oracle_neshu__task_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__product')", "field": "idproduct", "column_name": "idproduct", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_"], "alias": "relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1"}, "created_at": 1760962911.6713579, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__company", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_4c7222a768e40bec3f58c8fe73e475c1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idcompany_peer as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_product`\n    where idcompany_peer is not null\n),\n\nparent as (\n    select idcompany as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_peer", "file_key_name": "models.stg_oracle_neshu__task_has_product", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__company')", "field": "idcompany", "column_name": "idcompany_peer", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idtask.c853c7eb7b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_has_resources_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_has_resources_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idtask.c853c7eb7b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_has_resources_idtask"], "alias": "not_null_stg_oracle_neshu__task_has_resources_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6774, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_has_resources_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__task_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_"], "alias": "relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a"}, "created_at": 1760962911.679856, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_4c74acd9d1933f77351f36e1ea607f7a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idtask as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources`\n    where idtask is not null\n),\n\nparent as (\n    select idtask as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "models.stg_oracle_neshu__task_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__task')", "field": "idtask", "column_name": "idtask", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idresources.5afdfd82d8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_has_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_has_resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idresources.5afdfd82d8", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_has_resources_idresources"], "alias": "not_null_stg_oracle_neshu__task_has_resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6858816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_has_resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__task_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_"], "alias": "relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477"}, "created_at": 1760962911.6882899, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__resources", "package": null, "version": null}, {"name": "stg_oracle_neshu__task_has_resources", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/relationships_stg_oracle_neshu_3b287ebb6e5092925bfb826bcdeb7477.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select idresources as from_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_has_resources`\n    where idresources is not null\n),\n\nparent as (\n    select idresources as to_field\n    from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__resources`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "models.stg_oracle_neshu__task_has_resources", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_oracle_neshu__resources')", "field": "idresources", "column_name": "idresources", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__task_status_idtask_status.6822490986": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__task_status_idtask_status", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__task_status_idtask_status.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__task_status_idtask_status.6822490986", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__task_status_idtask_status"], "alias": "unique_stg_oracle_neshu__task_status_idtask_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.694318, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_status", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__task_status_idtask_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_status as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status`\n  where idtask_status is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_status", "file_key_name": "models.stg_oracle_neshu__task_status", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_status", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_status", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_status')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_status_idtask_status.fb3f3fc34e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_status_idtask_status", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_status_idtask_status.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_status_idtask_status.fb3f3fc34e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_status_idtask_status"], "alias": "not_null_stg_oracle_neshu__task_status_idtask_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6966832, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_status", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_status_idtask_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_status\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_status`\nwhere idtask_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_status", "file_key_name": "models.stg_oracle_neshu__task_status", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_status", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_status')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_stg_oracle_neshu__task_type_idtask_type.6a67987299": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_stg_oracle_neshu__task_type_idtask_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_stg_oracle_neshu__task_type_idtask_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.unique_stg_oracle_neshu__task_type_idtask_type.6a67987299", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "unique_stg_oracle_neshu__task_type_idtask_type"], "alias": "unique_stg_oracle_neshu__task_type_idtask_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.6991525, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/unique_stg_oracle_neshu__task_type_idtask_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_type as unique_field\n  from `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_type`\n  where idtask_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_type", "file_key_name": "models.stg_oracle_neshu__task_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_type", "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_stg_oracle_neshu__task_type_idtask_type.30b55370e2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_stg_oracle_neshu__task_type_idtask_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_stg_oracle_neshu__task_type_idtask_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__models.yml", "unique_id": "test.dbt_warehouse.not_null_stg_oracle_neshu__task_type_idtask_type.30b55370e2", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "not_null_stg_oracle_neshu__task_type_idtask_type"], "alias": "not_null_stg_oracle_neshu__task_type_idtask_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.701558, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_oracle_neshu__task_type", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.stg_oracle_neshu__task_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__models.yml/not_null_stg_oracle_neshu__task_type_idtask_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_type\nfrom `evs-datastack-prod`.`prod_staging`.`stg_oracle_neshu__task_type`\nwhere idtask_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_type", "file_key_name": "models.stg_oracle_neshu__task_type", "attached_node": "model.dbt_warehouse.stg_oracle_neshu__task_type", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_type", "model": "{{ get_where_subquery(ref('stg_oracle_neshu__task_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_yuman__clients_client_id.12116495a3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_yuman__clients_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_yuman__clients_client_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_yuman__clients_client_id.12116495a3", "fqn": ["dbt_warehouse", "marts", "yuman", "unique_dim_yuman__clients_client_id"], "alias": "unique_dim_yuman__clients_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7143674, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/unique_dim_yuman__clients_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select client_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_yuman__clients`\n  where client_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.dim_yuman__clients", "attached_node": "model.dbt_warehouse.dim_yuman__clients", "test_metadata": {"name": "unique", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('dim_yuman__clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__clients_client_id.bb975d2fa4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__clients_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__clients_client_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__clients_client_id.bb975d2fa4", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__clients_client_id"], "alias": "not_null_dim_yuman__clients_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7168453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__clients_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__clients`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.dim_yuman__clients", "attached_node": "model.dbt_warehouse.dim_yuman__clients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('dim_yuman__clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_yuman__sites_site_id.97c9826437": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_yuman__sites_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_yuman__sites_site_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_yuman__sites_site_id.97c9826437", "fqn": ["dbt_warehouse", "marts", "yuman", "unique_dim_yuman__sites_site_id"], "alias": "unique_dim_yuman__sites_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.719237, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/unique_dim_yuman__sites_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select site_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`\n  where site_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.dim_yuman__sites", "attached_node": "model.dbt_warehouse.dim_yuman__sites", "test_metadata": {"name": "unique", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('dim_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__sites_site_id.d284592881": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__sites_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__sites_site_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__sites_site_id.d284592881", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__sites_site_id"], "alias": "not_null_dim_yuman__sites_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7216077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__sites_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.dim_yuman__sites", "attached_node": "model.dbt_warehouse.dim_yuman__sites", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('dim_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__sites_client_id.cd8fb92b93": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__sites_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__sites_client_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__sites_client_id.cd8fb92b93", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__sites_client_id"], "alias": "not_null_dim_yuman__sites_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7239623, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__sites_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.dim_yuman__sites", "attached_node": "model.dbt_warehouse.dim_yuman__sites", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('dim_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42", "fqn": ["dbt_warehouse", "marts", "yuman", "relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_"], "alias": "relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26"}, "created_at": 1760962911.7264998, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__clients", "package": null, "version": null}, {"name": "dim_yuman__sites", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__clients", "model.dbt_warehouse.dim_yuman__sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/relationships_dim_yuman__sites_e9cc008139cd3a8c8046caae5466ec26.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select client_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`\n    where client_id is not null\n),\n\nparent as (\n    select client_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_yuman__clients`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.dim_yuman__sites", "attached_node": "model.dbt_warehouse.dim_yuman__sites", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_yuman__clients')", "field": "client_id", "column_name": "client_id", "model": "{{ get_where_subquery(ref('dim_yuman__sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_yuman__materials_material_id.a2c990b4a9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_yuman__materials_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_yuman__materials_material_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_yuman__materials_material_id.a2c990b4a9", "fqn": ["dbt_warehouse", "marts", "yuman", "unique_dim_yuman__materials_material_id"], "alias": "unique_dim_yuman__materials_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7327712, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/unique_dim_yuman__materials_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select material_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials`\n  where material_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.dim_yuman__materials", "attached_node": "model.dbt_warehouse.dim_yuman__materials", "test_metadata": {"name": "unique", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__materials_material_id.8e2898dbe5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__materials_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__materials_material_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__materials_material_id.8e2898dbe5", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__materials_material_id"], "alias": "not_null_dim_yuman__materials_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7351701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__materials_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect material_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials`\nwhere material_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.dim_yuman__materials", "attached_node": "model.dbt_warehouse.dim_yuman__materials", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__materials_site_id.614d463e6e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__materials_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__materials_site_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__materials_site_id.614d463e6e", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__materials_site_id"], "alias": "not_null_dim_yuman__materials_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7375298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__materials_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.dim_yuman__materials", "attached_node": "model.dbt_warehouse.dim_yuman__materials", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87", "fqn": ["dbt_warehouse", "marts", "yuman", "relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_"], "alias": "relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18"}, "created_at": 1760962911.7399135, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__sites", "package": null, "version": null}, {"name": "dim_yuman__materials", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__sites", "model.dbt_warehouse.dim_yuman__materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/relationships_dim_yuman__mater_380c7956530d082c54cfde0d99998f18.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select site_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials`\n    where site_id is not null\n),\n\nparent as (\n    select site_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_yuman__sites`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.dim_yuman__materials", "attached_node": "model.dbt_warehouse.dim_yuman__materials", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_yuman__sites')", "field": "site_id", "column_name": "site_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__materials_clients_material_id.65161533d1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__materials_clients_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__materials_clients_material_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__materials_clients_material_id.65161533d1", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__materials_clients_material_id"], "alias": "not_null_dim_yuman__materials_clients_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7459683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials_clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__materials_clients_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect material_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials_clients`\nwhere material_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.dim_yuman__materials_clients", "attached_node": "model.dbt_warehouse.dim_yuman__materials_clients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_yuman__materials_clients_material_id.3293b73ed8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_yuman__materials_clients_material_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_yuman__materials_clients_material_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_yuman__materials_clients_material_id.3293b73ed8", "fqn": ["dbt_warehouse", "marts", "yuman", "unique_dim_yuman__materials_clients_material_id"], "alias": "unique_dim_yuman__materials_clients_material_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7483664, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials_clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/unique_dim_yuman__materials_clients_material_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select material_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials_clients`\n  where material_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "material_id", "file_key_name": "models.dim_yuman__materials_clients", "attached_node": "model.dbt_warehouse.dim_yuman__materials_clients", "test_metadata": {"name": "unique", "kwargs": {"column_name": "material_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__materials_clients_client_id.307466ae21": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__materials_clients_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__materials_clients_client_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__materials_clients_client_id.307466ae21", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__materials_clients_client_id"], "alias": "not_null_dim_yuman__materials_clients_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7507594, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials_clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__materials_clients_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials_clients`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "models.dim_yuman__materials_clients", "attached_node": "model.dbt_warehouse.dim_yuman__materials_clients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_yuman__materials_clients_site_id.00254a1aa0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_yuman__materials_clients_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_yuman__materials_clients_site_id.sql", "original_file_path": "models/marts/yuman/_yuman__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_yuman__materials_clients_site_id.00254a1aa0", "fqn": ["dbt_warehouse", "marts", "yuman", "not_null_dim_yuman__materials_clients_site_id"], "alias": "not_null_dim_yuman__materials_clients_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.753208, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_yuman__materials_clients", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_yuman__materials_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/yuman/_yuman__marts_models.yml/not_null_dim_yuman__materials_clients_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_yuman__materials_clients`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "models.dim_yuman__materials_clients", "attached_node": "model.dbt_warehouse.dim_yuman__materials_clients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(ref('dim_yuman__materials_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__company_company_id.2286b3d824": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__company_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__company_company_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__company_company_id.2286b3d824", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__company_company_id"], "alias": "not_null_dim_oracle_neshu__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7952151, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.dim_oracle_neshu__company", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__company", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__company')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_oracle_neshu__company_company_id.d6aabe0e95": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_oracle_neshu__company_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_oracle_neshu__company_company_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_oracle_neshu__company_company_id.d6aabe0e95", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_dim_oracle_neshu__company_company_id"], "alias": "unique_dim_oracle_neshu__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.7978287, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__company", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_dim_oracle_neshu__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select company_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company`\n  where company_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.dim_oracle_neshu__company", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__company", "test_metadata": {"name": "unique", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__company')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__product_product_id.d69a3b14d1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__product_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__product_product_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__product_product_id.d69a3b14d1", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__product_product_id"], "alias": "not_null_dim_oracle_neshu__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.800205, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_oracle_neshu__product", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__product')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_oracle_neshu__product_product_id.ba747134a3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_oracle_neshu__product_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_oracle_neshu__product_product_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_oracle_neshu__product_product_id.ba747134a3", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_dim_oracle_neshu__product_product_id"], "alias": "unique_dim_oracle_neshu__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8025973, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_dim_oracle_neshu__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product`\n  where product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_oracle_neshu__product", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__product')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__device_device_id.51db00e9ef": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__device_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__device_device_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__device_device_id.51db00e9ef", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__device_device_id"], "alias": "not_null_dim_oracle_neshu__device_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8049686, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__device_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.dim_oracle_neshu__device", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__device", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_oracle_neshu__device_device_id.cbb3e59fc9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_oracle_neshu__device_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_oracle_neshu__device_device_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_oracle_neshu__device_device_id.cbb3e59fc9", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_dim_oracle_neshu__device_device_id"], "alias": "unique_dim_oracle_neshu__device_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.807445, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_dim_oracle_neshu__device_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select device_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\n  where device_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.dim_oracle_neshu__device", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__device", "test_metadata": {"name": "unique", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__device_company_id.e17a3c2fb4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__device_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__device_company_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__device_company_id.e17a3c2fb4", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__device_company_id"], "alias": "not_null_dim_oracle_neshu__device_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8097992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__device_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.dim_oracle_neshu__device", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__device", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_"], "alias": "relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045"}, "created_at": 1760962911.8121812, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__company", "package": null, "version": null}, {"name": "dim_oracle_neshu__device", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/relationships_dim_oracle_neshu_b11d4471681e871777bd8bbc516c5045.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select company_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\n    where company_id is not null\n),\n\nparent as (\n    select company_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.dim_oracle_neshu__device", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__device", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_oracle_neshu__company')", "field": "company_id", "column_name": "company_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__device')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_id.ce47b5568c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_company_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_id.ce47b5568c", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_company_id"], "alias": "not_null_fct_oracle_neshu__conso_business_review_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8185058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_"], "alias": "relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c"}, "created_at": 1760962911.820925, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__company", "package": null, "version": null}, {"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/relationships_fct_oracle_neshu_3af48c777bd2456e0ba905dcb867395c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select company_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    where company_id is not null\n),\n\nparent as (\n    select company_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__company`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_oracle_neshu__company')", "field": "company_id", "column_name": "company_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_"], "alias": "relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17"}, "created_at": 1760962911.8271515, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/relationships_fct_oracle_neshu_71e87f007b63fef4892a46bcd3df0e17.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select device_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    where device_id is not null\n),\n\nparent as (\n    select device_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_oracle_neshu__device')", "field": "device_id", "column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_id.8da405d6c4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_product_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_id.8da405d6c4", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_product_id"], "alias": "not_null_fct_oracle_neshu__conso_business_review_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8332617, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_"], "alias": "relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae"}, "created_at": 1760962911.835693, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__product", "package": null, "version": null}, {"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/relationships_fct_oracle_neshu_9df91be0f61e90e26a3e83c20697fbae.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__product`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_oracle_neshu__product')", "field": "product_id", "column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_code.5a6eede86e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_company_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_company_code.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_code.5a6eede86e", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_company_code"], "alias": "not_null_fct_oracle_neshu__conso_business_review_company_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.841789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_company_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_code\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere company_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_code", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_code", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_name.6beef2cb38": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_company_name", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_company_name.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_name.6beef2cb38", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_company_name"], "alias": "not_null_fct_oracle_neshu__conso_business_review_company_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.844181, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_company_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_name\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere company_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_name", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_name", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_name.08b08915c7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_product_name", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_product_name.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_name.08b08915c7", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_product_name"], "alias": "not_null_fct_oracle_neshu__conso_business_review_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8465772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_type.e47220660c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_product_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_product_type.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_type.e47220660c", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_product_type"], "alias": "not_null_fct_oracle_neshu__conso_business_review_product_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8489995, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_product_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_type\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere product_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_type", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_type", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES.09a104a84b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES", "resource_type": "test", "package_name": "dbt_warehouse", "path": "accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES.09a104a84b", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES"], "alias": "accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe"}, "created_at": 1760962911.8515549, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/accepted_values_fct_oracle_nes_78cf31c351696ca5d979207c5c48ddfe.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_type as value_field,\n        count(*) as n_records\n\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    group by product_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'THE','CAFE CAPS','CHOCOLATS VAN HOUTEN','BOISSONS GOURMANDES','ACCESSOIRES','CAFENOIR','INDEFINI','SNACKING','BOISSONS FRAICHES'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_type", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["THE", "CAFE CAPS", "CHOCOLATS VAN HOUTEN", "BOISSONS GOURMANDES", "ACCESSOIRES", "CAFENOIR", "INDEFINI", "SNACKING", "BOISSONS FRAICHES"], "column_name": "product_type", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_consumption_date.a8716670d9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_consumption_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_consumption_date.a8716670d9", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_consumption_date"], "alias": "not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d"}, "created_at": 1760962911.8641703, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__con_0626fe16facf5d3f3510e5fd5c00b24d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consumption_date\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere consumption_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "consumption_date", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "consumption_date", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_.5aa992f77c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_.5aa992f77c", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_"], "alias": "dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf"}, "created_at": 1760962911.8665886, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/dbt_utils_accepted_range_fct_o_d96bda2fe4fe90d7279bb50507b74aaf.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not consumption_date >= '2020-01-01'\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not consumption_date <= current_date()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "consumption_date", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "'2020-01-01'", "max_value": "current_date()", "column_name": "consumption_date", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_data_source.af5248f6f7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_data_source", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_data_source.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_data_source.af5248f6f7", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_data_source"], "alias": "not_null_fct_oracle_neshu__conso_business_review_data_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8771806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_data_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data_source\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere data_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_source", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "data_source", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON.5ec7a388a7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON", "resource_type": "test", "package_name": "dbt_warehouse", "path": "accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON.5ec7a388a7", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON"], "alias": "accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0"}, "created_at": 1760962911.879744, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/accepted_values_fct_oracle_nes_94bc734754da17e2617701a848d13ef0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        data_source as value_field,\n        count(*) as n_records\n\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    group by data_source\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TELEMETRIE','CHARGEMENT','LIVRAISON'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_source", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TELEMETRIE", "CHARGEMENT", "LIVRAISON"], "column_name": "data_source", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_quantity.b59694399a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_quantity", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_quantity.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_quantity.b59694399a", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_quantity"], "alias": "not_null_fct_oracle_neshu__conso_business_review_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8863075, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.15c85805ca": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.15c85805ca", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at"], "alias": "not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.8886907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_updated_at\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere dbt_updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id.50b356c305": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id.50b356c305", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id"], "alias": "not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10"}, "created_at": 1760962911.8910875, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__con_8558d38add22de361fbf342ef52e6a10.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_invocation_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\nwhere dbt_invocation_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_invocation_id", "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_invocation_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_consumption_record.1740417b5a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_consumption_record", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_consumption_record.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_consumption_record.1740417b5a", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_consumption_record"], "alias": "unique_consumption_record", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.893449, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_consumption_record.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id, device_id, product_id, location_id, location, consumption_date, data_source\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n    group by company_id, device_id, product_id, location_id, location, consumption_date, data_source\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id", "device_id", "product_id", "location_id", "location", "consumption_date", "data_source"], "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_warehouse.device_id_required_except_livraison.acb84a4429": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "device_id_required_except_livraison", "resource_type": "test", "package_name": "dbt_warehouse", "path": "device_id_required_except_livraison.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.device_id_required_except_livraison.acb84a4429", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "device_id_required_except_livraison"], "alias": "device_id_required_except_livraison", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9044528, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__conso_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/device_id_required_except_livraison.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__conso_business_review`\n\nwhere not((device_id IS NOT NULL) OR (data_source = 'LIVRAISON'))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_oracle_neshu__conso_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(device_id IS NOT NULL) OR (data_source = 'LIVRAISON')", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__conso_business_review')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_id.b47f804afa": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_task_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_id.b47f804afa", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_task_id"], "alias": "not_null_fct_oracle_neshu__pa_business_review_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9157035, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_fct_oracle_neshu__pa_business_review_task_id.e6a4a507a2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_fct_oracle_neshu__pa_business_review_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_fct_oracle_neshu__pa_business_review_task_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_fct_oracle_neshu__pa_business_review_task_id.e6a4a507a2", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_fct_oracle_neshu__pa_business_review_task_id"], "alias": "unique_fct_oracle_neshu__pa_business_review_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9180737, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_fct_oracle_neshu__pa_business_review_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_code.4dd651bc02": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_company_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_company_code.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_code.4dd651bc02", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_company_code"], "alias": "not_null_fct_oracle_neshu__pa_business_review_company_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.92067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_company_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_code\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere company_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_code", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_code", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_info.8eeabe00a1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_company_info", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_company_info.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_info.8eeabe00a1", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_company_info"], "alias": "not_null_fct_oracle_neshu__pa_business_review_company_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9230974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_company_info.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_info\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere company_info is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_info", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_info", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_id.cb546c4a7e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_device_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_id.cb546c4a7e", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_device_id"], "alias": "not_null_fct_oracle_neshu__pa_business_review_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9255154, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_", "resource_type": "test", "package_name": "dbt_warehouse", "path": "relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_"], "alias": "relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796"}, "created_at": 1760962911.927889, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__device", "package": null, "version": null}, {"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/relationships_fct_oracle_neshu_2748e52aaaa70e63c97ebb4ce8d3f796.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select device_id as from_field\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\n    where device_id is not null\n),\n\nparent as (\n    select device_id as to_field\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__device`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_oracle_neshu__device')", "field": "device_id", "column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_info.08be705635": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_device_info", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_device_info.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_info.08be705635", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_device_info"], "alias": "not_null_fct_oracle_neshu__pa_business_review_device_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.933933, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_device_info.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_info\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere device_info is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_info", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_info", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_start_date.8dceb0b3e4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_task_start_date.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_start_date.8dceb0b3e4", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_task_start_date"], "alias": "not_null_fct_oracle_neshu__pa_business_review_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9363234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_status_code.b0aa10d1d0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_task_status_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_task_status_code.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_status_code.b0aa10d1d0", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_task_status_code"], "alias": "not_null_fct_oracle_neshu__pa_business_review_task_status_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9386902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_task_status_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_status_code\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere task_status_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_status_code", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_status_code", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_faite.4c914d3f47": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_mission_faite", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_mission_faite.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_faite.4c914d3f47", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_mission_faite"], "alias": "not_null_fct_oracle_neshu__pa_business_review_mission_faite", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9411664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_mission_faite.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mission_faite\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere mission_faite is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mission_faite", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "mission_faite", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_prevue.79cb0b2a32": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__pa_business_review_mission_prevue", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__pa_business_review_mission_prevue.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_prevue.79cb0b2a32", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__pa_business_review_mission_prevue"], "alias": "not_null_fct_oracle_neshu__pa_business_review_mission_prevue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9435234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__pa_business_review", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__pa_business_review_mission_prevue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mission_prevue\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__pa_business_review`\nwhere mission_prevue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mission_prevue", "file_key_name": "models.fct_oracle_neshu__pa_business_review", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "mission_prevue", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__pa_business_review')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_dim_oracle_neshu__contract_contract_id.2498b48ad2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_dim_oracle_neshu__contract_contract_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_dim_oracle_neshu__contract_contract_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_dim_oracle_neshu__contract_contract_id.2498b48ad2", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_dim_oracle_neshu__contract_contract_id"], "alias": "unique_dim_oracle_neshu__contract_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9459002, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_dim_oracle_neshu__contract_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contract_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\n  where contract_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_contract_id.28d4af45b3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__contract_contract_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__contract_contract_id.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_contract_id.28d4af45b3", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__contract_contract_id"], "alias": "not_null_dim_oracle_neshu__contract_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.948225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__contract_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_is_active.9600c93d58": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__contract_is_active", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__contract_is_active.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_is_active.9600c93d58", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__contract_is_active"], "alias": "not_null_dim_oracle_neshu__contract_is_active", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9506977, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__contract_is_active.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_active\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\nwhere is_active is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_active", "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_active", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_created_at.5dc61f7cd8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__contract_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__contract_created_at.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_created_at.5dc61f7cd8", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__contract_created_at"], "alias": "not_null_dim_oracle_neshu__contract_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9530747, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__contract_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_updated_at.f826ba71d3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dim_oracle_neshu__contract_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dim_oracle_neshu__contract_updated_at.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_updated_at.f826ba71d3", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_dim_oracle_neshu__contract_updated_at"], "alias": "not_null_dim_oracle_neshu__contract_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962911.9555097, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_dim_oracle_neshu__contract_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id.73a6310d39": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id.73a6310d39", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id"], "alias": "dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">1"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "error_if": ">1", "alias": "dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67"}, "created_at": 1760962911.9587095, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",error_if=\">1\",alias=\"dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_oracle_neshu__contract", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.dim_oracle_neshu__contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/dbt_utils_unique_combination_o_db2f1060b4af7b7b04a33f2157fc1e67.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id\n    from `evs-datastack-prod`.`prod_marts`.`dim_oracle_neshu__contract`\n    group by company_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_oracle_neshu__contract", "attached_node": "model.dbt_warehouse.dim_oracle_neshu__contract", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id"], "model": "{{ get_where_subquery(ref('dim_oracle_neshu__contract')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id.980098d686": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id.980098d686", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id"], "alias": "not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f"}, "created_at": 1760962911.9644148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_b438a58b7f3c54cd13d08775a37df64f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_fct_oracle_neshu__machines_maintenance_tracking_device_id.259a568a16": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_fct_oracle_neshu__machines_maintenance_tracking_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.unique_fct_oracle_neshu__machines_maintenance_tracking_device_id.259a568a16", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "unique_fct_oracle_neshu__machines_maintenance_tracking_device_id"], "alias": "unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606"}, "created_at": 1760962911.966785, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/unique_fct_oracle_neshu__machi_cb209d68ce3adbcb5e5d7094cd67b606.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select device_id as unique_field\n  from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\n  where device_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "unique", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code.21e30b32f5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code.21e30b32f5", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code"], "alias": "not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb"}, "created_at": 1760962911.9693053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_e5b0080e1bda73b36f9db9888ebc87eb.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_code\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere device_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_code", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_code", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name.27263a7181": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name.27263a7181", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name"], "alias": "not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6"}, "created_at": 1760962911.9716504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_540799f378bc69356b5b49987b8c13c6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_name\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere device_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_name", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_name", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code.0cdf0f5a6b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code.0cdf0f5a6b", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code"], "alias": "not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2"}, "created_at": 1760962911.973978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_a7d20114bc866b4cd5261d83a7ad51c2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_code\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere company_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_code", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_code", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name.3bf8fed65d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name.3bf8fed65d", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name"], "alias": "not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020"}, "created_at": 1760962911.9763105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_25a74ef4885820a84dc66efa908c0020.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_name\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere company_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_name", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_name", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date.2fb83a6c11": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date.2fb83a6c11", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date"], "alias": "not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f"}, "created_at": 1760962911.9786627, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_783a3cdc249b0514943ef8bca1b36f2f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_last_installation_date\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere device_last_installation_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_last_installation_date", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_last_installation_date", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol.1a01596ee3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol.1a01596ee3", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol"], "alias": "not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b"}, "created_at": 1760962911.9811049, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_224bc15ec7dda7c706c1c8eeff4b1b2b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect retard_bol\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere retard_bol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retard_bol", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "retard_bol", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai.90bc56ccbd": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai.90bc56ccbd", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai"], "alias": "not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c"}, "created_at": 1760962911.983553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_fa102e0c9cc34ed6089800e1912d7c1c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect retard_delai\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere retard_delai is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "retard_delai", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "retard_delai", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive.00eb8f212a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive.00eb8f212a", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive"], "alias": "not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9"}, "created_at": 1760962911.985913, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_123c0688dcc659e4f5d8fcf3b770e8c9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_last_preventive\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere source_last_preventive is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_last_preventive", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_last_preventive", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune.ac417d2f59": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune", "resource_type": "test", "package_name": "dbt_warehouse", "path": "accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune.ac417d2f59", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune"], "alias": "accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4"}, "created_at": 1760962911.9882874, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/accepted_values_fct_oracle_nes_7c2ae2c91f1bc096d035563a7644ebf4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        source_last_preventive as value_field,\n        count(*) as n_records\n\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\n    group by source_last_preventive\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'yuman','dlog','aucune'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_last_preventive", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["yuman", "dlog", "aucune"], "column_name": "source_last_preventive", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter.169cfdb158": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter.169cfdb158", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter"], "alias": "not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774"}, "created_at": 1760962911.99495, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/not_null_fct_oracle_neshu__mac_55d364530bfbe2244d8702995ad0e774.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_inter\nfrom `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\nwhere status_inter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status_inter", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status_inter", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune.808c90cc4e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune", "resource_type": "test", "package_name": "dbt_warehouse", "path": "accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b.sql", "original_file_path": "models/marts/oracle_neshu/_oracle_neshu__marts_models.yml", "unique_id": "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune.808c90cc4e", "fqn": ["dbt_warehouse", "marts", "oracle_neshu", "accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune"], "alias": "accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b"}, "created_at": 1760962911.9973764, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_oracle_neshu__machines_maintenance_tracking", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"]}, "compiled_path": "target/compiled/dbt_warehouse/models/marts/oracle_neshu/_oracle_neshu__marts_models.yml/accepted_values_fct_oracle_nes_dd51a32913a2dc882f89bd15edbfed5b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status_inter as value_field,\n        count(*) as n_records\n\n    from `evs-datastack-prod`.`prod_marts`.`fct_oracle_neshu__machines_maintenance_tracking`\n    group by status_inter\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Ouvert','Planifie','Aucune'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status_inter", "file_key_name": "models.fct_oracle_neshu__machines_maintenance_tracking", "attached_node": "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Ouvert", "Planifie", "Aucune"], "column_name": "status_inter", "model": "{{ get_where_subquery(ref('fct_oracle_neshu__machines_maintenance_tracking')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__telemetry_tasks_task_product_id.4d229c656f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__telemetry_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__telemetry_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__telemetry_tasks_task_product_id.4d229c656f", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__telemetry_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__telemetry_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0476081, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__telemetry_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_product_id.3c6e38ed4d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_product_id.3c6e38ed4d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0501704, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_id.2a5854e826": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_id.2a5854e826", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_task_id"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0527449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_product_id.04e1d8477d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_product_id.04e1d8477d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_product_id"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0551567, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_start_date.66646fa50e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_start_date.66646fa50e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0575573, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_updated_at.8d8d17e88a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_updated_at.8d8d17e88a", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0599287, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_created_at.ef85effe50": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_created_at.ef85effe50", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_created_at"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0623906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_extracted_at.5c3a5f7ac5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__telemetry_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__telemetry_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_extracted_at.5c3a5f7ac5", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__telemetry_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__telemetry_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.064758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__telemetry_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__telemetry_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__telemetry_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__telemetry_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__telemetry_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__chargement_tasks_task_product_id.f02aff9a5d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__chargement_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__chargement_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__chargement_tasks_task_product_id.f02aff9a5d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__chargement_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__chargement_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.06712, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__chargement_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_product_id.22016f77c7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_product_id.22016f77c7", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__chargement_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0694664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_id.dbf995a952": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_id.dbf995a952", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_task_id"], "alias": "not_null_int_oracle_neshu__chargement_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0718257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_product_id.97e92b8f9e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_product_id.97e92b8f9e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_product_id"], "alias": "not_null_int_oracle_neshu__chargement_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0742564, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_start_date.18b12689c3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_start_date.18b12689c3", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__chargement_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0766137, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_updated_at.cfb1806175": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_updated_at.cfb1806175", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__chargement_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.078991, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_created_at.099654dbc5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_created_at.099654dbc5", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_created_at"], "alias": "not_null_int_oracle_neshu__chargement_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0813518, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_extracted_at.7247f9f7e5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__chargement_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__chargement_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_extracted_at.7247f9f7e5", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__chargement_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__chargement_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0838113, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__chargement_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__chargement_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__chargement_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__chargement_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__chargement_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__livraison_tasks_task_product_id.011a4e9629": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__livraison_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__livraison_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__livraison_tasks_task_product_id.011a4e9629", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__livraison_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__livraison_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0861776, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__livraison_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_product_id.e3b9b08f8d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_product_id.e3b9b08f8d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__livraison_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.088522, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_id.aed5d7619e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_id.aed5d7619e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_task_id"], "alias": "not_null_int_oracle_neshu__livraison_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0908673, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_product_id.8522aad15d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_product_id.8522aad15d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_product_id"], "alias": "not_null_int_oracle_neshu__livraison_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.093188, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_start_date.341a694abf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_start_date.341a694abf", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__livraison_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0961776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_updated_at.4ae155633f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_updated_at.4ae155633f", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__livraison_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.0985382, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_created_at.d2d3de44aa": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_created_at.d2d3de44aa", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_created_at"], "alias": "not_null_int_oracle_neshu__livraison_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.100929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_extracted_at.175de36255": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_extracted_at.175de36255", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__livraison_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1032598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__livraison_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__inventaire_tasks_task_product_id.6de7c4abb7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__inventaire_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__inventaire_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__inventaire_tasks_task_product_id.6de7c4abb7", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__inventaire_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__inventaire_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1057217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__inventaire_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_product_id.40c0d72097": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_product_id.40c0d72097", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.108084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_id.12d8825475": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_id.12d8825475", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_task_id"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.110438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_product_id.315d649f9b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_product_id.315d649f9b", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_product_id"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1127763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_start_date.6ab0a21e68": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_start_date.6ab0a21e68", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1151085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_updated_at.ed499f687b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_updated_at.ed499f687b", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.117529, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_created_at.e03cda86f7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_created_at.e03cda86f7", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_created_at"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1198616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_extracted_at.ce6508aabf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inventaire_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inventaire_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_extracted_at.ce6508aabf", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inventaire_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__inventaire_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1221473, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inventaire_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inventaire_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.0895448e86": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.0895448e86", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1244884, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.e6945505d5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.e6945505d5", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924"}, "created_at": 1760962912.1269534, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__eca_0ff826a126a2dd165ab2ff031d072924.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.a45f2ce08b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.a45f2ce08b", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id"], "alias": "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.129306, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.7f8ffacb68": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.7f8ffacb68", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id"], "alias": "not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1316617, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date.6192042d8e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date.6192042d8e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d"}, "created_at": 1760962912.13403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__eca_2013be309412258ba09c139ba319d94d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.a93b91f4db": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.a93b91f4db", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.136403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.7d0fcea0cf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.7d0fcea0cf", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at"], "alias": "not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1388626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.3521403fea": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.3521403fea", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.141377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__ecart_inventaire_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__ecart_inventaire_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__ecart_inventaire_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__ecart_inventaire_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__reception_tasks_task_product_id.bf4c38de57": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__reception_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__reception_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__reception_tasks_task_product_id.bf4c38de57", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__reception_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__reception_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1437535, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__reception_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_product_id.af91258a78": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_product_id.af91258a78", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__reception_tasks_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.146102, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_id.73ba57ad4f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_id.73ba57ad4f", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_task_id"], "alias": "not_null_int_oracle_neshu__reception_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1485689, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_product_id.aa8ad941b0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_product_id.aa8ad941b0", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_product_id"], "alias": "not_null_int_oracle_neshu__reception_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1509047, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_start_date.eb50f49146": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_start_date.eb50f49146", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__reception_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.153396, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_updated_at.2d211b0f61": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_updated_at.2d211b0f61", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__reception_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1557689, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_created_at.8083bcc7e8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_created_at.8083bcc7e8", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_created_at"], "alias": "not_null_int_oracle_neshu__reception_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.158114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_extracted_at.ec88db7302": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__reception_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__reception_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_extracted_at.ec88db7302", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__reception_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__reception_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1605814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__reception_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__reception_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__reception_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__reception_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__reception_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__livraison_interne_tasks_task_product_id.cca996b12e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__livraison_interne_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__livraison_interne_tasks_task_product_id.cca996b12e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__livraison_interne_tasks_task_product_id"], "alias": "unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7"}, "created_at": 1760962912.1629438, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__livra_f153b51d4ee24484d81c5a36d90cacf7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id.4515c1033a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id.4515c1033a", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id"], "alias": "not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81"}, "created_at": 1760962912.165256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__liv_3abdcc5b7572288f0f1d40b690b8ac81.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_id.3d326d6d80": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_interne_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_id.3d326d6d80", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_task_id"], "alias": "not_null_int_oracle_neshu__livraison_interne_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1675842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_interne_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_product_id.84345d9252": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_interne_tasks_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_product_id.84345d9252", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_product_id"], "alias": "not_null_int_oracle_neshu__livraison_interne_tasks_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.170045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_interne_tasks_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date.a2d90a847c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date.a2d90a847c", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16"}, "created_at": 1760962912.1725218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__liv_e50ef48c43787c5726f870d51bc96f16.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.40f144213d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.40f144213d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__livraison_interne_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1748815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_created_at.c6d4b559be": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_interne_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_created_at.c6d4b559be", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_created_at"], "alias": "not_null_int_oracle_neshu__livraison_interne_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1772072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_interne_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.931738aaac": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.931738aaac", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.179571, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__livraison_interne_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__livraison_interne_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__livraison_interne_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__livraison_interne_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__appro_tasks_task_id.27c5ab3d17": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__appro_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__appro_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__appro_tasks_task_id.27c5ab3d17", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__appro_tasks_task_id"], "alias": "unique_int_oracle_neshu__appro_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1820376, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__appro_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_id.afbab212ea": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__appro_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__appro_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_id.afbab212ea", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__appro_tasks_task_id"], "alias": "not_null_int_oracle_neshu__appro_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1844032, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__appro_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_start_date.8e28b8d3b2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__appro_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__appro_tasks_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_start_date.8e28b8d3b2", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__appro_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__appro_tasks_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1867557, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__appro_tasks_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_updated_at.297f723da2": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__appro_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__appro_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_updated_at.297f723da2", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__appro_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__appro_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1891046, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__appro_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_created_at.2224651e8c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__appro_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__appro_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_created_at.2224651e8c", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__appro_tasks_created_at"], "alias": "not_null_int_oracle_neshu__appro_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.191578, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__appro_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_extracted_at.11b43558e3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__appro_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__appro_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_extracted_at.11b43558e3", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__appro_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__appro_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1939213, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__appro_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__appro_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__appro_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__appro_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__appro_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__inter_techinique_tasks_task_id.e6fbe5979b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__inter_techinique_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__inter_techinique_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__inter_techinique_tasks_task_id.e6fbe5979b", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__inter_techinique_tasks_task_id"], "alias": "unique_int_oracle_neshu__inter_techinique_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.196279, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__inter_techinique_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_id.2ab30c87a3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_id.2ab30c87a3", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_task_id"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.1986542, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_device_id.a4926002cf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_device_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_device_id.a4926002cf", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_device_id"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2010105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_company_id.963bf0b41a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_company_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_company_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_company_id.963bf0b41a", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_company_id"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2035315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "company_id", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date.4d976b328e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date.4d976b328e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date"], "alias": "not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e"}, "created_at": 1760962912.2059708, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__int_e46dd109e93ceeb3a4f0ac5c62c4096e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.75a6fbc88b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.75a6fbc88b", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_updated_at"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2083364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_created_at.23cf274781": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_created_at.23cf274781", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_created_at"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2107084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.ebb7615afa": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.ebb7615afa", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at"], "alias": "not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2131712, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__inter_techinique_tasks", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__inter_techinique_tasks`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__inter_techinique_tasks", "attached_node": "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__inter_techinique_tasks')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id.eb5ccd792d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id.eb5ccd792d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id"], "alias": "not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe"}, "created_at": 1760962912.215591, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__machines_yuman_maintenance_base", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__mac_800a0e9a4153c74ad7b07d1481d338fe.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__machines_yuman_maintenance_base`\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.int_oracle_neshu__machines_yuman_maintenance_base", "attached_node": "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__machines_yuman_maintenance_base')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code.a8d1d80e51": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code.a8d1d80e51", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code"], "alias": "not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740"}, "created_at": 1760962912.217949, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__machines_yuman_maintenance_base", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__mac_e4b2ad737053f348564a4bee3a06c740.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_code\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__machines_yuman_maintenance_base`\nwhere device_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_code", "file_key_name": "models.int_oracle_neshu__machines_yuman_maintenance_base", "attached_node": "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_code", "model": "{{ get_where_subquery(ref('int_oracle_neshu__machines_yuman_maintenance_base')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_int_oracle_neshu__commande_interne_task_product_id.b43ba28698": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_int_oracle_neshu__commande_interne_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_int_oracle_neshu__commande_interne_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.unique_int_oracle_neshu__commande_interne_task_product_id.b43ba28698", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "unique_int_oracle_neshu__commande_interne_task_product_id"], "alias": "unique_int_oracle_neshu__commande_interne_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2203186, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/unique_int_oracle_neshu__commande_interne_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_product_id as unique_field\n  from `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\n  where task_product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_product_id.acafb99a38": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_task_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_task_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_product_id.acafb99a38", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_task_product_id"], "alias": "not_null_int_oracle_neshu__commande_interne_task_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2226737, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_task_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere task_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_product_id", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_id.feb7a19392": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_task_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_task_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_id.feb7a19392", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_task_id"], "alias": "not_null_int_oracle_neshu__commande_interne_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2253106, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_product_id.422706e73d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_product_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_product_id.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_product_id.422706e73d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_product_id"], "alias": "not_null_int_oracle_neshu__commande_interne_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2276976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_source_code.806024b65d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_source_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_source_code.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_source_code.806024b65d", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_source_code"], "alias": "not_null_int_oracle_neshu__commande_interne_source_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2300603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_source_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_code\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere source_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_code", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_code", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_destination_code.60865e1142": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_destination_code", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_destination_code.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_destination_code.60865e1142", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_destination_code"], "alias": "not_null_int_oracle_neshu__commande_interne_destination_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2325182, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_destination_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect destination_code\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere destination_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "destination_code", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "destination_code", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_start_date.863ef2a87e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_task_start_date", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_task_start_date.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_start_date.863ef2a87e", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_task_start_date"], "alias": "not_null_int_oracle_neshu__commande_interne_task_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2349906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_task_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_start_date\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere task_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_start_date", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_start_date", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_updated_at.bfec986bee": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_updated_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_updated_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_updated_at.bfec986bee", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_updated_at"], "alias": "not_null_int_oracle_neshu__commande_interne_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2373679, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_created_at.49335f4f3a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_created_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_created_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_created_at.49335f4f3a", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_created_at"], "alias": "not_null_int_oracle_neshu__commande_interne_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2397265, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_extracted_at.9d5f1d0c81": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_int_oracle_neshu__commande_interne_extracted_at", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_int_oracle_neshu__commande_interne_extracted_at.sql", "original_file_path": "models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml", "unique_id": "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_extracted_at.9d5f1d0c81", "fqn": ["dbt_warehouse", "intermediate", "oracle_neshu", "not_null_int_oracle_neshu__commande_interne_extracted_at"], "alias": "not_null_int_oracle_neshu__commande_interne_extracted_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2420795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_oracle_neshu__commande_interne", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"]}, "compiled_path": "target/compiled/dbt_warehouse/models/intermediate/oracle_neshu/_oracle_neshu__intermediate_models.yml/not_null_int_oracle_neshu__commande_interne_extracted_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect extracted_at\nfrom `evs-datastack-prod`.`prod_intermediate`.`int_oracle_neshu__commande_interne`\nwhere extracted_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "extracted_at", "file_key_name": "models.int_oracle_neshu__commande_interne", "attached_node": "model.dbt_warehouse.int_oracle_neshu__commande_interne", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "extracted_at", "model": "{{ get_where_subquery(ref('int_oracle_neshu__commande_interne')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cp_metropole_Code_Postal.a098167f83": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cp_metropole_Code_Postal", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cp_metropole_Code_Postal.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cp_metropole_Code_Postal.a098167f83", "fqn": ["dbt_warehouse", "not_null_cp_metropole_Code_Postal"], "alias": "not_null_cp_metropole_Code_Postal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2898562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cp_metropole", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cp_metropole"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cp_metropole_Code_Postal.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Code_Postal\nfrom `evs-datastack-prod`.`prod_reference`.`cp_metropole`\nwhere Code_Postal is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "Code_Postal", "file_key_name": "seeds.cp_metropole", "attached_node": "seed.dbt_warehouse.cp_metropole", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "Code_Postal", "model": "{{ get_where_subquery(ref('cp_metropole')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_dpt_metropole_Departement.2478f9c919": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_dpt_metropole_Departement", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_dpt_metropole_Departement.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_dpt_metropole_Departement.2478f9c919", "fqn": ["dbt_warehouse", "not_null_dpt_metropole_Departement"], "alias": "not_null_dpt_metropole_Departement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.292413, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dpt_metropole", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.dpt_metropole"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_dpt_metropole_Departement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Departement\nfrom `evs-datastack-prod`.`prod_reference`.`dpt_metropole`\nwhere Departement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "Departement", "file_key_name": "seeds.dpt_metropole", "attached_node": "seed.dbt_warehouse.dpt_metropole", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "Departement", "model": "{{ get_where_subquery(ref('dpt_metropole')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_machines_clean_Machine_Brut.9276e8a97e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_machines_clean_Machine_Brut", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_machines_clean_Machine_Brut.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_machines_clean_Machine_Brut.9276e8a97e", "fqn": ["dbt_warehouse", "not_null_machines_clean_Machine_Brut"], "alias": "not_null_machines_clean_Machine_Brut", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2948122, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "machines_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.machines_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_machines_clean_Machine_Brut.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Machine_Brut\nfrom `evs-datastack-prod`.`prod_reference`.`machines_clean`\nwhere Machine_Brut is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "Machine_Brut", "file_key_name": "seeds.machines_clean", "attached_node": "seed.dbt_warehouse.machines_clean", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "Machine_Brut", "model": "{{ get_where_subquery(ref('machines_clean')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_techniciens_clean_TECHNICIEN.5de96efc7e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_techniciens_clean_TECHNICIEN", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_techniciens_clean_TECHNICIEN.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_techniciens_clean_TECHNICIEN.5de96efc7e", "fqn": ["dbt_warehouse", "not_null_techniciens_clean_TECHNICIEN"], "alias": "not_null_techniciens_clean_TECHNICIEN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2972763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "techniciens_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.techniciens_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_techniciens_clean_TECHNICIEN.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TECHNICIEN\nfrom `evs-datastack-prod`.`prod_reference`.`techniciens_clean`\nwhere TECHNICIEN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TECHNICIEN", "file_key_name": "seeds.techniciens_clean", "attached_node": "seed.dbt_warehouse.techniciens_clean", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TECHNICIEN", "model": "{{ get_where_subquery(ref('techniciens_clean')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_techniciens_clean_EQUIPE.722aa9e22a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_techniciens_clean_EQUIPE", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_techniciens_clean_EQUIPE.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_techniciens_clean_EQUIPE.722aa9e22a", "fqn": ["dbt_warehouse", "not_null_techniciens_clean_EQUIPE"], "alias": "not_null_techniciens_clean_EQUIPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.2996745, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "techniciens_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.techniciens_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_techniciens_clean_EQUIPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EQUIPE\nfrom `evs-datastack-prod`.`prod_reference`.`techniciens_clean`\nwhere EQUIPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EQUIPE", "file_key_name": "seeds.techniciens_clean", "attached_node": "seed.dbt_warehouse.techniciens_clean", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EQUIPE", "model": "{{ get_where_subquery(ref('techniciens_clean')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tarification_ref_clean_KEY.967dd5c502": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tarification_ref_clean_KEY", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tarification_ref_clean_KEY.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tarification_ref_clean_KEY.967dd5c502", "fqn": ["dbt_warehouse", "not_null_tarification_ref_clean_KEY"], "alias": "not_null_tarification_ref_clean_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3020065, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tarification_ref_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tarification_ref_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tarification_ref_clean_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect KEY\nfrom `evs-datastack-prod`.`prod_reference`.`tarification_ref_clean`\nwhere KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "KEY", "file_key_name": "seeds.tarification_ref_clean", "attached_node": "seed.dbt_warehouse.tarification_ref_clean", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "KEY", "model": "{{ get_where_subquery(ref('tarification_ref_clean')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tarification_ref_clean_Montant.a0344161c1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tarification_ref_clean_Montant", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tarification_ref_clean_Montant.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tarification_ref_clean_Montant.a0344161c1", "fqn": ["dbt_warehouse", "not_null_tarification_ref_clean_Montant"], "alias": "not_null_tarification_ref_clean_Montant", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3043468, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tarification_ref_clean", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tarification_ref_clean"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tarification_ref_clean_Montant.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Montant\nfrom `evs-datastack-prod`.`prod_reference`.`tarification_ref_clean`\nwhere Montant is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "Montant", "file_key_name": "seeds.tarification_ref_clean", "attached_node": "seed.dbt_warehouse.tarification_ref_clean", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "Montant", "model": "{{ get_where_subquery(ref('tarification_ref_clean')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_cp_depart_int.0f6e103b70": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_cp_depart_int", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_cp_depart_int.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_cp_depart_int.0f6e103b70", "fqn": ["dbt_warehouse", "not_null_cps_tech_cp_depart_int"], "alias": "not_null_cps_tech_cp_depart_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.30669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_cp_depart_int.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cp_depart_int\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere cp_depart_int is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_depart_int", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cp_depart_int", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_cps_tech_cp_depart_int.cbed7e63d9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_cps_tech_cp_depart_int", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_cps_tech_cp_depart_int.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.unique_cps_tech_cp_depart_int.cbed7e63d9", "fqn": ["dbt_warehouse", "unique_cps_tech_cp_depart_int"], "alias": "unique_cps_tech_cp_depart_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3091176, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/unique_cps_tech_cp_depart_int.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cp_depart_int as unique_field\n  from `evs-datastack-prod`.`prod_reference`.`cps_tech`\n  where cp_depart_int is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_depart_int", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cp_depart_int", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_cp_depart_texte.26dec0b408": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_cp_depart_texte", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_cp_depart_texte.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_cp_depart_texte.26dec0b408", "fqn": ["dbt_warehouse", "not_null_cps_tech_cp_depart_texte"], "alias": "not_null_cps_tech_cp_depart_texte", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3114755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_cp_depart_texte.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cp_depart_texte\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere cp_depart_texte is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_depart_texte", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cp_depart_texte", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.unique_cps_tech_cp_depart_texte.eef859cc87": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "unique_cps_tech_cp_depart_texte", "resource_type": "test", "package_name": "dbt_warehouse", "path": "unique_cps_tech_cp_depart_texte.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.unique_cps_tech_cp_depart_texte.eef859cc87", "fqn": ["dbt_warehouse", "unique_cps_tech_cp_depart_texte"], "alias": "unique_cps_tech_cp_depart_texte", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.313812, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/unique_cps_tech_cp_depart_texte.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cp_depart_texte as unique_field\n  from `evs-datastack-prod`.`prod_reference`.`cps_tech`\n  where cp_depart_texte is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_depart_texte", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cp_depart_texte", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_cp_final_int.c6665bc5a0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_cp_final_int", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_cp_final_int.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_cp_final_int.c6665bc5a0", "fqn": ["dbt_warehouse", "not_null_cps_tech_cp_final_int"], "alias": "not_null_cps_tech_cp_final_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3161585, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_cp_final_int.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cp_final_int\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere cp_final_int is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_final_int", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cp_final_int", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_cp_final_texte.6d08af0e28": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_cp_final_texte", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_cp_final_texte.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_cp_final_texte.6d08af0e28", "fqn": ["dbt_warehouse", "not_null_cps_tech_cp_final_texte"], "alias": "not_null_cps_tech_cp_final_texte", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3187227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_cp_final_texte.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cp_final_texte\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere cp_final_texte is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cp_final_texte", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cp_final_texte", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_libelle_cp.08a4b5acae": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_libelle_cp", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_libelle_cp.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_libelle_cp.08a4b5acae", "fqn": ["dbt_warehouse", "not_null_cps_tech_libelle_cp"], "alias": "not_null_cps_tech_libelle_cp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3210466, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_libelle_cp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect libelle_cp\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere libelle_cp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "libelle_cp", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "libelle_cp", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_num_departement_texte.11ca48fdf7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_num_departement_texte", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_num_departement_texte.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_num_departement_texte.11ca48fdf7", "fqn": ["dbt_warehouse", "not_null_cps_tech_num_departement_texte"], "alias": "not_null_cps_tech_num_departement_texte", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3233893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_num_departement_texte.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect num_departement_texte\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere num_departement_texte is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "num_departement_texte", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "num_departement_texte", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_nom_departement.37af19b1e1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_nom_departement", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_nom_departement.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_nom_departement.37af19b1e1", "fqn": ["dbt_warehouse", "not_null_cps_tech_nom_departement"], "alias": "not_null_cps_tech_nom_departement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3257027, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_nom_departement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nom_departement\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere nom_departement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nom_departement", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nom_departement", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_cps_tech_region_tech.9237701bce": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_cps_tech_region_tech", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_cps_tech_region_tech.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_cps_tech_region_tech.9237701bce", "fqn": ["dbt_warehouse", "not_null_cps_tech_region_tech"], "alias": "not_null_cps_tech_region_tech", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3280354, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "cps_tech", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.cps_tech"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_cps_tech_region_tech.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect region_tech\nfrom `evs-datastack-prod`.`prod_reference`.`cps_tech`\nwhere region_tech is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region_tech", "file_key_name": "seeds.cps_tech", "attached_node": "seed.dbt_warehouse.cps_tech", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_tech", "model": "{{ get_where_subquery(ref('cps_tech')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tech_piece_agence_mapping_nom.bf00f207d7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tech_piece_agence_mapping_nom", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tech_piece_agence_mapping_nom.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tech_piece_agence_mapping_nom.bf00f207d7", "fqn": ["dbt_warehouse", "not_null_tech_piece_agence_mapping_nom"], "alias": "not_null_tech_piece_agence_mapping_nom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.330458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tech_piece_agence_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tech_piece_agence_mapping"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tech_piece_agence_mapping_nom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nom\nfrom `evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`\nwhere nom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nom", "file_key_name": "seeds.tech_piece_agence_mapping", "attached_node": "seed.dbt_warehouse.tech_piece_agence_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nom", "model": "{{ get_where_subquery(ref('tech_piece_agence_mapping')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tech_piece_agence_mapping_prenom.4042de33dc": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tech_piece_agence_mapping_prenom", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tech_piece_agence_mapping_prenom.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tech_piece_agence_mapping_prenom.4042de33dc", "fqn": ["dbt_warehouse", "not_null_tech_piece_agence_mapping_prenom"], "alias": "not_null_tech_piece_agence_mapping_prenom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3327782, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tech_piece_agence_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tech_piece_agence_mapping"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tech_piece_agence_mapping_prenom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prenom\nfrom `evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`\nwhere prenom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prenom", "file_key_name": "seeds.tech_piece_agence_mapping", "attached_node": "seed.dbt_warehouse.tech_piece_agence_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prenom", "model": "{{ get_where_subquery(ref('tech_piece_agence_mapping')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tech_piece_agence_mapping_agence.bdf757feb6": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tech_piece_agence_mapping_agence", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tech_piece_agence_mapping_agence.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tech_piece_agence_mapping_agence.bdf757feb6", "fqn": ["dbt_warehouse", "not_null_tech_piece_agence_mapping_agence"], "alias": "not_null_tech_piece_agence_mapping_agence", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.335125, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tech_piece_agence_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tech_piece_agence_mapping"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tech_piece_agence_mapping_agence.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agence\nfrom `evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`\nwhere agence is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agence", "file_key_name": "seeds.tech_piece_agence_mapping", "attached_node": "seed.dbt_warehouse.tech_piece_agence_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agence", "model": "{{ get_where_subquery(ref('tech_piece_agence_mapping')) }}"}, "namespace": null}}, "test.dbt_warehouse.not_null_tech_piece_agence_mapping_equipe.1e972b6e33": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "not_null_tech_piece_agence_mapping_equipe", "resource_type": "test", "package_name": "dbt_warehouse", "path": "not_null_tech_piece_agence_mapping_equipe.sql", "original_file_path": "data/schema.yml", "unique_id": "test.dbt_warehouse.not_null_tech_piece_agence_mapping_equipe.1e972b6e33", "fqn": ["dbt_warehouse", "not_null_tech_piece_agence_mapping_equipe"], "alias": "not_null_tech_piece_agence_mapping_equipe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3374681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tech_piece_agence_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_warehouse.tech_piece_agence_mapping"]}, "compiled_path": "target/compiled/dbt_warehouse/data/schema.yml/not_null_tech_piece_agence_mapping_equipe.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect equipe\nfrom `evs-datastack-prod`.`prod_reference`.`tech_piece_agence_mapping`\nwhere equipe is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "equipe", "file_key_name": "seeds.tech_piece_agence_mapping", "attached_node": "seed.dbt_warehouse.tech_piece_agence_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "equipe", "model": "{{ get_where_subquery(ref('tech_piece_agence_mapping')) }}"}, "namespace": null}}, "test.dbt_warehouse.dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne.d6b0f7b301": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne", "resource_type": "test", "package_name": "dbt_warehouse", "path": "dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e.sql", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "test.dbt_warehouse.dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne.d6b0f7b301", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne"], "alias": "dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e"}, "created_at": 1760962912.3475192, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["mssql_sage", "dbo_f_ecriturea"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/mssql_sage/_mssql_sage__sources.yml/dbt_utils_source_unique_combin_13d88c0b57ef88271064162b3dcff97e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ec_no, n_analytique, ea_ligne\n    from `evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturea`\n    group by ec_no, n_analytique, ea_ligne\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.mssql_sage", "attached_node": null, "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ec_no", "n_analytique", "ea_ligne"], "model": "{{ get_where_subquery(source('mssql_sage', 'dbo_f_ecriturea')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.ce4c2c11f4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_mssql_sage_dbo_f_ecriturea_cb_marq", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.sql", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.ce4c2c11f4", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "source_unique_mssql_sage_dbo_f_ecriturea_cb_marq"], "alias": "source_unique_mssql_sage_dbo_f_ecriturea_cb_marq", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.353329, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["mssql_sage", "dbo_f_ecriturea"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/mssql_sage/_mssql_sage__sources.yml/source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cb_marq as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturea`\n  where cb_marq is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cb_marq", "file_key_name": "sources.mssql_sage", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cb_marq", "model": "{{ get_where_subquery(source('mssql_sage', 'dbo_f_ecriturea')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.7d3e1176b7": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.sql", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.7d3e1176b7", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq"], "alias": "source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3558707, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["mssql_sage", "dbo_f_ecriturea"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/mssql_sage/_mssql_sage__sources.yml/source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cb_marq\nfrom `evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturea`\nwhere cb_marq is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cb_marq", "file_key_name": "sources.mssql_sage", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cb_marq", "model": "{{ get_where_subquery(source('mssql_sage', 'dbo_f_ecriturea')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturec_ec_no.6925cf7be5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_mssql_sage_dbo_f_ecriturec_ec_no", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_mssql_sage_dbo_f_ecriturec_ec_no.sql", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturec_ec_no.6925cf7be5", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "source_unique_mssql_sage_dbo_f_ecriturec_ec_no"], "alias": "source_unique_mssql_sage_dbo_f_ecriturec_ec_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.384013, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["mssql_sage", "dbo_f_ecriturec"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturec"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/mssql_sage/_mssql_sage__sources.yml/source_unique_mssql_sage_dbo_f_ecriturec_ec_no.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ec_no as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturec`\n  where ec_no is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ec_no", "file_key_name": "sources.mssql_sage", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ec_no", "model": "{{ get_where_subquery(source('mssql_sage', 'dbo_f_ecriturec')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.714fd67ceb": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_mssql_sage_dbo_f_ecriturec_ec_no", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.sql", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.714fd67ceb", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "source_not_null_mssql_sage_dbo_f_ecriturec_ec_no"], "alias": "source_not_null_mssql_sage_dbo_f_ecriturec_ec_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3866432, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["mssql_sage", "dbo_f_ecriturec"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturec"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/mssql_sage/_mssql_sage__sources.yml/source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ec_no\nfrom `evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturec`\nwhere ec_no is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ec_no", "file_key_name": "sources.mssql_sage", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ec_no", "model": "{{ get_where_subquery(source('mssql_sage', 'dbo_f_ecriturec')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_clients_id.ac9ad6b2fc": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_clients_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_clients_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_clients_id.ac9ad6b2fc", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_clients_id"], "alias": "source_unique_yuman_api_yuman_clients_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3900337, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_clients"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_clients_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_clients`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_clients_id.94442bf14b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_clients_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_clients_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_clients_id.94442bf14b", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_clients_id"], "alias": "source_not_null_yuman_api_yuman_clients_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3924477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_clients"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_clients"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_clients_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_clients`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_clients')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_sites_id.c7e2661f2f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_sites_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_sites_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_sites_id.c7e2661f2f", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_sites_id"], "alias": "source_unique_yuman_api_yuman_sites_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3954647, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_sites"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_sites_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_sites`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_id.cc7391839c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_sites_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_sites_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_id.cc7391839c", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_sites_id"], "alias": "source_not_null_yuman_api_yuman_sites_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.3978245, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_sites"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_sites_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_sites`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_client_id.6e84614dea": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_sites_client_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_sites_client_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_client_id.6e84614dea", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_sites_client_id"], "alias": "source_not_null_yuman_api_yuman_sites_client_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4002466, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_sites"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_sites"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_sites_client_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_sites`\nwhere client_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client_id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_sites')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_materials_id.627fc0bbcf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_materials_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_materials_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_materials_id.627fc0bbcf", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_materials_id"], "alias": "source_unique_yuman_api_yuman_materials_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4032345, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_materials"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_materials_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_materials`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_id.ef8e1020be": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_materials_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_materials_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_id.ef8e1020be", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_materials_id"], "alias": "source_not_null_yuman_api_yuman_materials_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4055827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_materials"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_materials_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_materials`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_site_id.f462c1646e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_materials_site_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_materials_site_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_site_id.f462c1646e", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_materials_site_id"], "alias": "source_not_null_yuman_api_yuman_materials_site_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4079304, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_materials"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_materials"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_materials_site_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect site_id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_materials`\nwhere site_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "site_id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "site_id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_materials')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_material_categories_id.8e8a025d0a": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_material_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_material_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_material_categories_id.8e8a025d0a", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_material_categories_id"], "alias": "source_unique_yuman_api_yuman_material_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4110324, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_material_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_material_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_material_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_material_categories`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_material_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_material_categories_id.4ef54c952f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_material_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_material_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_material_categories_id.4ef54c952f", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_material_categories_id"], "alias": "source_not_null_yuman_api_yuman_material_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.413356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_material_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_material_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_material_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_material_categories`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_material_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_products_id.0797f24444": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_products_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_products_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_products_id.0797f24444", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_products_id"], "alias": "source_unique_yuman_api_yuman_products_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4163496, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_products_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_products`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_products_id.9d76ec0f24": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_products_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_products_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_products_id.9d76ec0f24", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_products_id"], "alias": "source_not_null_yuman_api_yuman_products_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4186816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_products"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_products_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_products`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_products')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_users_id.9323495945": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_users_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_users_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_users_id.9323495945", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_users_id"], "alias": "source_unique_yuman_api_yuman_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.421868, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_users"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_users"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_users_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_users`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_users')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_users_id.d5dd93c383": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_users_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_users_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_users_id.d5dd93c383", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_users_id"], "alias": "source_not_null_yuman_api_yuman_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4242003, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_users"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_users"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_users_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_users`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_users')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_categories_id.d7d762a90b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_workorder_demands_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_workorder_demands_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_categories_id.d7d762a90b", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_workorder_demands_categories_id"], "alias": "source_unique_yuman_api_yuman_workorder_demands_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4271736, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_workorder_demands_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands_categories`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_demands_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_categories_id.a8a4d3d9e4": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_workorder_demands_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_workorder_demands_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_categories_id.a8a4d3d9e4", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_workorder_demands_categories_id"], "alias": "source_not_null_yuman_api_yuman_workorder_demands_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4295156, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_workorder_demands_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands_categories`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_demands_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_id.61272d2b5b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_workorder_demands_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_workorder_demands_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_id.61272d2b5b", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_workorder_demands_id"], "alias": "source_unique_yuman_api_yuman_workorder_demands_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4332457, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_workorder_demands_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_id.2951fa446c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_workorder_demands_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_workorder_demands_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_id.2951fa446c", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_workorder_demands_id"], "alias": "source_not_null_yuman_api_yuman_workorder_demands_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4356358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_demands"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_workorder_demands_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_demands')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_workorders_id.cf3a021d13": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_workorders_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_workorders_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_workorders_id.cf3a021d13", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_workorders_id"], "alias": "source_unique_yuman_api_yuman_workorders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4386659, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_workorders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_workorders`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorders_id.e6c047d2a1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_workorders_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_workorders_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorders_id.e6c047d2a1", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_workorders_id"], "alias": "source_not_null_yuman_api_yuman_workorders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4409857, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_workorders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_workorders`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorders')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_categories_id.ae2a36c8ed": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_workorder_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_workorder_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_categories_id.ae2a36c8ed", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_workorder_categories_id"], "alias": "source_unique_yuman_api_yuman_workorder_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.444049, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_workorder_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_workorder_categories`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_categories_id.481d28172c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_workorder_categories_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_workorder_categories_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_categories_id.481d28172c", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_workorder_categories_id"], "alias": "source_not_null_yuman_api_yuman_workorder_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4464033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_workorder_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_workorder_categories_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_workorder_categories`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_workorder_categories')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_yuman_api_yuman_purchase_orders_id.1a3a583089": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_yuman_api_yuman_purchase_orders_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_yuman_api_yuman_purchase_orders_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_yuman_api_yuman_purchase_orders_id.1a3a583089", "fqn": ["dbt_warehouse", "staging", "yuman", "source_unique_yuman_api_yuman_purchase_orders_id"], "alias": "source_unique_yuman_api_yuman_purchase_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4493763, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_purchase_orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_unique_yuman_api_yuman_purchase_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`yuman_purchase_orders`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_yuman_api_yuman_purchase_orders_id.3eb709d1c8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_yuman_api_yuman_purchase_orders_id", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_yuman_api_yuman_purchase_orders_id.sql", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_yuman_api_yuman_purchase_orders_id.3eb709d1c8", "fqn": ["dbt_warehouse", "staging", "yuman", "source_not_null_yuman_api_yuman_purchase_orders_id"], "alias": "source_not_null_yuman_api_yuman_purchase_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4518144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["yuman_api", "yuman_purchase_orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/yuman/_yuman__sources.yml/source_not_null_yuman_api_yuman_purchase_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `evs-datastack-prod`.`prod_raw`.`yuman_purchase_orders`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.yuman_api", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yuman_api', 'yuman_purchase_orders')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_idcompany.6df2f6792e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_idcompany.6df2f6792e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_company_idcompany"], "alias": "source_unique_oracle_neshu_evs_company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4548016, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcompany as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_company`\n  where idcompany is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_idcompany.c223201709": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_idcompany.c223201709", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_company_idcompany"], "alias": "source_not_null_oracle_neshu_evs_company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4571877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_raw`.`evs_company`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idcompany.d2e7a813ca": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_company_has_location_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_company_has_location_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idcompany.d2e7a813ca", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_company_has_location_idcompany"], "alias": "source_not_null_oracle_neshu_evs_company_has_location_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.460208, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_has_location"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_company_has_location_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_raw`.`evs_company_has_location`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation.e1aaef8e8b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_company_has_location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation.e1aaef8e8b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_company_has_location_idlocation"], "alias": "source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d"}, "created_at": 1760962912.4626856, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_has_location"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_e_50f436a1af9e28513f8e8cad324ca09d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation\nfrom `evs-datastack-prod`.`prod_raw`.`evs_company_has_location`\nwhere idlocation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation_type.b7ffe23a12": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_company_has_location_idlocation_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation_type.b7ffe23a12", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_company_has_location_idlocation_type"], "alias": "source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3"}, "created_at": 1760962912.4650195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_has_location"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_e_c7818028443a326746890f3a3e6599e3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation_type\nfrom `evs-datastack-prod`.`prod_raw`.`evs_company_has_location`\nwhere idlocation_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company_has_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_type_idcompany_type.56f35aae37": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_company_type_idcompany_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_company_type_idcompany_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_type_idcompany_type.56f35aae37", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_company_type_idcompany_type"], "alias": "source_unique_oracle_neshu_evs_company_type_idcompany_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4679875, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_company_type_idcompany_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcompany_type as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_company_type`\n  where idcompany_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcompany_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_type_idcompany_type.11fcffba5d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_company_type_idcompany_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_company_type_idcompany_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_type_idcompany_type.11fcffba5d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_company_type_idcompany_type"], "alias": "source_not_null_oracle_neshu_evs_company_type_idcompany_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4703474, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_company_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_company_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_company_type_idcompany_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany_type\nfrom `evs-datastack-prod`.`prod_raw`.`evs_company_type`\nwhere idcompany_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_company_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_contact_idcontact.d870dc347d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_contact_idcontact", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_contact_idcontact.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_contact_idcontact.d870dc347d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_contact_idcontact"], "alias": "source_unique_oracle_neshu_evs_contact_idcontact", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4734375, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contact"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_contact_idcontact.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcontact as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_contact`\n  where idcontact is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontact", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcontact", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contact')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contact_idcontact.d426a1c13e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_contact_idcontact", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_contact_idcontact.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contact_idcontact.d426a1c13e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_contact_idcontact"], "alias": "source_not_null_oracle_neshu_evs_contact_idcontact", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4757698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contact"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contact"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_contact_idcontact.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontact\nfrom `evs-datastack-prod`.`prod_raw`.`evs_contact`\nwhere idcontact is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontact", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontact", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contact')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_idcontract.00683b26ea": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_idcontract.00683b26ea", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_contract_idcontract"], "alias": "source_unique_oracle_neshu_evs_contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4787934, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contract"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcontract as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_contract`\n  where idcontract is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_idcontract.f730c61b9d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_idcontract.f730c61b9d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_contract_idcontract"], "alias": "source_not_null_oracle_neshu_evs_contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4811642, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contract"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontract\nfrom `evs-datastack-prod`.`prod_raw`.`evs_contract`\nwhere idcontract is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_parsed_idcontract.88000e1326": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_contract_parsed_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_contract_parsed_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_parsed_idcontract.88000e1326", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_contract_parsed_idcontract"], "alias": "source_unique_oracle_neshu_evs_contract_parsed_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4844425, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contract_parsed"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contract_parsed"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_contract_parsed_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idcontract as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_contract_parsed`\n  where idcontract is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contract_parsed')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_parsed_idcontract.34a4825dee": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_contract_parsed_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_contract_parsed_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_parsed_idcontract.34a4825dee", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_contract_parsed_idcontract"], "alias": "source_not_null_oracle_neshu_evs_contract_parsed_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4867842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_contract_parsed"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_contract_parsed"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_contract_parsed_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontract\nfrom `evs-datastack-prod`.`prod_raw`.`evs_contract_parsed`\nwhere idcontract is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_contract_parsed')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_device_iddevice.397252bea8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_device_iddevice.397252bea8", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_device_iddevice"], "alias": "source_unique_oracle_neshu_evs_device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4897943, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_device"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select iddevice as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_device`\n  where iddevice is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_device_iddevice.d62f2bee11": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_device_iddevice.d62f2bee11", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_device_iddevice"], "alias": "source_not_null_oracle_neshu_evs_device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.492152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_device"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect iddevice\nfrom `evs-datastack-prod`.`prod_raw`.`evs_device`\nwhere iddevice is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_idlabel.f4f4d52728": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_label_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_label_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_idlabel.f4f4d52728", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_label_idlabel"], "alias": "source_unique_oracle_neshu_evs_label_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.495244, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_label_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlabel as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_label`\n  where idlabel is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_idlabel.725504fd88": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_idlabel.725504fd88", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.4976072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_family_idlabel_family.52acfecf7e": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_label_family_idlabel_family", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_label_family_idlabel_family.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_family_idlabel_family.52acfecf7e", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_label_family_idlabel_family"], "alias": "source_unique_oracle_neshu_evs_label_family_idlabel_family", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5006306, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_family"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_label_family_idlabel_family.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlabel_family as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_label_family`\n  where idlabel_family is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel_family", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlabel_family", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_family')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_family_idlabel_family.76e2fc3d22": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_family_idlabel_family", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_family_idlabel_family.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_family_idlabel_family.76e2fc3d22", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_family_idlabel_family"], "alias": "source_not_null_oracle_neshu_evs_label_family_idlabel_family", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.503054, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_family"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_family"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_family_idlabel_family.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel_family\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_family`\nwhere idlabel_family is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel_family", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel_family", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_family')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idlabel.84c84e0808": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_company_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_company_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idlabel.84c84e0808", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_company_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_company_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5060503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_company"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_company_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_company`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idcompany.9fb5a691bb": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_company_idcompany", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_company_idcompany.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idcompany.9fb5a691bb", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_company_idcompany"], "alias": "source_not_null_oracle_neshu_evs_label_has_company_idcompany", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5084388, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_company"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_company_idcompany.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcompany\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_company`\nwhere idcompany is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcompany", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcompany", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_company')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idlabel.1500ee3c29": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_contract_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_contract_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idlabel.1500ee3c29", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_contract_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_contract_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5114431, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_contract"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_contract_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_contract`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idcontract.34f534407d": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_contract_idcontract", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_contract_idcontract.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idcontract.34f534407d", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_contract_idcontract"], "alias": "source_not_null_oracle_neshu_evs_label_has_contract_idcontract", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.513905, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_contract"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_contract_idcontract.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idcontract\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_contract`\nwhere idcontract is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idcontract", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idcontract", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_contract')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_idlabel.7913e12518": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_device_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_device_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_idlabel.7913e12518", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_device_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_device_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.516933, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_device"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_device_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_device`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_iddevice.67fa8a09c3": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_device_iddevice", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_device_iddevice.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_iddevice.67fa8a09c3", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_device_iddevice"], "alias": "source_not_null_oracle_neshu_evs_label_has_device_iddevice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5192592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_device"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_device_iddevice.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect iddevice\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_device`\nwhere iddevice is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "iddevice", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "iddevice", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_device')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idlabel.5191f399c0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_product_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_product_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idlabel.5191f399c0", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_product_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_product_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5222878, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_product_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_product`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idproduct.6048527bb0": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idproduct.6048527bb0", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_product_idproduct"], "alias": "source_not_null_oracle_neshu_evs_label_has_product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5247662, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_product`\nwhere idproduct is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idlabel.eabdfa7bbf": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_resources_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_resources_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idlabel.eabdfa7bbf", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_resources_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_resources_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5277677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_resources_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_resources`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idresources.701adf32da": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idresources.701adf32da", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_resources_idresources"], "alias": "source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c"}, "created_at": 1760962912.5301497, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_e_e48ef7a25904f9333583ede80d39ae4c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idlabel.9722fba510": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_task_idlabel", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_task_idlabel.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idlabel.9722fba510", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_task_idlabel"], "alias": "source_not_null_oracle_neshu_evs_label_has_task_idlabel", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.533174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_task"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_task_idlabel.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlabel\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_task`\nwhere idlabel is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlabel", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlabel", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idtask.407d48dbcb": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_label_has_task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_label_has_task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idtask.407d48dbcb", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_label_has_task_idtask"], "alias": "source_not_null_oracle_neshu_evs_label_has_task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.535649, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_label_has_task"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_label_has_task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_raw`.`evs_label_has_task`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_label_has_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_location_idlocation.e07de44c8b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_location_idlocation.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_location_idlocation.e07de44c8b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_location_idlocation"], "alias": "source_unique_oracle_neshu_evs_location_idlocation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.53865, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_location"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_location_idlocation.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idlocation as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_location`\n  where idlocation is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_location_idlocation.252e77f735": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_location_idlocation", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_location_idlocation.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_location_idlocation.252e77f735", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_location_idlocation"], "alias": "source_not_null_oracle_neshu_evs_location_idlocation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5410056, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_location"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_location"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_location_idlocation.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idlocation\nfrom `evs-datastack-prod`.`prod_raw`.`evs_location`\nwhere idlocation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idlocation", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idlocation", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_location')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_idproduct.56c841c209": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_idproduct.56c841c209", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_product_idproduct"], "alias": "source_unique_oracle_neshu_evs_product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.544014, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idproduct as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_product`\n  where idproduct is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_idproduct.0e5cc2ab70": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_product_idproduct", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_product_idproduct.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_idproduct.0e5cc2ab70", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_product_idproduct"], "alias": "source_not_null_oracle_neshu_evs_product_idproduct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5465033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_product_idproduct.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct\nfrom `evs-datastack-prod`.`prod_raw`.`evs_product`\nwhere idproduct is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_type_idproduct_type.f77e407933": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_product_type_idproduct_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_product_type_idproduct_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_type_idproduct_type.f77e407933", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_product_type_idproduct_type"], "alias": "source_unique_oracle_neshu_evs_product_type_idproduct_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5495362, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_product_type_idproduct_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idproduct_type as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_product_type`\n  where idproduct_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idproduct_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_product_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_type_idproduct_type.2e7c2d534c": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_product_type_idproduct_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_product_type_idproduct_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_type_idproduct_type.2e7c2d534c", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_product_type_idproduct_type"], "alias": "source_not_null_oracle_neshu_evs_product_type_idproduct_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.551882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_product_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_product_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_product_type_idproduct_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idproduct_type\nfrom `evs-datastack-prod`.`prod_raw`.`evs_product_type`\nwhere idproduct_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idproduct_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idproduct_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_product_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_idresources.65588abfd8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_idresources.65588abfd8", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_resources_idresources"], "alias": "source_unique_oracle_neshu_evs_resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.554888, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idresources as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_resources`\n  where idresources is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_idresources.04add56fa5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_idresources.04add56fa5", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_resources_idresources"], "alias": "source_not_null_oracle_neshu_evs_resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5575888, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_raw`.`evs_resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_type_idresources_type.94e4b1617f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_resources_type_idresources_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_resources_type_idresources_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_type_idresources_type.94e4b1617f", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_resources_type_idresources_type"], "alias": "source_unique_oracle_neshu_evs_resources_type_idresources_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5605931, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_resources_type_idresources_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idresources_type as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_resources_type`\n  where idresources_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idresources_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_resources_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_type_idresources_type.c0ade33349": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_resources_type_idresources_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_type_idresources_type.c0ade33349", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_resources_type_idresources_type"], "alias": "source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3"}, "created_at": 1760962912.5629787, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_resources_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_e_76e58efbd8c50f886efba2f5282c10a3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources_type\nfrom `evs-datastack-prod`.`prod_raw`.`evs_resources_type`\nwhere idresources_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_resources_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_idtask.e261c356e9": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_idtask.e261c356e9", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_task_idtask"], "alias": "source_unique_oracle_neshu_evs_task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.565983, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_task`\n  where idtask is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_idtask.d1aa0b27a5": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_task_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_idtask.d1aa0b27a5", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_idtask"], "alias": "source_not_null_oracle_neshu_evs_task_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.568461, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_task_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_has_product_idtask_has_product.b9af110684": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_task_has_product_idtask_has_product", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_has_product_idtask_has_product.b9af110684", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_task_has_product_idtask_has_product"], "alias": "source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc"}, "created_at": 1760962912.5715415, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_557d074cd335ca7fe361146ec80dd9bc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_has_product as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_task_has_product`\n  where idtask_has_product is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_has_product", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_has_product", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product.52f463d476": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product.52f463d476", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product"], "alias": "source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200"}, "created_at": 1760962912.573934, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_has_product"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_product"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_e_da97ee9521c56eccb1883909683ca200.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_has_product\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task_has_product`\nwhere idtask_has_product is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_has_product", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_has_product", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_has_product')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idtask.3c6bbcc3c8": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_has_resources_idtask", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_task_has_resources_idtask.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idtask.3c6bbcc3c8", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_has_resources_idtask"], "alias": "source_not_null_oracle_neshu_evs_task_has_resources_idtask", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5770626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_task_has_resources_idtask.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task_has_resources`\nwhere idtask is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idresources.6896d0d7f1": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_has_resources_idresources", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_task_has_resources_idresources.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idresources.6896d0d7f1", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_has_resources_idresources"], "alias": "source_not_null_oracle_neshu_evs_task_has_resources_idresources", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5794792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_has_resources"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_has_resources"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_task_has_resources_idresources.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idresources\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task_has_resources`\nwhere idresources is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idresources", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idresources", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_has_resources')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_status_idtask_status.b176cc0c5b": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_task_status_idtask_status", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_task_status_idtask_status.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_status_idtask_status.b176cc0c5b", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_task_status_idtask_status"], "alias": "source_unique_oracle_neshu_evs_task_status_idtask_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5824924, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_status"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_task_status_idtask_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_status as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_task_status`\n  where idtask_status is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_status", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_status", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_status')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_status_idtask_status.2b475b6b56": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_status_idtask_status", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_task_status_idtask_status.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_status_idtask_status.2b475b6b56", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_status_idtask_status"], "alias": "source_not_null_oracle_neshu_evs_task_status_idtask_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5848858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_status"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_status"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_task_status_idtask_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_status\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task_status`\nwhere idtask_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_status", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_status", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_status')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_type_idtask_type.3b8b3b9ff6": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_unique_oracle_neshu_evs_task_type_idtask_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_unique_oracle_neshu_evs_task_type_idtask_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_type_idtask_type.3b8b3b9ff6", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_unique_oracle_neshu_evs_task_type_idtask_type"], "alias": "source_unique_oracle_neshu_evs_task_type_idtask_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.587985, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_unique_oracle_neshu_evs_task_type_idtask_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select idtask_type as unique_field\n  from `evs-datastack-prod`.`prod_raw`.`evs_task_type`\n  where idtask_type is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "idtask_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_type')) }}"}, "namespace": null}}, "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_type_idtask_type.d7f9ba800f": {"database": "evs-datastack-prod", "schema": "prod_dbt_test__audit", "name": "source_not_null_oracle_neshu_evs_task_type_idtask_type", "resource_type": "test", "package_name": "dbt_warehouse", "path": "source_not_null_oracle_neshu_evs_task_type_idtask_type.sql", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_type_idtask_type.d7f9ba800f", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "source_not_null_oracle_neshu_evs_task_type_idtask_type"], "alias": "source_not_null_oracle_neshu_evs_task_type_idtask_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760962912.5903852, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["oracle_neshu", "evs_task_type"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_warehouse.oracle_neshu.evs_task_type"]}, "compiled_path": "target/compiled/dbt_warehouse/models/staging/oracle_neshu/_oracle_neshu__sources.yml/source_not_null_oracle_neshu_evs_task_type_idtask_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect idtask_type\nfrom `evs-datastack-prod`.`prod_raw`.`evs_task_type`\nwhere idtask_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "idtask_type", "file_key_name": "sources.oracle_neshu", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "idtask_type", "model": "{{ get_where_subquery(source('oracle_neshu', 'evs_task_type')) }}"}, "namespace": null}}}, "sources": {"source.dbt_warehouse.mssql_sage.dbo_f_ecriturea": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "dbo_f_ecriturea", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "source.dbt_warehouse.mssql_sage.dbo_f_ecriturea", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "mssql_sage", "dbo_f_ecriturea"], "source_name": "mssql_sage", "source_description": "Source des donn\u00e9es issues de Sage (MSSQL) \u2014 donn\u00e9es brutes extraites vers BigQuery", "loader": "", "identifier": "dbo_f_ecriturea", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des \u00e9critures analytiques (f_ecriturea) \u2014 d\u00e9tail des montants et quantit\u00e9s analytiques par \u00e9criture comptable", "columns": {"ec_no": {"name": "ec_no", "description": "Num\u00e9ro d'\u00e9criture comptable", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "n_analytique": {"name": "n_analytique", "description": "Num\u00e9ro de l'axe analytique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ea_ligne": {"name": "ea_ligne", "description": "Num\u00e9ro de ligne d'\u00e9criture analytique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ca_num": {"name": "ca_num", "description": "Code du compte analytique (lisible)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_ca_num": {"name": "cb_ca_num", "description": "Code du compte analytique en hexad\u00e9cimal (encod\u00e9)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ea_montant": {"name": "ea_montant", "description": "Montant de l'\u00e9criture analytique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ea_quantite": {"name": "ea_quantite", "description": "Quantit\u00e9 associ\u00e9e \u00e0 l'\u00e9criture analytique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_prot": {"name": "cb_prot", "description": "Indicateur de protection (technique Sage)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_marq": {"name": "cb_marq", "description": "Identifiant unique de l'\u00e9criture analytique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_createur": {"name": "cb_createur", "description": "Utilisateur ayant cr\u00e9\u00e9 la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_modification": {"name": "cb_modification", "description": "Horodatage de la derni\u00e8re modification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_replication": {"name": "cb_replication", "description": "Indicateur de r\u00e9plication", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_flag": {"name": "cb_flag", "description": "Flag technique interne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_creation": {"name": "cb_creation", "description": "Horodatage de cr\u00e9ation de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_creation_user": {"name": "cb_creation_user", "description": "Utilisateur ayant cr\u00e9\u00e9 la ligne (UUID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp de r\u00e9ception du flux par Singer/ETL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp d\u2019extraction initiale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp de regroupement du lot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_deleted_at": {"name": "_sdc_deleted_at", "description": "Timestamp de suppression logique (si applicable)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Version de la table dans le flux d\u2019ingestion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "Num\u00e9ro de s\u00e9quence du flux pour suivi d\u2019ordre", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturea`", "created_at": 1760962912.381558, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.mssql_sage.dbo_f_ecriturec": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "dbo_f_ecriturec", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "original_file_path": "models/staging/mssql_sage/_mssql_sage__sources.yml", "unique_id": "source.dbt_warehouse.mssql_sage.dbo_f_ecriturec", "fqn": ["dbt_warehouse", "staging", "mssql_sage", "mssql_sage", "dbo_f_ecriturec"], "source_name": "mssql_sage", "source_description": "Source des donn\u00e9es issues de Sage (MSSQL) \u2014 donn\u00e9es brutes extraites vers BigQuery", "loader": "", "identifier": "dbo_f_ecriturec", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des \u00e9critures comptables (f_ecriturec) \u2014 enregistre les mouvements comptables avec leurs montants, comptes, dates et statuts", "columns": {"ec_no": {"name": "ec_no", "description": "Identifiant unique de l\u2019\u00e9criture comptable (cl\u00e9 primaire)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "jo_num": {"name": "jo_num", "description": "Code du journal comptable", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_jo_num": {"name": "cb_jo_num", "description": "Code journal comptable (encod\u00e9)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_no_link": {"name": "ec_no_link", "description": "Num\u00e9ro d\u2019\u00e9criture li\u00e9e (ex : \u00e9criture d\u2019origine ou d\u2019annulation)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "jm_date": {"name": "jm_date", "description": "Date du mouvement comptable", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_jour": {"name": "ec_jour", "description": "Jour du mouvement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_date": {"name": "ec_date", "description": "Date de l\u2019\u00e9criture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_piece": {"name": "ec_piece", "description": "Num\u00e9ro de pi\u00e8ce comptable", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_ec_piece": {"name": "cb_ec_piece", "description": "Num\u00e9ro de pi\u00e8ce comptable encod\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_ref_piece": {"name": "ec_ref_piece", "description": "R\u00e9f\u00e9rence de la pi\u00e8ce associ\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_ec_ref_piece": {"name": "cb_ec_ref_piece", "description": "R\u00e9f\u00e9rence de la pi\u00e8ce encod\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_treso_piece": {"name": "ec_treso_piece", "description": "Pi\u00e8ce de tr\u00e9sorerie associ\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cg_num": {"name": "cg_num", "description": "Num\u00e9ro du compte g\u00e9n\u00e9ral", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_cg_num": {"name": "cb_cg_num", "description": "Num\u00e9ro du compte g\u00e9n\u00e9ral encod\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cg_num_cont": {"name": "cg_num_cont", "description": "Compte g\u00e9n\u00e9ral contrepartie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ct_num": {"name": "ct_num", "description": "Code du tiers associ\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_ct_num": {"name": "cb_ct_num", "description": "Code tiers encod\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_intitule": {"name": "ec_intitule", "description": "Libell\u00e9 de l\u2019\u00e9criture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "n_reglement": {"name": "n_reglement", "description": "Num\u00e9ro de r\u00e8glement associ\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_echeance": {"name": "ec_echeance", "description": "Date d\u2019\u00e9ch\u00e9ance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_parite": {"name": "ec_parite", "description": "Taux de parit\u00e9 utilis\u00e9 pour conversion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_quantite": {"name": "ec_quantite", "description": "Quantit\u00e9 associ\u00e9e \u00e0 l\u2019\u00e9criture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "n_devise": {"name": "n_devise", "description": "Code devise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_sens": {"name": "ec_sens", "description": "Sens de l\u2019\u00e9criture (D\u00e9bit/Cr\u00e9dit)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_montant": {"name": "ec_montant", "description": "Montant de l\u2019\u00e9criture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_lettre": {"name": "ec_lettre", "description": "Indicateur de lettrage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_lettrage": {"name": "ec_lettrage", "description": "Code de lettrage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_point": {"name": "ec_point", "description": "Indicateur de pointage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_pointage": {"name": "ec_pointage", "description": "Code de pointage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_impression": {"name": "ec_impression", "description": "Indicateur d\u2019impression", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_cloture": {"name": "ec_cloture", "description": "Indicateur de cl\u00f4ture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_c_type": {"name": "ec_c_type", "description": "Type de compte (client, fournisseur, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_rappel": {"name": "ec_rappel", "description": "Indicateur de rappel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ct_num_cont": {"name": "ct_num_cont", "description": "Code du tiers contrepartie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_lettre_q": {"name": "ec_lettre_q", "description": "Indicateur de lettrage quantitatif", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_lettrage_q": {"name": "ec_lettrage_q", "description": "Code de lettrage quantitatif", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_an_type": {"name": "ec_an_type", "description": "Type analytique li\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_r_type": {"name": "ec_r_type", "description": "Type de r\u00e8glement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_devise": {"name": "ec_devise", "description": "Montant dans la devise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_remise": {"name": "ec_remise", "description": "Indicateur de remise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_export_expert": {"name": "ec_export_expert", "description": "Indicateur d\u2019export vers Expert", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ta_code": {"name": "ta_code", "description": "Code de taxe associ\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "cb_ta_code": {"name": "cb_ta_code", "description": "Code de taxe encod\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_norme": {"name": "ec_norme", "description": "Norme comptable utilis\u00e9e", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ta_provenance": {"name": "ta_provenance", "description": "Provenance de la taxe", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_penal_type": {"name": "ec_penal_type", "description": "Type de p\u00e9nalit\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_date_penal": {"name": "ec_date_penal", "description": "Date de p\u00e9nalit\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_date_relance": {"name": "ec_date_relance", "description": "Date de relance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_date_rappro": {"name": "ec_date_rappro", "description": "Date de rapprochement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_reference": {"name": "ec_reference", "description": "R\u00e9f\u00e9rence libre de l\u2019\u00e9criture", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_status_regle": {"name": "ec_status_regle", "description": "Statut de r\u00e8glement (0 = non r\u00e9gl\u00e9, 1 = r\u00e9gl\u00e9)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ec_montant_regle": {"name": "ec_montant_regle", "description": "Montant r\u00e9gl\u00e9", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_received_at": {"name": "_sdc_received_at", "description": "Timestamp d\u2019ingestion du flux par Singer/ETL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_extracted_at": {"name": "_sdc_extracted_at", "description": "Timestamp d\u2019extraction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_batched_at": {"name": "_sdc_batched_at", "description": "Timestamp de batch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_deleted_at": {"name": "_sdc_deleted_at", "description": "Timestamp de suppression logique", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_table_version": {"name": "_sdc_table_version", "description": "Version de la table dans le flux d\u2019ingestion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_sdc_sequence": {"name": "_sdc_sequence", "description": "Num\u00e9ro de s\u00e9quence du flux", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_sdc_received_at", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`dbo_f_ecriturec`", "created_at": 1760962912.3889923, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_clients": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_clients", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_clients", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_clients"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_clients", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des clients Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_clients`", "created_at": 1760962912.3944237, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_sites": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_sites", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_sites", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_sites"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_sites", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des sites Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "R\u00e9f\u00e9rence vers le client propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_sites`", "created_at": 1760962912.4022255, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_materials": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_materials", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_materials", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_materials"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_materials", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des machines Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de la machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "R\u00e9f\u00e9rence vers le site propri\u00e9taire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_materials`", "created_at": 1760962912.4100182, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_material_categories": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_material_categories", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_material_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_material_categories"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_material_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des cat\u00e9gories de machines Yuman pour mapper les machines aux cat\u00e9gories", "columns": {"id": {"name": "id", "description": "Identifiant unique de la cat\u00e9gorie machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_material_categories`", "created_at": 1760962912.4153306, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_products": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_products", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_products", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_products"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des produits Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique du produit/articles", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_products`", "created_at": 1760962912.4208353, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_users": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_users", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_users", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_users"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des users Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de l'utilisateur", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_users`", "created_at": 1760962912.4261627, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_workorder_demands_categories", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_workorder_demands_categories"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_workorder_demands_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des cat\u00e9gories de demandes d'intervention Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de la cat\u00e9gorie de demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands_categories`", "created_at": 1760962912.4322095, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_workorder_demands": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_workorder_demands", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_workorder_demands", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_workorder_demands"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_workorder_demands", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des demandes d'intervention Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de la demande d'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Identifiant du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Identifiant du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_id": {"name": "contact_id", "description": "Identifiant du contact", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "material_id": {"name": "material_id", "description": "Identifiant du material/machine", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "workoder_id": {"name": "workoder_id", "description": "Identifiant de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Identifiant de l'utilisateur", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Identifiant de la cat\u00e9gorie de la demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Statut de la demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_workorder_demands`", "created_at": 1760962912.4376552, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_workorders": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_workorders", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_workorders", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_workorders"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_workorders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des interventions Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "client_id": {"name": "client_id", "description": "Identifiant du client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "site_id": {"name": "site_id", "description": "Identifiant du site", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_id": {"name": "contact_id", "description": "Identifiant du contact", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "technician_id": {"name": "technician_id", "description": "Identifiant du technicien", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "Identifiant du manager", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Identifiant de la cat\u00e9gorie de l'intervention", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_workorders`", "created_at": 1760962912.4430456, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_workorder_categories": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_workorder_categories", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_workorder_categories", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_workorder_categories"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_workorder_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des cat\u00e9gories d'intervention Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique de la cat\u00e9gorie de demande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_workorder_categories`", "created_at": 1760962912.4483685, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.yuman_api.yuman_purchase_orders": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "yuman_purchase_orders", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/yuman/_yuman__sources.yml", "original_file_path": "models/staging/yuman/_yuman__sources.yml", "unique_id": "source.dbt_warehouse.yuman_api.yuman_purchase_orders", "fqn": ["dbt_warehouse", "staging", "yuman", "yuman_api", "yuman_purchase_orders"], "source_name": "yuman_api", "source_description": "Donn\u00e9es brutes extraites de l'API Yuman", "loader": "", "identifier": "yuman_purchase_orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des commandes d'achat Yuman", "columns": {"id": {"name": "id", "description": "Identifiant unique du bon de commande", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`yuman_purchase_orders`", "created_at": 1760962912.4537866, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_company": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_company", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_company", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_company"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcompany": {"name": "idcompany", "description": "Identifiant unique de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_idcompany": {"name": "company_idcompany", "description": "Link to IDCOMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_type": {"name": "idcompany_type", "description": "Link to COMPANY_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code client de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom client de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "creation_date": {"name": "creation_date", "description": "Date de creation de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "modification_date": {"name": "modification_date", "description": "Date de modification de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_company`", "created_at": 1760962912.4592013, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_company_has_location": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_company_has_location", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_company_has_location", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_company_has_location"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_company_has_location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcompany": {"name": "idcompany", "description": "Identifiant de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Identifiant de la localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation_type": {"name": "idlocation_type", "description": "Identifiant du type de localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_company_has_location`", "created_at": 1760962912.4669716, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_company_type": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_company_type", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_company_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_company_type"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_company_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcompany_type": {"name": "idcompany_type", "description": "Identifiant unique du type l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_company_type`", "created_at": 1760962912.4724162, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_contact": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_contact", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_contact", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_contact"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcontact": {"name": "idcontact", "description": "Identifiant unique du contact", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Link to IDCOMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "modification_date": {"name": "modification_date", "description": "Date de modification de la ligne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_contact`", "created_at": 1760962912.4777532, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_contract": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_contract", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_contract", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_contract"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_contract", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcontract": {"name": "idcontract", "description": "Identifiant unique du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_peer": {"name": "idcompany_peer", "description": "Link to IDCOMPANY for peer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "code du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "nom du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGINAL_START_DATE": {"name": "ORIGINAL_START_DATE", "description": "Date de debut original du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGINAL_END_DATE": {"name": "ORIGINAL_END_DATE", "description": "Date de fin original du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CURRENT_END_DATE": {"name": "CURRENT_END_DATE", "description": "Date de fin courant du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_contract`", "created_at": 1760962912.483404, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_contract_parsed": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_contract_parsed", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_contract_parsed", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_contract_parsed"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_contract_parsed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idcontract": {"name": "idcontract", "description": "Identifiant unique du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "nombre_collab": {"name": "nombre_collab", "description": "Nombre collab du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "engagement": {"name": "engagement", "description": "Engagement consommation du contrat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extracted_at": {"name": "extracted_at", "description": "Meta donn\u00e9e d'extraction script python", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_contract_parsed`", "created_at": 1760962912.4887774, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_device": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_device", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_device", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_device"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"iddevice": {"name": "iddevice", "description": "Identifiant unique du device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_iddevice": {"name": "device_iddevice", "description": "Lien vers la machine parents/enfant => si pas d'id alors pas de machine parent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code device (Num\u00e9ro de serie AS/MA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_device`", "created_at": 1760962912.4942367, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant de la statut de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlabel_family": {"name": "idlabel_family", "description": "Link to LABEL_FAMILY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label`", "created_at": 1760962912.4995883, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_family": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_family", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_family", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_family"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_family", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel_family": {"name": "idlabel_family", "description": "Identifiant unique du label family", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code du label family", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_family`", "created_at": 1760962912.5050263, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_company": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_company", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_company", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_company"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_company", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Identifiant de l'entreprise", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_company`", "created_at": 1760962912.5104275, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_contract": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_contract", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_contract", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_contract"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_contract", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcontract": {"name": "idcontract", "description": "Identifiant du contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_contract`", "created_at": 1760962912.5159273, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_device": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_device", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_device", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_device"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "iddevice": {"name": "iddevice", "description": "Identifiant du device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_device`", "created_at": 1760962912.5212736, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_product": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_product", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_product"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idproduct": {"name": "idproduct", "description": "Identifiant du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_product`", "created_at": 1760962912.526751, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_resources": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_resources", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_resources"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_resources", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources": {"name": "idresources", "description": "Identifiant du resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_resources`", "created_at": 1760962912.5321527, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_label_has_task": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_label_has_task", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_label_has_task", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_label_has_task"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_label_has_task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlabel": {"name": "idlabel", "description": "Identifiant du label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask": {"name": "idtask", "description": "Identifiant du task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_label_has_task`", "created_at": 1760962912.5376308, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_location": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_location", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_location", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_location"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idlocation": {"name": "idlocation", "description": "Identifiant du location", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom de la localisation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_location`", "created_at": 1760962912.5430038, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_product": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_product", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_product"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idproduct": {"name": "idproduct", "description": "Identifiant unique du produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "purchase_unit_price": {"name": "purchase_unit_price", "description": "Prix d'achat unitaire", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_product`", "created_at": 1760962912.5485318, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_product_type": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_product_type", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_product_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_product_type"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_product_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idproduct_type": {"name": "idproduct_type", "description": "Identifiant unique du type de produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_product_type`", "created_at": 1760962912.5538685, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_resources": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_resources", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_resources"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_resources", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idresources": {"name": "idresources", "description": "Identifiant unique de la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany": {"name": "idcompany", "description": "Link to COMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Link to LOCATION", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "RESOURCES_IDRESOURCES": {"name": "RESOURCES_IDRESOURCES", "description": "Link to RESOURCES peer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources_type": {"name": "idresources_type", "description": "Link to RESOURCES_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Nom resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_resources`", "created_at": 1760962912.559578, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_resources_type": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_resources_type", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_resources_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_resources_type"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_resources_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idresources_type": {"name": "idresources_type", "description": "Identifiant unique du type la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code type resource", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_resources_type`", "created_at": 1760962912.564964, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_task": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_task", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_task", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_task"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idtask": {"name": "idtask", "description": "Identifiant unique de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "task_idtask": {"name": "task_idtask", "description": "link to task peer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask_type": {"name": "idtask_type", "description": "link to TASK_TYPE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask_status": {"name": "idtask_status", "description": "link to TASK_STATUS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcompany_peer": {"name": "idcompany_peer", "description": "Link to COMPANY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "iddevice": {"name": "iddevice", "description": "Link to DEVICE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idcontact": {"name": "idcontact", "description": "Link to CONTACT", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idlocation": {"name": "idlocation", "description": "Link to LOCATION", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code_status_record": {"name": "code_status_record", "description": "Code status de la t\u00e2che ( 1 = valid\u00e9, 0 ou -1 = non valid\u00e9)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "real_start_date": {"name": "real_start_date", "description": "date demarrage de la tache", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "real_end_date": {"name": "real_end_date", "description": "date de fin de la tache", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_task`", "created_at": 1760962912.570491, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_task_has_product": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_task_has_product", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_task_has_product", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_task_has_product"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_task_has_product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idtask_has_product": {"name": "idtask_has_product", "description": "Identifiant unique de la t\u00e2che associ\u00e9e au produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idtask": {"name": "idtask", "description": "link to task", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_SOURCE": {"name": "IDPRODUCT_SOURCE", "description": "ID de la source (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IDPRODUCT_DESTINATION": {"name": "IDPRODUCT_DESTINATION", "description": "ID de la destination (IDDEVICE/IDCOMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_SOURCE": {"name": "TYPE_PRODUCT_SOURCE", "description": "nom de la table de la source (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE_PRODUCT_DESTINATION": {"name": "TYPE_PRODUCT_DESTINATION", "description": "nom de la table de la destination (DEVICE / COMPANY etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REAL_QUANTITY": {"name": "REAL_QUANTITY", "description": "Quantit\u00e9 r\u00e9el produit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NET_PRICE": {"name": "NET_PRICE", "description": "sale unit price net without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SALE_UNIT_PRICE": {"name": "SALE_UNIT_PRICE", "description": "sale unit price brut without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PURCHASE_UNIT_PRICE": {"name": "PURCHASE_UNIT_PRICE", "description": "product purchase unit price net without tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_task_has_product`", "created_at": 1760962912.576042, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_task_has_resources": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_task_has_resources", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_task_has_resources", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_task_has_resources"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_task_has_resources", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idtask": {"name": "idtask", "description": "Identifiant de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "idresources": {"name": "idresources", "description": "Identifiant de la resources", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_task_has_resources`", "created_at": 1760962912.5814762, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_task_status": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_task_status", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_task_status", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_task_status"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_task_status", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idtask_status": {"name": "idtask_status", "description": "Identifiant de la statut de la t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "code": {"name": "code", "description": "Code status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_task_status`", "created_at": 1760962912.5869725, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}, "source.dbt_warehouse.oracle_neshu.evs_task_type": {"database": "evs-datastack-prod", "schema": "prod_raw", "name": "evs_task_type", "resource_type": "source", "package_name": "dbt_warehouse", "path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "original_file_path": "models/staging/oracle_neshu/_oracle_neshu__sources.yml", "unique_id": "source.dbt_warehouse.oracle_neshu.evs_task_type", "fqn": ["dbt_warehouse", "staging", "oracle_neshu", "oracle_neshu", "evs_task_type"], "source_name": "oracle_neshu", "source_description": "", "loader": "", "identifier": "evs_task_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"idtask_type": {"name": "idtask_type", "description": "Identifiant unique du type de t\u00e2che", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`evs-datastack-prod`.`prod_raw`.`evs_task_type`", "created_at": 1760962912.5924134, "unrendered_database": null, "unrendered_schema": "prod_raw", "doc_blocks": []}}, "macros": {"macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {% if catalog_relation.table_format == 'iceberg' and not temporary %}with connection default{% endif %}\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {%- set submission_method = config.get(\"submission_method\", \"serverless\") -%}\n    {%- if submission_method in (\"serverless\", \"cluster\") -%}\n      {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- elif submission_method == \"bigframes\" -%}\n      {{ bigframes_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported dataframe syntax, it got %s\" % submission_method) %} {%- endif -%}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table", "macro.dbt_bigquery.bigframes_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6669788, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.668076, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6683822, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6686864, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6689758, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6692684, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6696537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do alter_relation_comment(relation, model.description) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.670541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_comment": {"name": "bigquery__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_comment", "macro_sql": "{% macro bigquery__alter_relation_comment(relation, relation_comment) -%}\n  {% do adapter.update_table_description(relation.database, relation.schema, relation.identifier, relation_comment) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.670954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6712708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6721056, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.672864, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6741867, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6745398, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6750867, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6756175, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.676023, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6765501, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6782446, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6800854, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6815429, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6817236, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.681913, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6825607, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.682763, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6831973, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6834335, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6838589, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6842089, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6848285, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6874876, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6879506, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6888783, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6892352, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6896691, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.689952, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6903799, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6913464, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6916966, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6924286, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6927335, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6930945, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6933858, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.69367, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6940439, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.694384, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6955879, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.696774, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6971292, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6981287, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6985986, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6988208, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.6998193, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7003446, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7008343, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7013862, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7063591, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7089746, "supported_languages": null}, "macro.dbt_bigquery.bigframes_write_table": {"name": "bigframes_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.bigframes_write_table", "macro_sql": "{% macro bigframes_write_table(compiled_code, target_relation) %}\nimport bigframes.pandas as bpd\nbpd.options.compute.extra_query_labels[\"bigframes-dbt-api\"] = \"python-model-table\"\nbpd.options.bigquery.application_name = f\"dbt-bigquery-{{dbt_version}}\"\nbpd.options.bigquery.ordering_mode = \"partial\"\nbpd.options.bigquery.project = \"{{ target.project }}\"\n{% if target.location %}\nbpd.options.bigquery.location = \"{{ target.location }}\"\n{% endif %}\nsession = bpd.get_global_session()\n{{ compiled_code }}\ndbt = dbtObj(bpd.read_gbq)\ndf = model(dbt, session)\ndf.to_gbq(\"{{ target_relation }}\", if_exists=\"replace\")\ndf._session.close()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7095745, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7101018, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7104461, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7119935, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.712395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    drop table if exists {{ this_relation }};\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7127109, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7135758, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.714944, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7174172, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_materialized_view_bigquery": {"name": "materialization_materialized_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_bigquery.materialization_materialized_view_bigquery", "macro_sql": "{% materialization materialized_view, adapter='bigquery' -%}\n\n    {% set relations = materialization_materialized_view_default() %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {{ return(relations) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.materialization_materialized_view_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.718524, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.719195, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7195275, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7197993, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.722869, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7234488, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.725009, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.726673, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7349856, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7366083, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7373555, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.73949, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7405431, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7417462, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7444263, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7468812, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7479992, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7499702, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7513402, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7536387, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7547781, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7555873, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7560902, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7573943, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7580855, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.758593, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7594986, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7603443, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7607427, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7621884, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7625468, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.763071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7634254, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.766168, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.766585, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7670214, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7673168, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.76823, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7688346, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7692537, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7703762, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7714984, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.771782, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.772408, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7727897, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7730737, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.773794, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.774568, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7753923, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.775925, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7765121, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7771828, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7777152, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7781622, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7784562, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7790618, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.779421, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7798996, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7801216, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.78069, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7809796, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7814915, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7817185, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7821934, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7824667, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.783173, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.783667, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7841427, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.784377, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.784982, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7855933, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.786144, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7864435, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7871401, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7874918, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.788013, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7883167, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7889323, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7895215, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7908015, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7911048, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.791445, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7917461, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.792064, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7923942, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7927158, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7930589, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7933977, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.793698, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.794015, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7943265, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7946563, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7950563, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7959151, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7967596, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7971342, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7981753, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.7991269, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8003132, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.800772, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8014855, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8020287, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.80231, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8029964, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.80335, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.803806, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8043408, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8046196, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8052037, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8055708, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.806428, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8073547, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8078437, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.808057, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.808661, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8091726, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.809486, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8099976, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.810285, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8107874, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.811105, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8116608, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8119357, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.812482, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8127522, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8132179, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8135881, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8140225, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8141851, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8147733, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8153496, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8163583, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8169236, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8176804, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8180501, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8184538, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8193157, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8201294, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8205593, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.82118, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8220897, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8223853, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8227015, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8235343, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8239048, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8241851, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8245163, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8247702, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8261654, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8265207, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8272777, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8278744, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8283713, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8290005, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.829377, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8297408, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8302221, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8313398, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.831799, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8320866, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.832718, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.833089, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8334312, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8338006, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8346174, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.83496, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8353708, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8356984, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.836354, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.837286, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8378348, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8382874, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8391383, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8394601, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8397534, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.839969, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8407934, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8411286, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8412864, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.841657, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8419893, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.84354, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.844066, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8444867, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.845002, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8453784, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8456945, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8463824, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8468752, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8472679, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.847866, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8482218, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8485816, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.848941, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8492572, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8496015, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8499029, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8503187, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.850664, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8526952, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.852933, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.853257, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8534992, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8541708, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8545585, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.854803, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8553746, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.855785, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8562262, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8566551, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8570974, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.858424, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8587966, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8592896, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8597562, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8620186, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.864188, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.864525, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8651319, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8657134, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8661373, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8665588, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8669083, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8692813, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8699632, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8703449, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8710008, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.871457, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8727467, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.873236, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8748553, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8798547, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8811321, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8832915, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.883722, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8839173, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8855731, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.885964, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8862526, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8865602, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8868542, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8874352, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.888027, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8886328, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.889633, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.890233, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8906631, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8918698, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8956084, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.896238, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.8969994, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.901397, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9054766, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9094915, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9125051, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9132574, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9137616, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.916311, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.916863, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.91823, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9187257, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9189777, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9238446, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9244552, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9247952, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9270265, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.929418, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9318788, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9335537, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9355934, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9390275, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.93956, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9409795, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9415243, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9427862, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9440079, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9444818, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9448478, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9454544, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9458215, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9464133, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9467762, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.947288, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9476702, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9479685, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.948353, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9487886, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9493563, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.950905, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9519928, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9533107, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.953781, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9552114, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9563532, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9648082, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9666638, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9684632, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.968939, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9699595, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9703581, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.97063, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9709113, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9711473, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9714787, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9717135, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9726582, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9730198, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.975498, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9805856, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9845085, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.985161, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.985512, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9857, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9859908, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9862254, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9866462, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9871438, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and\n                {% if config.get('dbt_valid_to_current') -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n                {%- else -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} is null\n                {%- endif %}\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#/*\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             */#}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and\n            {% if config.get('dbt_valid_to_current') -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n            {%- else -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} is null\n            {%- endif %}\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9961271, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9965692, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9976103, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.9984677, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962908.999655, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0005124, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0010648, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0017602, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.002889, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0033188, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.003732, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0077088, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0080457, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0085092, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.010429, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.010771, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0111191, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0142097, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0170481, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.017899, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.019552, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0274384, "supported_languages": ["sql"]}, "macro.dbt.function_execute_build_sql": {"name": "function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.function_execute_build_sql", "macro_sql": "{% macro function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n    {{ return(adapter.dispatch('function_execute_build_sql', 'dbt')(build_sql, existing_relation, target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0283816, "supported_languages": null}, "macro.dbt.default__function_execute_build_sql": {"name": "default__function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__function_execute_build_sql", "macro_sql": "{% macro default__function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.029427, "supported_languages": null}, "macro.dbt.get_function_macro": {"name": "get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.get_function_macro", "macro_sql": "{% macro get_function_macro(function_type, function_language) %}\n    {{ return(adapter.dispatch('get_function_macro', 'dbt')(function_type, function_language)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_function_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0298426, "supported_languages": null}, "macro.dbt.default__get_function_macro": {"name": "default__get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__get_function_macro", "macro_sql": "{% macro default__get_function_macro(function_type, function_language) %}\n    {% set macro_name = function_type ~ \"_function_\" ~ function_language %}\n    {% if not macro_name in context %}\n        {{ exceptions.raise_not_implemented(function_language ~ ' ' ~ function_type ~ ' function not implemented for adapter ' ~adapter.type()) }}\n    {% endif %}\n    {% set macro = context[macro_name] %}\n    {{ return(macro) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0306928, "supported_languages": null}, "macro.dbt.materialization_function_default": {"name": "materialization_function_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/function.sql", "original_file_path": "macros/materializations/functions/function.sql", "unique_id": "macro.dbt.materialization_function_default", "macro_sql": "{% materialization function, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.Function) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set function_type_macro = get_function_macro('scalar', 'sql') %}\n    {% set build_sql = function_type_macro(target_relation) %}\n\n    {{ function_execute_build_sql(build_sql, existing_relation, target_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt.get_function_macro", "macro.dbt.function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.032033, "supported_languages": ["sql"]}, "macro.dbt.scalar_function_sql": {"name": "scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_sql", "macro_sql": "{% macro scalar_function_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.032918, "supported_languages": null}, "macro.dbt.default__scalar_function_sql": {"name": "default__scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_sql", "macro_sql": "{% macro default__scalar_function_sql(target_relation) %}\n    {{ scalar_function_create_replace_signature_sql(target_relation) }}\n    {{ scalar_function_body_sql() }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.scalar_function_create_replace_signature_sql", "macro.dbt.scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0332263, "supported_languages": null}, "macro.dbt.scalar_function_create_replace_signature_sql": {"name": "scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_create_replace_signature_sql", "macro_sql": "{% macro scalar_function_create_replace_signature_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_create_replace_signature_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_create_replace_signature_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0336595, "supported_languages": null}, "macro.dbt.default__scalar_function_create_replace_signature_sql": {"name": "default__scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_create_replace_signature_sql", "macro_sql": "{% macro default__scalar_function_create_replace_signature_sql(target_relation) %}\n    CREATE OR REPLACE FUNCTION {{ target_relation.render() }} ({{ formatted_scalar_function_args_sql()}})\n    RETURNS {{ model.returns.data_type }}\n    AS\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0340345, "supported_languages": null}, "macro.dbt.formatted_scalar_function_args_sql": {"name": "formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.formatted_scalar_function_args_sql", "macro_sql": "{% macro formatted_scalar_function_args_sql() %}\n    {{ return(adapter.dispatch('formatted_scalar_function_args_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0343847, "supported_languages": null}, "macro.dbt.default__formatted_scalar_function_args_sql": {"name": "default__formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__formatted_scalar_function_args_sql", "macro_sql": "{% macro default__formatted_scalar_function_args_sql() %}\n    {% set args = [] %}\n    {% for arg in model.arguments -%}\n        {%- do args.append(arg.name ~ ' ' ~ arg.data_type) -%}\n    {%- endfor %}\n    {{ args | join(', ') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.035017, "supported_languages": null}, "macro.dbt.scalar_function_body_sql": {"name": "scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_body_sql", "macro_sql": "{% macro scalar_function_body_sql() %}\n    {{ return(adapter.dispatch('scalar_function_body_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0353642, "supported_languages": null}, "macro.dbt.default__scalar_function_body_sql": {"name": "default__scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_body_sql", "macro_sql": "{% macro default__scalar_function_body_sql() %}\n    $$\n       {{ model.compiled_code }}\n    $$ LANGUAGE SQL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0355797, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.036902, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0372088, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0392041, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0400143, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0411515, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0420756, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0422287, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0436413, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0459979, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.047487, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.047936, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0504286, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0515523, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0521224, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0527942, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0532851, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.053879, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0543084, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.055174, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.056044, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0564742, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0570672, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.057598, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0581663, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0589008, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0597878, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.060819, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0632894, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0641656, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0649633, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0653422, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0657508, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0661368, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0667546, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0672772, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0678642, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0682647, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.06878, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0690699, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0697591, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.070077, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0705602, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0714316, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.072387, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0726805, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.074886, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0752728, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0757573, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0762296, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0765011, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0775273, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0779188, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0785, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0787933, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0793138, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0796168, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0801766, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.080465, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0809736, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0812683, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.081804, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0822134, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0827024, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0829504, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0834708, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0837648, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.084923, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0852828, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0861301, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0874984, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0884042, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.088765, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.089107, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0896354, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0899267, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.090404, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0906525, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.092006, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0922494, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0934315, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0937824, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0940526, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0966063, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0973976, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0980725, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.098927, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.0994296, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1000216, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.100612, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.102138, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1052713, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.106201, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.107134, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1079183, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1088233, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1097074, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1112745, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1122425, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1140075, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1147454, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1154737, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1165726, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1185472, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1195996, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.121517, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.122554, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1241925, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1250432, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.126638, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.127363, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1279523, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1287389, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.129515, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1304235, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1310892, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1321766, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1342833, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1350331, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1357067, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1365314, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1379087, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1393197, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.139817, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1402318, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1407933, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1411827, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1424413, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1432867, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.143821, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1441467, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1447217, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.145642, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1462786, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1475592, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1481385, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.148771, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1501148, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1535091, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1543822, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.155281, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1556888, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1564019, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1576753, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.158586, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1602361, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1610262, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1625097, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1644807, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1713095, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.17261, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1733449, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1747713, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.175768, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1771376, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1800718, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1807606, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.181224, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1818402, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.182115, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.182401, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1826806, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1832852, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.184368, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1848981, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1851652, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.186697, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1887517, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1895382, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1909537, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1915271, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1921887, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.19355, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1963348, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1971745, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1979954, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1983805, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.1994214, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2000792, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.201246, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2021663, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2033465, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.203808, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2045228, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2051458, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2063582, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2069528, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2076356, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2084641, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2090003, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2101076, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2117047, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2126985, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2131193, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.213528, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2139215, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.214263, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2146266, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2155452, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.21734, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2180731, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.218671, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2191916, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760962909.2196965, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_warehouse.stg_yuman__workorder_products": ["source.dbt_warehouse.yuman_api.yuman_workorders"], "model.dbt_warehouse.stg_yuman__users": ["source.dbt_warehouse.yuman_api.yuman_users"], "model.dbt_warehouse.stg_yuman__workorders": ["source.dbt_warehouse.yuman_api.yuman_workorders"], "model.dbt_warehouse.stg_yuman__sites": ["source.dbt_warehouse.yuman_api.yuman_sites"], "model.dbt_warehouse.stg_yuman__workorder_demands": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"], "model.dbt_warehouse.stg_yuman__materials_categories": ["source.dbt_warehouse.yuman_api.yuman_material_categories"], "model.dbt_warehouse.stg_yuman__products": ["source.dbt_warehouse.yuman_api.yuman_products"], "model.dbt_warehouse.stg_yuman__materials": ["source.dbt_warehouse.yuman_api.yuman_materials"], "model.dbt_warehouse.stg_yuman__purchase_orders": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"], "model.dbt_warehouse.stg_yuman__workorder_demands_categories": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"], "model.dbt_warehouse.stg_yuman__clients": ["source.dbt_warehouse.yuman_api.yuman_clients"], "model.dbt_warehouse.stg_yuman__workorders_categories": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"], "model.dbt_warehouse.stg_oracle_neshu__product_type": ["source.dbt_warehouse.oracle_neshu.evs_product_type"], "model.dbt_warehouse.stg_oracle_neshu__task": ["source.dbt_warehouse.oracle_neshu.evs_task"], "model.dbt_warehouse.stg_oracle_neshu__contact": ["source.dbt_warehouse.oracle_neshu.evs_contact"], "model.dbt_warehouse.stg_oracle_neshu__task_has_resources": ["model.dbt_warehouse.stg_oracle_neshu__task", "source.dbt_warehouse.oracle_neshu.evs_task_has_resources"], "model.dbt_warehouse.stg_oracle_neshu__label_has_contract": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"], "model.dbt_warehouse.stg_oracle_neshu__task_has_product": ["model.dbt_warehouse.stg_oracle_neshu__task", "source.dbt_warehouse.oracle_neshu.evs_task_has_product"], "model.dbt_warehouse.stg_oracle_neshu__label_has_company": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"], "model.dbt_warehouse.stg_oracle_neshu__label_family": ["source.dbt_warehouse.oracle_neshu.evs_label_family"], "model.dbt_warehouse.stg_oracle_neshu__label_has_task": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"], "model.dbt_warehouse.stg_oracle_neshu__company": ["source.dbt_warehouse.oracle_neshu.evs_company"], "model.dbt_warehouse.stg_oracle_neshu__label_has_device": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"], "model.dbt_warehouse.stg_oracle_neshu__label": ["source.dbt_warehouse.oracle_neshu.evs_label"], "model.dbt_warehouse.stg_oracle_neshu__task_status": ["source.dbt_warehouse.oracle_neshu.evs_task_status"], "model.dbt_warehouse.stg_oracle_neshu__device": ["source.dbt_warehouse.oracle_neshu.evs_device"], "model.dbt_warehouse.stg_oracle_neshu__label_has_product": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"], "model.dbt_warehouse.stg_oracle_neshu__company_has_location": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"], "model.dbt_warehouse.stg_oracle_neshu__label_has_resources": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"], "model.dbt_warehouse.stg_oracle_neshu__location": ["source.dbt_warehouse.oracle_neshu.evs_location"], "model.dbt_warehouse.stg_oracle_neshu__contract": ["source.dbt_warehouse.oracle_neshu.evs_contract", "source.dbt_warehouse.oracle_neshu.evs_contract_parsed"], "model.dbt_warehouse.stg_oracle_neshu__product": ["source.dbt_warehouse.oracle_neshu.evs_product"], "model.dbt_warehouse.stg_oracle_neshu__task_type": ["source.dbt_warehouse.oracle_neshu.evs_task_type"], "model.dbt_warehouse.stg_oracle_neshu__resources_type": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"], "model.dbt_warehouse.stg_oracle_neshu__resources": ["source.dbt_warehouse.oracle_neshu.evs_resources"], "model.dbt_warehouse.stg_oracle_neshu__company_type": ["source.dbt_warehouse.oracle_neshu.evs_company_type"], "model.dbt_warehouse.dim_yuman__clients": ["model.dbt_warehouse.stg_yuman__clients"], "model.dbt_warehouse.dim_yuman__materials_clients": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories", "model.dbt_warehouse.stg_yuman__sites"], "model.dbt_warehouse.dim_yuman__sites": ["model.dbt_warehouse.stg_yuman__sites"], "model.dbt_warehouse.dim_yuman__materials": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories"], "model.dbt_warehouse.dim_oracle_neshu__device": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_device", "model.dbt_warehouse.stg_oracle_neshu__location"], "model.dbt_warehouse.fct_oracle_neshu__conso_business_review": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "model.dbt_warehouse.fct_oracle_neshu__pa_business_review": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "model.dbt_warehouse.dim_oracle_neshu__contract": ["model.dbt_warehouse.stg_oracle_neshu__contract", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract"], "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.stg_yuman__workorder_demands", "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "model.dbt_warehouse.stg_yuman__workorders"], "model.dbt_warehouse.dim_oracle_neshu__product": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_product", "model.dbt_warehouse.stg_oracle_neshu__product"], "model.dbt_warehouse.dim_oracle_neshu__company": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__company_has_location", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_company", "model.dbt_warehouse.stg_oracle_neshu__location"], "model.dbt_warehouse.int_yuman__workorder_pricing": ["model.dbt_warehouse.int_yuman__demands_workorders_enriched", "seed.dbt_warehouse.cp_metropole", "seed.dbt_warehouse.dpt_metropole", "seed.dbt_warehouse.machines_clean", "seed.dbt_warehouse.tarification_ref_clean", "seed.dbt_warehouse.type_inter_clean"], "model.dbt_warehouse.int_yuman__demands_workorders_enriched": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories", "model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__users", "model.dbt_warehouse.stg_yuman__workorder_demands", "model.dbt_warehouse.stg_yuman__workorder_demands_categories", "model.dbt_warehouse.stg_yuman__workorders", "seed.dbt_warehouse.tech_piece_agence_mapping"], "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__chargement_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__appro_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__commande_interne": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__reception_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__livraison_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__product", "seed.dbt_warehouse.valo_parc_machine"], "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_family", "model.dbt_warehouse.stg_oracle_neshu__label_has_task", "model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories", "model.dbt_warehouse.stg_yuman__sites"], "seed.dbt_warehouse.valo_parc_machine": [], "seed.dbt_warehouse.marque_clean": [], "seed.dbt_warehouse.tech_piece_agence_mapping": [], "seed.dbt_warehouse.cp_metropole": [], "seed.dbt_warehouse.cps_tech": [], "seed.dbt_warehouse.dpt_metropole": [], "seed.dbt_warehouse.machines_clean": [], "seed.dbt_warehouse.type_inter_clean": [], "seed.dbt_warehouse.techniciens_clean": [], "seed.dbt_warehouse.tarification_ref_clean": [], "test.dbt_warehouse.unique_stg_yuman__clients_client_id.f44f6dd39f": ["model.dbt_warehouse.stg_yuman__clients"], "test.dbt_warehouse.not_null_stg_yuman__clients_client_id.2396172faf": ["model.dbt_warehouse.stg_yuman__clients"], "test.dbt_warehouse.unique_stg_yuman__sites_site_id.c2fdd1abc3": ["model.dbt_warehouse.stg_yuman__sites"], "test.dbt_warehouse.not_null_stg_yuman__sites_site_id.7b80b04fc4": ["model.dbt_warehouse.stg_yuman__sites"], "test.dbt_warehouse.not_null_stg_yuman__sites_client_id.a2a87aa602": ["model.dbt_warehouse.stg_yuman__sites"], "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__sites"], "test.dbt_warehouse.unique_stg_yuman__materials_material_id.0de6595c40": ["model.dbt_warehouse.stg_yuman__materials"], "test.dbt_warehouse.not_null_stg_yuman__materials_material_id.ebfe5a9c25": ["model.dbt_warehouse.stg_yuman__materials"], "test.dbt_warehouse.not_null_stg_yuman__materials_site_id.e77c7f24c2": ["model.dbt_warehouse.stg_yuman__materials"], "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__sites"], "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__materials_categories"], "test.dbt_warehouse.unique_stg_yuman__products_product_id.da6f1079d3": ["model.dbt_warehouse.stg_yuman__products"], "test.dbt_warehouse.not_null_stg_yuman__products_product_id.4e68e010db": ["model.dbt_warehouse.stg_yuman__products"], "test.dbt_warehouse.unique_stg_yuman__users_user_id.e4b2c79cf4": ["model.dbt_warehouse.stg_yuman__users"], "test.dbt_warehouse.not_null_stg_yuman__users_user_id.9881abfe99": ["model.dbt_warehouse.stg_yuman__users"], "test.dbt_warehouse.unique_stg_yuman__workorder_demands_categories_demand_category_id.36d7a5e24e": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories"], "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_categories_demand_category_id.5e8aa9b42e": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories"], "test.dbt_warehouse.unique_stg_yuman__workorder_demands_demand_id.adbb788cb2": ["model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_demand_id.12776f5dd4": ["model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff": ["model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4": ["model.dbt_warehouse.stg_yuman__materials", "model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf": ["model.dbt_warehouse.stg_yuman__users", "model.dbt_warehouse.stg_yuman__workorder_demands"], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2": ["model.dbt_warehouse.stg_yuman__workorder_demands", "model.dbt_warehouse.stg_yuman__workorder_demands_categories"], "test.dbt_warehouse.unique_stg_yuman__workorders_workorder_id.38a2d26084": ["model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.not_null_stg_yuman__workorders_workorder_id.7745d31fcf": ["model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f": ["model.dbt_warehouse.stg_yuman__clients", "model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7": ["model.dbt_warehouse.stg_yuman__sites", "model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd": ["model.dbt_warehouse.stg_yuman__workorders", "model.dbt_warehouse.stg_yuman__workorders_categories"], "test.dbt_warehouse.not_null_stg_yuman__workorders_created_at.0aad14f863": ["model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.unique_stg_yuman__purchase_orders_purchase_order_line_id.6a52ee22dc": ["model.dbt_warehouse.stg_yuman__purchase_orders"], "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_line_id.d6eed878cf": ["model.dbt_warehouse.stg_yuman__purchase_orders"], "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_id.668459bb5c": ["model.dbt_warehouse.stg_yuman__purchase_orders"], "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020": ["model.dbt_warehouse.stg_yuman__products", "model.dbt_warehouse.stg_yuman__purchase_orders"], "test.dbt_warehouse.unique_stg_yuman__workorder_products_workorder_product_id.1591ef7ef7": ["model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_product_id.f12c8d1634": ["model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_id.a954e8ba15": ["model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f": ["model.dbt_warehouse.stg_yuman__workorder_products", "model.dbt_warehouse.stg_yuman__workorders"], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_id.92e35e7cb0": ["model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9": ["model.dbt_warehouse.stg_yuman__products", "model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_quantity.9f9bbee75c": ["model.dbt_warehouse.stg_yuman__workorder_products"], "test.dbt_warehouse.unique_stg_oracle_neshu__company_idcompany.f25c2833cc": ["model.dbt_warehouse.stg_oracle_neshu__company"], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_idcompany.a1f4fb5739": ["model.dbt_warehouse.stg_oracle_neshu__company"], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__company_type"], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation.a2b189f3f3": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location", "model.dbt_warehouse.stg_oracle_neshu__location"], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idcompany.ed01157bcd": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__company_has_location"], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation_type.9d6f83a35c": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location"], "test.dbt_warehouse.unique_stg_oracle_neshu__company_type_idcompany_type.d5392ad073": ["model.dbt_warehouse.stg_oracle_neshu__company_type"], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_type_idcompany_type.7432808513": ["model.dbt_warehouse.stg_oracle_neshu__company_type"], "test.dbt_warehouse.unique_stg_oracle_neshu__contact_idcontact.fc71eec394": ["model.dbt_warehouse.stg_oracle_neshu__contact"], "test.dbt_warehouse.not_null_stg_oracle_neshu__contact_idcontact.257cd1bcbe": ["model.dbt_warehouse.stg_oracle_neshu__contact"], "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__contact"], "test.dbt_warehouse.unique_stg_oracle_neshu__contract_idcontract.7b7904e17e": ["model.dbt_warehouse.stg_oracle_neshu__contract"], "test.dbt_warehouse.not_null_stg_oracle_neshu__contract_idcontract.fd3fe25c02": ["model.dbt_warehouse.stg_oracle_neshu__contract"], "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__contract"], "test.dbt_warehouse.unique_stg_oracle_neshu__device_iddevice.0ca29b8e9a": ["model.dbt_warehouse.stg_oracle_neshu__device"], "test.dbt_warehouse.not_null_stg_oracle_neshu__device_iddevice.27e0db8158": ["model.dbt_warehouse.stg_oracle_neshu__device"], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__location"], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__device"], "test.dbt_warehouse.unique_stg_oracle_neshu__label_idlabel.9ab3749a9c": ["model.dbt_warehouse.stg_oracle_neshu__label"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_idlabel.f0d32bb28d": ["model.dbt_warehouse.stg_oracle_neshu__label"], "test.dbt_warehouse.unique_stg_oracle_neshu__label_family_idlabel_family.bcaa4d9c71": ["model.dbt_warehouse.stg_oracle_neshu__label_family"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_family_idlabel_family.da97b662a1": ["model.dbt_warehouse.stg_oracle_neshu__label_family"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idlabel.1abe8b79c5": ["model.dbt_warehouse.stg_oracle_neshu__label_has_company"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_company"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idcompany.b2f23ed472": ["model.dbt_warehouse.stg_oracle_neshu__label_has_company"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__label_has_company"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idlabel.6c3946bf93": ["model.dbt_warehouse.stg_oracle_neshu__label_has_contract"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idcontract.dbb35a2666": ["model.dbt_warehouse.stg_oracle_neshu__label_has_contract"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a": ["model.dbt_warehouse.stg_oracle_neshu__contract", "model.dbt_warehouse.stg_oracle_neshu__label_has_contract"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_idlabel.2efbd34860": ["model.dbt_warehouse.stg_oracle_neshu__label_has_device"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_device"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_iddevice.c9592a7b37": ["model.dbt_warehouse.stg_oracle_neshu__label_has_device"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__label_has_device"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idlabel.c10c951091": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_product"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idproduct.48b2a5d583": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product", "model.dbt_warehouse.stg_oracle_neshu__product"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idlabel.03938ed9d6": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42": ["model.dbt_warehouse.stg_oracle_neshu__label", "model.dbt_warehouse.stg_oracle_neshu__label_has_resources"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idresources.c45dd6d64e": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "model.dbt_warehouse.stg_oracle_neshu__resources"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idlabel.231c8d8c24": ["model.dbt_warehouse.stg_oracle_neshu__label_has_task"], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idtask.dd0526ea2b": ["model.dbt_warehouse.stg_oracle_neshu__label_has_task"], "test.dbt_warehouse.unique_stg_oracle_neshu__location_idlocation.1903e54c83": ["model.dbt_warehouse.stg_oracle_neshu__location"], "test.dbt_warehouse.not_null_stg_oracle_neshu__location_idlocation.fc8389056b": ["model.dbt_warehouse.stg_oracle_neshu__location"], "test.dbt_warehouse.unique_stg_oracle_neshu__product_idproduct.ecd2622966": ["model.dbt_warehouse.stg_oracle_neshu__product"], "test.dbt_warehouse.not_null_stg_oracle_neshu__product_idproduct.2c91d8d9c3": ["model.dbt_warehouse.stg_oracle_neshu__product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0": ["model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__product_type"], "test.dbt_warehouse.unique_stg_oracle_neshu__product_type_idproduct_type.9bdaa55835": ["model.dbt_warehouse.stg_oracle_neshu__product_type"], "test.dbt_warehouse.not_null_stg_oracle_neshu__product_type_idproduct_type.99ebe48fd1": ["model.dbt_warehouse.stg_oracle_neshu__product_type"], "test.dbt_warehouse.unique_stg_oracle_neshu__resources_idresources.20bf66b8cb": ["model.dbt_warehouse.stg_oracle_neshu__resources"], "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_idresources.eb8d9bd2ca": ["model.dbt_warehouse.stg_oracle_neshu__resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c": ["model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__resources_type"], "test.dbt_warehouse.unique_stg_oracle_neshu__resources_type_idresources_type.60d0042392": ["model.dbt_warehouse.stg_oracle_neshu__resources_type"], "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_type_idresources_type.9e5d062342": ["model.dbt_warehouse.stg_oracle_neshu__resources_type"], "test.dbt_warehouse.unique_stg_oracle_neshu__task_idtask.d1f0e7ba99": ["model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_idtask.2b9ac7a02d": ["model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_type"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_status"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f": ["model.dbt_warehouse.stg_oracle_neshu__device", "model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6": ["model.dbt_warehouse.stg_oracle_neshu__contact", "model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759": ["model.dbt_warehouse.stg_oracle_neshu__location", "model.dbt_warehouse.stg_oracle_neshu__task"], "test.dbt_warehouse.unique_stg_oracle_neshu__task_has_product_idtask_has_product.3f7428b52a": ["model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_product_idtask_has_product.d3f98a1a05": ["model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578": ["model.dbt_warehouse.stg_oracle_neshu__product", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509": ["model.dbt_warehouse.stg_oracle_neshu__company", "model.dbt_warehouse.stg_oracle_neshu__task_has_product"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idtask.c853c7eb7b": ["model.dbt_warehouse.stg_oracle_neshu__task_has_resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f": ["model.dbt_warehouse.stg_oracle_neshu__task", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idresources.5afdfd82d8": ["model.dbt_warehouse.stg_oracle_neshu__task_has_resources"], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb": ["model.dbt_warehouse.stg_oracle_neshu__resources", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources"], "test.dbt_warehouse.unique_stg_oracle_neshu__task_status_idtask_status.6822490986": ["model.dbt_warehouse.stg_oracle_neshu__task_status"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_status_idtask_status.fb3f3fc34e": ["model.dbt_warehouse.stg_oracle_neshu__task_status"], "test.dbt_warehouse.unique_stg_oracle_neshu__task_type_idtask_type.6a67987299": ["model.dbt_warehouse.stg_oracle_neshu__task_type"], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_type_idtask_type.30b55370e2": ["model.dbt_warehouse.stg_oracle_neshu__task_type"], "test.dbt_warehouse.unique_dim_yuman__clients_client_id.12116495a3": ["model.dbt_warehouse.dim_yuman__clients"], "test.dbt_warehouse.not_null_dim_yuman__clients_client_id.bb975d2fa4": ["model.dbt_warehouse.dim_yuman__clients"], "test.dbt_warehouse.unique_dim_yuman__sites_site_id.97c9826437": ["model.dbt_warehouse.dim_yuman__sites"], "test.dbt_warehouse.not_null_dim_yuman__sites_site_id.d284592881": ["model.dbt_warehouse.dim_yuman__sites"], "test.dbt_warehouse.not_null_dim_yuman__sites_client_id.cd8fb92b93": ["model.dbt_warehouse.dim_yuman__sites"], "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42": ["model.dbt_warehouse.dim_yuman__clients", "model.dbt_warehouse.dim_yuman__sites"], "test.dbt_warehouse.unique_dim_yuman__materials_material_id.a2c990b4a9": ["model.dbt_warehouse.dim_yuman__materials"], "test.dbt_warehouse.not_null_dim_yuman__materials_material_id.8e2898dbe5": ["model.dbt_warehouse.dim_yuman__materials"], "test.dbt_warehouse.not_null_dim_yuman__materials_site_id.614d463e6e": ["model.dbt_warehouse.dim_yuman__materials"], "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87": ["model.dbt_warehouse.dim_yuman__materials", "model.dbt_warehouse.dim_yuman__sites"], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_material_id.65161533d1": ["model.dbt_warehouse.dim_yuman__materials_clients"], "test.dbt_warehouse.unique_dim_yuman__materials_clients_material_id.3293b73ed8": ["model.dbt_warehouse.dim_yuman__materials_clients"], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_client_id.307466ae21": ["model.dbt_warehouse.dim_yuman__materials_clients"], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_site_id.00254a1aa0": ["model.dbt_warehouse.dim_yuman__materials_clients"], "test.dbt_warehouse.not_null_dim_oracle_neshu__company_company_id.2286b3d824": ["model.dbt_warehouse.dim_oracle_neshu__company"], "test.dbt_warehouse.unique_dim_oracle_neshu__company_company_id.d6aabe0e95": ["model.dbt_warehouse.dim_oracle_neshu__company"], "test.dbt_warehouse.not_null_dim_oracle_neshu__product_product_id.d69a3b14d1": ["model.dbt_warehouse.dim_oracle_neshu__product"], "test.dbt_warehouse.unique_dim_oracle_neshu__product_product_id.ba747134a3": ["model.dbt_warehouse.dim_oracle_neshu__product"], "test.dbt_warehouse.not_null_dim_oracle_neshu__device_device_id.51db00e9ef": ["model.dbt_warehouse.dim_oracle_neshu__device"], "test.dbt_warehouse.unique_dim_oracle_neshu__device_device_id.cbb3e59fc9": ["model.dbt_warehouse.dim_oracle_neshu__device"], "test.dbt_warehouse.not_null_dim_oracle_neshu__device_company_id.e17a3c2fb4": ["model.dbt_warehouse.dim_oracle_neshu__device"], "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_id.ce47b5568c": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_id.8da405d6c4": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a": ["model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_code.5a6eede86e": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_name.6beef2cb38": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_name.08b08915c7": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_type.e47220660c": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES.09a104a84b": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_consumption_date.a8716670d9": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_.5aa992f77c": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_data_source.af5248f6f7": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON.5ec7a388a7": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_quantity.b59694399a": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.15c85805ca": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id.50b356c305": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.unique_consumption_record.1740417b5a": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.device_id_required_except_livraison.acb84a4429": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_id.b47f804afa": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.unique_fct_oracle_neshu__pa_business_review_task_id.e6a4a507a2": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_code.4dd651bc02": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_info.8eeabe00a1": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_id.cb546c4a7e": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_info.08be705635": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_start_date.8dceb0b3e4": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_status_code.b0aa10d1d0": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_faite.4c914d3f47": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_prevue.79cb0b2a32": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review"], "test.dbt_warehouse.unique_dim_oracle_neshu__contract_contract_id.2498b48ad2": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_contract_id.28d4af45b3": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_is_active.9600c93d58": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_created_at.5dc61f7cd8": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_updated_at.f826ba71d3": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id.73a6310d39": ["model.dbt_warehouse.dim_oracle_neshu__contract"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id.980098d686": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.unique_fct_oracle_neshu__machines_maintenance_tracking_device_id.259a568a16": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code.21e30b32f5": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name.27263a7181": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code.0cdf0f5a6b": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name.3bf8fed65d": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date.2fb83a6c11": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol.1a01596ee3": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai.90bc56ccbd": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive.00eb8f212a": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune.ac417d2f59": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter.169cfdb158": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune.808c90cc4e": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking"], "test.dbt_warehouse.unique_int_oracle_neshu__telemetry_tasks_task_product_id.4d229c656f": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_product_id.3c6e38ed4d": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_id.2a5854e826": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_product_id.04e1d8477d": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_start_date.66646fa50e": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_updated_at.8d8d17e88a": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_created_at.ef85effe50": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_extracted_at.5c3a5f7ac5": ["model.dbt_warehouse.int_oracle_neshu__telemetry_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__chargement_tasks_task_product_id.f02aff9a5d": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_product_id.22016f77c7": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_id.dbf995a952": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_product_id.97e92b8f9e": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_start_date.18b12689c3": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_updated_at.cfb1806175": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_created_at.099654dbc5": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_extracted_at.7247f9f7e5": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__livraison_tasks_task_product_id.011a4e9629": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_product_id.e3b9b08f8d": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_id.aed5d7619e": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_product_id.8522aad15d": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_start_date.341a694abf": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_updated_at.4ae155633f": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_created_at.d2d3de44aa": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_extracted_at.175de36255": ["model.dbt_warehouse.int_oracle_neshu__livraison_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__inventaire_tasks_task_product_id.6de7c4abb7": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_product_id.40c0d72097": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_id.12d8825475": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_product_id.315d649f9b": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_start_date.6ab0a21e68": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_updated_at.ed499f687b": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_created_at.e03cda86f7": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_extracted_at.ce6508aabf": ["model.dbt_warehouse.int_oracle_neshu__inventaire_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.0895448e86": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.e6945505d5": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.a45f2ce08b": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.7f8ffacb68": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date.6192042d8e": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.a93b91f4db": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.7d0fcea0cf": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.3521403fea": ["model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__reception_tasks_task_product_id.bf4c38de57": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_product_id.af91258a78": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_id.73ba57ad4f": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_product_id.aa8ad941b0": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_start_date.eb50f49146": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_updated_at.2d211b0f61": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_created_at.8083bcc7e8": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_extracted_at.ec88db7302": ["model.dbt_warehouse.int_oracle_neshu__reception_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__livraison_interne_tasks_task_product_id.cca996b12e": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id.4515c1033a": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_id.3d326d6d80": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_product_id.84345d9252": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date.a2d90a847c": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.40f144213d": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_created_at.c6d4b559be": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.931738aaac": ["model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__appro_tasks_task_id.27c5ab3d17": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_id.afbab212ea": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_start_date.8e28b8d3b2": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_updated_at.297f723da2": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_created_at.2224651e8c": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_extracted_at.11b43558e3": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks"], "test.dbt_warehouse.unique_int_oracle_neshu__inter_techinique_tasks_task_id.e6fbe5979b": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_id.2ab30c87a3": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_device_id.a4926002cf": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_company_id.963bf0b41a": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date.4d976b328e": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.75a6fbc88b": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_created_at.23cf274781": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.ebb7615afa": ["model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks"], "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id.eb5ccd792d": ["model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base"], "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code.a8d1d80e51": ["model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base"], "test.dbt_warehouse.unique_int_oracle_neshu__commande_interne_task_product_id.b43ba28698": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_product_id.acafb99a38": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_id.feb7a19392": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_product_id.422706e73d": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_source_code.806024b65d": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_destination_code.60865e1142": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_start_date.863ef2a87e": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_updated_at.bfec986bee": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_created_at.49335f4f3a": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_extracted_at.9d5f1d0c81": ["model.dbt_warehouse.int_oracle_neshu__commande_interne"], "test.dbt_warehouse.not_null_cp_metropole_Code_Postal.a098167f83": ["seed.dbt_warehouse.cp_metropole"], "test.dbt_warehouse.not_null_dpt_metropole_Departement.2478f9c919": ["seed.dbt_warehouse.dpt_metropole"], "test.dbt_warehouse.not_null_machines_clean_Machine_Brut.9276e8a97e": ["seed.dbt_warehouse.machines_clean"], "test.dbt_warehouse.not_null_techniciens_clean_TECHNICIEN.5de96efc7e": ["seed.dbt_warehouse.techniciens_clean"], "test.dbt_warehouse.not_null_techniciens_clean_EQUIPE.722aa9e22a": ["seed.dbt_warehouse.techniciens_clean"], "test.dbt_warehouse.not_null_tarification_ref_clean_KEY.967dd5c502": ["seed.dbt_warehouse.tarification_ref_clean"], "test.dbt_warehouse.not_null_tarification_ref_clean_Montant.a0344161c1": ["seed.dbt_warehouse.tarification_ref_clean"], "test.dbt_warehouse.not_null_cps_tech_cp_depart_int.0f6e103b70": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.unique_cps_tech_cp_depart_int.cbed7e63d9": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_cp_depart_texte.26dec0b408": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.unique_cps_tech_cp_depart_texte.eef859cc87": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_cp_final_int.c6665bc5a0": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_cp_final_texte.6d08af0e28": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_libelle_cp.08a4b5acae": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_num_departement_texte.11ca48fdf7": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_nom_departement.37af19b1e1": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_cps_tech_region_tech.9237701bce": ["seed.dbt_warehouse.cps_tech"], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_nom.bf00f207d7": ["seed.dbt_warehouse.tech_piece_agence_mapping"], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_prenom.4042de33dc": ["seed.dbt_warehouse.tech_piece_agence_mapping"], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_agence.bdf757feb6": ["seed.dbt_warehouse.tech_piece_agence_mapping"], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_equipe.1e972b6e33": ["seed.dbt_warehouse.tech_piece_agence_mapping"], "test.dbt_warehouse.dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne.d6b0f7b301": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"], "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.ce4c2c11f4": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"], "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.7d3e1176b7": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturea"], "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturec_ec_no.6925cf7be5": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturec"], "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.714fd67ceb": ["source.dbt_warehouse.mssql_sage.dbo_f_ecriturec"], "test.dbt_warehouse.source_unique_yuman_api_yuman_clients_id.ac9ad6b2fc": ["source.dbt_warehouse.yuman_api.yuman_clients"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_clients_id.94442bf14b": ["source.dbt_warehouse.yuman_api.yuman_clients"], "test.dbt_warehouse.source_unique_yuman_api_yuman_sites_id.c7e2661f2f": ["source.dbt_warehouse.yuman_api.yuman_sites"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_id.cc7391839c": ["source.dbt_warehouse.yuman_api.yuman_sites"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_client_id.6e84614dea": ["source.dbt_warehouse.yuman_api.yuman_sites"], "test.dbt_warehouse.source_unique_yuman_api_yuman_materials_id.627fc0bbcf": ["source.dbt_warehouse.yuman_api.yuman_materials"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_id.ef8e1020be": ["source.dbt_warehouse.yuman_api.yuman_materials"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_site_id.f462c1646e": ["source.dbt_warehouse.yuman_api.yuman_materials"], "test.dbt_warehouse.source_unique_yuman_api_yuman_material_categories_id.8e8a025d0a": ["source.dbt_warehouse.yuman_api.yuman_material_categories"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_material_categories_id.4ef54c952f": ["source.dbt_warehouse.yuman_api.yuman_material_categories"], "test.dbt_warehouse.source_unique_yuman_api_yuman_products_id.0797f24444": ["source.dbt_warehouse.yuman_api.yuman_products"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_products_id.9d76ec0f24": ["source.dbt_warehouse.yuman_api.yuman_products"], "test.dbt_warehouse.source_unique_yuman_api_yuman_users_id.9323495945": ["source.dbt_warehouse.yuman_api.yuman_users"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_users_id.d5dd93c383": ["source.dbt_warehouse.yuman_api.yuman_users"], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_categories_id.d7d762a90b": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_categories_id.a8a4d3d9e4": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories"], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_id.61272d2b5b": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_id.2951fa446c": ["source.dbt_warehouse.yuman_api.yuman_workorder_demands"], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorders_id.cf3a021d13": ["source.dbt_warehouse.yuman_api.yuman_workorders"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorders_id.e6c047d2a1": ["source.dbt_warehouse.yuman_api.yuman_workorders"], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_categories_id.ae2a36c8ed": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_categories_id.481d28172c": ["source.dbt_warehouse.yuman_api.yuman_workorder_categories"], "test.dbt_warehouse.source_unique_yuman_api_yuman_purchase_orders_id.1a3a583089": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"], "test.dbt_warehouse.source_not_null_yuman_api_yuman_purchase_orders_id.3eb709d1c8": ["source.dbt_warehouse.yuman_api.yuman_purchase_orders"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_idcompany.6df2f6792e": ["source.dbt_warehouse.oracle_neshu.evs_company"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_idcompany.c223201709": ["source.dbt_warehouse.oracle_neshu.evs_company"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idcompany.d2e7a813ca": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation.e1aaef8e8b": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation_type.b7ffe23a12": ["source.dbt_warehouse.oracle_neshu.evs_company_has_location"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_type_idcompany_type.56f35aae37": ["source.dbt_warehouse.oracle_neshu.evs_company_type"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_type_idcompany_type.11fcffba5d": ["source.dbt_warehouse.oracle_neshu.evs_company_type"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contact_idcontact.d870dc347d": ["source.dbt_warehouse.oracle_neshu.evs_contact"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contact_idcontact.d426a1c13e": ["source.dbt_warehouse.oracle_neshu.evs_contact"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_idcontract.00683b26ea": ["source.dbt_warehouse.oracle_neshu.evs_contract"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_idcontract.f730c61b9d": ["source.dbt_warehouse.oracle_neshu.evs_contract"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_parsed_idcontract.88000e1326": ["source.dbt_warehouse.oracle_neshu.evs_contract_parsed"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_parsed_idcontract.34a4825dee": ["source.dbt_warehouse.oracle_neshu.evs_contract_parsed"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_device_iddevice.397252bea8": ["source.dbt_warehouse.oracle_neshu.evs_device"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_device_iddevice.d62f2bee11": ["source.dbt_warehouse.oracle_neshu.evs_device"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_idlabel.f4f4d52728": ["source.dbt_warehouse.oracle_neshu.evs_label"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_idlabel.725504fd88": ["source.dbt_warehouse.oracle_neshu.evs_label"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_family_idlabel_family.52acfecf7e": ["source.dbt_warehouse.oracle_neshu.evs_label_family"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_family_idlabel_family.76e2fc3d22": ["source.dbt_warehouse.oracle_neshu.evs_label_family"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idlabel.84c84e0808": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idcompany.9fb5a691bb": ["source.dbt_warehouse.oracle_neshu.evs_label_has_company"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idlabel.1500ee3c29": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idcontract.34f534407d": ["source.dbt_warehouse.oracle_neshu.evs_label_has_contract"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_idlabel.7913e12518": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_iddevice.67fa8a09c3": ["source.dbt_warehouse.oracle_neshu.evs_label_has_device"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idlabel.5191f399c0": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idproduct.6048527bb0": ["source.dbt_warehouse.oracle_neshu.evs_label_has_product"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idlabel.eabdfa7bbf": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idresources.701adf32da": ["source.dbt_warehouse.oracle_neshu.evs_label_has_resources"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idlabel.9722fba510": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idtask.407d48dbcb": ["source.dbt_warehouse.oracle_neshu.evs_label_has_task"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_location_idlocation.e07de44c8b": ["source.dbt_warehouse.oracle_neshu.evs_location"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_location_idlocation.252e77f735": ["source.dbt_warehouse.oracle_neshu.evs_location"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_idproduct.56c841c209": ["source.dbt_warehouse.oracle_neshu.evs_product"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_idproduct.0e5cc2ab70": ["source.dbt_warehouse.oracle_neshu.evs_product"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_type_idproduct_type.f77e407933": ["source.dbt_warehouse.oracle_neshu.evs_product_type"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_type_idproduct_type.2e7c2d534c": ["source.dbt_warehouse.oracle_neshu.evs_product_type"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_idresources.65588abfd8": ["source.dbt_warehouse.oracle_neshu.evs_resources"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_idresources.04add56fa5": ["source.dbt_warehouse.oracle_neshu.evs_resources"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_type_idresources_type.94e4b1617f": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_type_idresources_type.c0ade33349": ["source.dbt_warehouse.oracle_neshu.evs_resources_type"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_idtask.e261c356e9": ["source.dbt_warehouse.oracle_neshu.evs_task"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_idtask.d1aa0b27a5": ["source.dbt_warehouse.oracle_neshu.evs_task"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_has_product_idtask_has_product.b9af110684": ["source.dbt_warehouse.oracle_neshu.evs_task_has_product"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product.52f463d476": ["source.dbt_warehouse.oracle_neshu.evs_task_has_product"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idtask.3c6bbcc3c8": ["source.dbt_warehouse.oracle_neshu.evs_task_has_resources"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idresources.6896d0d7f1": ["source.dbt_warehouse.oracle_neshu.evs_task_has_resources"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_status_idtask_status.b176cc0c5b": ["source.dbt_warehouse.oracle_neshu.evs_task_status"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_status_idtask_status.2b475b6b56": ["source.dbt_warehouse.oracle_neshu.evs_task_status"], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_type_idtask_type.3b8b3b9ff6": ["source.dbt_warehouse.oracle_neshu.evs_task_type"], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_type_idtask_type.d7f9ba800f": ["source.dbt_warehouse.oracle_neshu.evs_task_type"], "source.dbt_warehouse.mssql_sage.dbo_f_ecriturea": [], "source.dbt_warehouse.mssql_sage.dbo_f_ecriturec": [], "source.dbt_warehouse.yuman_api.yuman_clients": [], "source.dbt_warehouse.yuman_api.yuman_sites": [], "source.dbt_warehouse.yuman_api.yuman_materials": [], "source.dbt_warehouse.yuman_api.yuman_material_categories": [], "source.dbt_warehouse.yuman_api.yuman_products": [], "source.dbt_warehouse.yuman_api.yuman_users": [], "source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories": [], "source.dbt_warehouse.yuman_api.yuman_workorder_demands": [], "source.dbt_warehouse.yuman_api.yuman_workorders": [], "source.dbt_warehouse.yuman_api.yuman_workorder_categories": [], "source.dbt_warehouse.yuman_api.yuman_purchase_orders": [], "source.dbt_warehouse.oracle_neshu.evs_company": [], "source.dbt_warehouse.oracle_neshu.evs_company_has_location": [], "source.dbt_warehouse.oracle_neshu.evs_company_type": [], "source.dbt_warehouse.oracle_neshu.evs_contact": [], "source.dbt_warehouse.oracle_neshu.evs_contract": [], "source.dbt_warehouse.oracle_neshu.evs_contract_parsed": [], "source.dbt_warehouse.oracle_neshu.evs_device": [], "source.dbt_warehouse.oracle_neshu.evs_label": [], "source.dbt_warehouse.oracle_neshu.evs_label_family": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_company": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_contract": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_device": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_product": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_resources": [], "source.dbt_warehouse.oracle_neshu.evs_label_has_task": [], "source.dbt_warehouse.oracle_neshu.evs_location": [], "source.dbt_warehouse.oracle_neshu.evs_product": [], "source.dbt_warehouse.oracle_neshu.evs_product_type": [], "source.dbt_warehouse.oracle_neshu.evs_resources": [], "source.dbt_warehouse.oracle_neshu.evs_resources_type": [], "source.dbt_warehouse.oracle_neshu.evs_task": [], "source.dbt_warehouse.oracle_neshu.evs_task_has_product": [], "source.dbt_warehouse.oracle_neshu.evs_task_has_resources": [], "source.dbt_warehouse.oracle_neshu.evs_task_status": [], "source.dbt_warehouse.oracle_neshu.evs_task_type": []}, "child_map": {"model.dbt_warehouse.stg_yuman__workorder_products": ["test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_id.92e35e7cb0", "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_quantity.9f9bbee75c", "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_id.a954e8ba15", "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_product_id.f12c8d1634", "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9", "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f", "test.dbt_warehouse.unique_stg_yuman__workorder_products_workorder_product_id.1591ef7ef7"], "model.dbt_warehouse.stg_yuman__users": ["model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__users_user_id.9881abfe99", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf", "test.dbt_warehouse.unique_stg_yuman__users_user_id.e4b2c79cf4"], "model.dbt_warehouse.stg_yuman__workorders": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__workorders_created_at.0aad14f863", "test.dbt_warehouse.not_null_stg_yuman__workorders_workorder_id.7745d31fcf", "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f", "test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd", "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f", "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7", "test.dbt_warehouse.unique_stg_yuman__workorders_workorder_id.38a2d26084"], "model.dbt_warehouse.stg_yuman__sites": ["model.dbt_warehouse.dim_yuman__materials_clients", "model.dbt_warehouse.dim_yuman__sites", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__sites_client_id.a2a87aa602", "test.dbt_warehouse.not_null_stg_yuman__sites_site_id.7b80b04fc4", "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183", "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff", "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7", "test.dbt_warehouse.unique_stg_yuman__sites_site_id.c2fdd1abc3"], "model.dbt_warehouse.stg_yuman__workorder_demands": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_demand_id.12776f5dd4", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf", "test.dbt_warehouse.unique_stg_yuman__workorder_demands_demand_id.adbb788cb2"], "model.dbt_warehouse.stg_yuman__materials_categories": ["model.dbt_warehouse.dim_yuman__materials", "model.dbt_warehouse.dim_yuman__materials_clients", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f"], "model.dbt_warehouse.stg_yuman__products": ["test.dbt_warehouse.not_null_stg_yuman__products_product_id.4e68e010db", "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020", "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9", "test.dbt_warehouse.unique_stg_yuman__products_product_id.da6f1079d3"], "model.dbt_warehouse.stg_yuman__materials": ["model.dbt_warehouse.dim_yuman__materials", "model.dbt_warehouse.dim_yuman__materials_clients", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__materials_material_id.ebfe5a9c25", "test.dbt_warehouse.not_null_stg_yuman__materials_site_id.e77c7f24c2", "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f", "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4", "test.dbt_warehouse.unique_stg_yuman__materials_material_id.0de6595c40"], "model.dbt_warehouse.stg_yuman__purchase_orders": ["test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_id.668459bb5c", "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_line_id.d6eed878cf", "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020", "test.dbt_warehouse.unique_stg_yuman__purchase_orders_purchase_order_line_id.6a52ee22dc"], "model.dbt_warehouse.stg_yuman__workorder_demands_categories": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_categories_demand_category_id.5e8aa9b42e", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2", "test.dbt_warehouse.unique_stg_yuman__workorder_demands_categories_demand_category_id.36d7a5e24e"], "model.dbt_warehouse.stg_yuman__clients": ["model.dbt_warehouse.dim_yuman__clients", "model.dbt_warehouse.dim_yuman__materials_clients", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_stg_yuman__clients_client_id.2396172faf", "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3", "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd", "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f", "test.dbt_warehouse.unique_stg_yuman__clients_client_id.f44f6dd39f"], "model.dbt_warehouse.stg_yuman__workorders_categories": ["test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd"], "model.dbt_warehouse.stg_oracle_neshu__product_type": ["test.dbt_warehouse.not_null_stg_oracle_neshu__product_type_idproduct_type.99ebe48fd1", "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0", "test.dbt_warehouse.unique_stg_oracle_neshu__product_type_idproduct_type.9bdaa55835"], "model.dbt_warehouse.stg_oracle_neshu__task": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "model.dbt_warehouse.stg_oracle_neshu__task_has_product", "model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test.dbt_warehouse.not_null_stg_oracle_neshu__task_idtask.2b9ac7a02d", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e", "test.dbt_warehouse.unique_stg_oracle_neshu__task_idtask.d1f0e7ba99"], "model.dbt_warehouse.stg_oracle_neshu__contact": ["test.dbt_warehouse.not_null_stg_oracle_neshu__contact_idcontact.257cd1bcbe", "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6", "test.dbt_warehouse.unique_stg_oracle_neshu__contact_idcontact.fc71eec394"], "model.dbt_warehouse.stg_oracle_neshu__task_has_resources": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idresources.5afdfd82d8", "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idtask.c853c7eb7b", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f"], "model.dbt_warehouse.stg_oracle_neshu__label_has_contract": ["model.dbt_warehouse.dim_oracle_neshu__contract", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idcontract.dbb35a2666", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idlabel.6c3946bf93", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364"], "model.dbt_warehouse.stg_oracle_neshu__task_has_product": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_product_idtask_has_product.d3f98a1a05", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4", "test.dbt_warehouse.unique_stg_oracle_neshu__task_has_product_idtask_has_product.3f7428b52a"], "model.dbt_warehouse.stg_oracle_neshu__label_has_company": ["model.dbt_warehouse.dim_oracle_neshu__company", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idcompany.b2f23ed472", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idlabel.1abe8b79c5", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89"], "model.dbt_warehouse.stg_oracle_neshu__label_family": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__contract", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_family_idlabel_family.da97b662a1", "test.dbt_warehouse.unique_stg_oracle_neshu__label_family_idlabel_family.bcaa4d9c71"], "model.dbt_warehouse.stg_oracle_neshu__label_has_task": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idlabel.231c8d8c24", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idtask.dd0526ea2b"], "model.dbt_warehouse.stg_oracle_neshu__company": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine", "test.dbt_warehouse.not_null_stg_oracle_neshu__company_idcompany.a1f4fb5739", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c", "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee", "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5", "test.dbt_warehouse.unique_stg_oracle_neshu__company_idcompany.f25c2833cc"], "model.dbt_warehouse.stg_oracle_neshu__label_has_device": ["model.dbt_warehouse.dim_oracle_neshu__device", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_iddevice.c9592a7b37", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_idlabel.2efbd34860", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84"], "model.dbt_warehouse.stg_oracle_neshu__label": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__contract", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_idlabel.f0d32bb28d", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42", "test.dbt_warehouse.unique_stg_oracle_neshu__label_idlabel.9ab3749a9c"], "model.dbt_warehouse.stg_oracle_neshu__task_status": ["model.dbt_warehouse.int_oracle_neshu__appro_tasks", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__task_status_idtask_status.fb3f3fc34e", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d", "test.dbt_warehouse.unique_stg_oracle_neshu__task_status_idtask_status.6822490986"], "model.dbt_warehouse.stg_oracle_neshu__device": ["model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine", "test.dbt_warehouse.not_null_stg_oracle_neshu__device_iddevice.27e0db8158", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f", "test.dbt_warehouse.unique_stg_oracle_neshu__device_iddevice.0ca29b8e9a"], "model.dbt_warehouse.stg_oracle_neshu__label_has_product": ["model.dbt_warehouse.dim_oracle_neshu__product", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idlabel.c10c951091", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idproduct.48b2a5d583", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c"], "model.dbt_warehouse.stg_oracle_neshu__company_has_location": ["model.dbt_warehouse.dim_oracle_neshu__company", "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idcompany.ed01157bcd", "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation.a2b189f3f3", "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation_type.9d6f83a35c", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e"], "model.dbt_warehouse.stg_oracle_neshu__label_has_resources": ["test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idlabel.03938ed9d6", "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idresources.c45dd6d64e", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad"], "model.dbt_warehouse.stg_oracle_neshu__location": ["model.dbt_warehouse.dim_oracle_neshu__company", "model.dbt_warehouse.dim_oracle_neshu__device", "model.dbt_warehouse.int_oracle_neshu__appro_tasks", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks", "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine", "test.dbt_warehouse.not_null_stg_oracle_neshu__location_idlocation.fc8389056b", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e", "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759", "test.dbt_warehouse.unique_stg_oracle_neshu__location_idlocation.1903e54c83"], "model.dbt_warehouse.stg_oracle_neshu__contract": ["model.dbt_warehouse.dim_oracle_neshu__contract", "test.dbt_warehouse.not_null_stg_oracle_neshu__contract_idcontract.fd3fe25c02", "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a", "test.dbt_warehouse.unique_stg_oracle_neshu__contract_idcontract.7b7904e17e"], "model.dbt_warehouse.stg_oracle_neshu__product": ["model.dbt_warehouse.dim_oracle_neshu__product", "model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_tasks", "model.dbt_warehouse.int_oracle_neshu__reception_tasks", "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine", "test.dbt_warehouse.not_null_stg_oracle_neshu__product_idproduct.2c91d8d9c3", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c", "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578", "test.dbt_warehouse.unique_stg_oracle_neshu__product_idproduct.ecd2622966"], "model.dbt_warehouse.stg_oracle_neshu__task_type": ["test.dbt_warehouse.not_null_stg_oracle_neshu__task_type_idtask_type.30b55370e2", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e", "test.dbt_warehouse.unique_stg_oracle_neshu__task_type_idtask_type.6a67987299"], "model.dbt_warehouse.stg_oracle_neshu__resources_type": ["test.dbt_warehouse.not_null_stg_oracle_neshu__resources_type_idresources_type.9e5d062342", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c", "test.dbt_warehouse.unique_stg_oracle_neshu__resources_type_idresources_type.60d0042392"], "model.dbt_warehouse.stg_oracle_neshu__resources": ["model.dbt_warehouse.int_oracle_neshu__chargement_tasks", "model.dbt_warehouse.int_oracle_neshu__commande_interne", "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks", "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks", "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_idresources.eb8d9bd2ca", "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9", "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c", "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb", "test.dbt_warehouse.unique_stg_oracle_neshu__resources_idresources.20bf66b8cb"], "model.dbt_warehouse.stg_oracle_neshu__company_type": ["test.dbt_warehouse.not_null_stg_oracle_neshu__company_type_idcompany_type.7432808513", "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c", "test.dbt_warehouse.unique_stg_oracle_neshu__company_type_idcompany_type.d5392ad073"], "model.dbt_warehouse.dim_yuman__clients": ["test.dbt_warehouse.not_null_dim_yuman__clients_client_id.bb975d2fa4", "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42", "test.dbt_warehouse.unique_dim_yuman__clients_client_id.12116495a3"], "model.dbt_warehouse.dim_yuman__materials_clients": ["test.dbt_warehouse.not_null_dim_yuman__materials_clients_client_id.307466ae21", "test.dbt_warehouse.not_null_dim_yuman__materials_clients_material_id.65161533d1", "test.dbt_warehouse.not_null_dim_yuman__materials_clients_site_id.00254a1aa0", "test.dbt_warehouse.unique_dim_yuman__materials_clients_material_id.3293b73ed8"], "model.dbt_warehouse.dim_yuman__sites": ["test.dbt_warehouse.not_null_dim_yuman__sites_client_id.cd8fb92b93", "test.dbt_warehouse.not_null_dim_yuman__sites_site_id.d284592881", "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87", "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42", "test.dbt_warehouse.unique_dim_yuman__sites_site_id.97c9826437"], "model.dbt_warehouse.dim_yuman__materials": ["test.dbt_warehouse.not_null_dim_yuman__materials_material_id.8e2898dbe5", "test.dbt_warehouse.not_null_dim_yuman__materials_site_id.614d463e6e", "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87", "test.dbt_warehouse.unique_dim_yuman__materials_material_id.a2c990b4a9"], "model.dbt_warehouse.dim_oracle_neshu__device": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base", "test.dbt_warehouse.not_null_dim_oracle_neshu__device_company_id.e17a3c2fb4", "test.dbt_warehouse.not_null_dim_oracle_neshu__device_device_id.51db00e9ef", "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85", "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600", "test.dbt_warehouse.unique_dim_oracle_neshu__device_device_id.cbb3e59fc9"], "model.dbt_warehouse.fct_oracle_neshu__conso_business_review": ["test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON.5ec7a388a7", "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES.09a104a84b", "test.dbt_warehouse.dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_.5aa992f77c", "test.dbt_warehouse.device_id_required_except_livraison.acb84a4429", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_code.5a6eede86e", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_id.ce47b5568c", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_name.6beef2cb38", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_consumption_date.a8716670d9", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_data_source.af5248f6f7", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id.50b356c305", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.15c85805ca", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_id.8da405d6c4", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_name.08b08915c7", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_type.e47220660c", "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_quantity.b59694399a", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a", "test.dbt_warehouse.unique_consumption_record.1740417b5a"], "model.dbt_warehouse.fct_oracle_neshu__pa_business_review": ["test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_code.4dd651bc02", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_info.8eeabe00a1", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_id.cb546c4a7e", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_info.08be705635", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_faite.4c914d3f47", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_prevue.79cb0b2a32", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_id.b47f804afa", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_start_date.8dceb0b3e4", "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_status_code.b0aa10d1d0", "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600", "test.dbt_warehouse.unique_fct_oracle_neshu__pa_business_review_task_id.e6a4a507a2"], "model.dbt_warehouse.dim_oracle_neshu__contract": ["test.dbt_warehouse.dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id.73a6310d39", "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_contract_id.28d4af45b3", "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_created_at.5dc61f7cd8", "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_is_active.9600c93d58", "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_updated_at.f826ba71d3", "test.dbt_warehouse.unique_dim_oracle_neshu__contract_contract_id.2498b48ad2"], "model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking": ["test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune.ac417d2f59", "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune.808c90cc4e", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code.0cdf0f5a6b", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name.3bf8fed65d", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code.21e30b32f5", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id.980098d686", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date.2fb83a6c11", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name.27263a7181", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol.1a01596ee3", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai.90bc56ccbd", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive.00eb8f212a", "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter.169cfdb158", "test.dbt_warehouse.unique_fct_oracle_neshu__machines_maintenance_tracking_device_id.259a568a16"], "model.dbt_warehouse.dim_oracle_neshu__product": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test.dbt_warehouse.not_null_dim_oracle_neshu__product_product_id.d69a3b14d1", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a", "test.dbt_warehouse.unique_dim_oracle_neshu__product_product_id.ba747134a3"], "model.dbt_warehouse.dim_oracle_neshu__company": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test.dbt_warehouse.not_null_dim_oracle_neshu__company_company_id.2286b3d824", "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b", "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac", "test.dbt_warehouse.unique_dim_oracle_neshu__company_company_id.d6aabe0e95"], "model.dbt_warehouse.int_yuman__workorder_pricing": [], "model.dbt_warehouse.int_yuman__demands_workorders_enriched": ["model.dbt_warehouse.int_yuman__workorder_pricing"], "model.dbt_warehouse.int_oracle_neshu__inventaire_tasks": ["test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_created_at.e03cda86f7", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_extracted_at.ce6508aabf", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_product_id.315d649f9b", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_id.12d8825475", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_product_id.40c0d72097", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_start_date.6ab0a21e68", "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_updated_at.ed499f687b", "test.dbt_warehouse.unique_int_oracle_neshu__inventaire_tasks_task_product_id.6de7c4abb7"], "model.dbt_warehouse.int_oracle_neshu__telemetry_tasks": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_created_at.ef85effe50", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_extracted_at.5c3a5f7ac5", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_product_id.04e1d8477d", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_id.2a5854e826", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_product_id.3c6e38ed4d", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_start_date.66646fa50e", "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_updated_at.8d8d17e88a", "test.dbt_warehouse.unique_int_oracle_neshu__telemetry_tasks_task_product_id.4d229c656f"], "model.dbt_warehouse.int_oracle_neshu__livraison_interne_tasks": ["test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_created_at.c6d4b559be", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.931738aaac", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_product_id.84345d9252", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_id.3d326d6d80", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id.4515c1033a", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date.a2d90a847c", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.40f144213d", "test.dbt_warehouse.unique_int_oracle_neshu__livraison_interne_tasks_task_product_id.cca996b12e"], "model.dbt_warehouse.int_oracle_neshu__chargement_tasks": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_created_at.099654dbc5", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_extracted_at.7247f9f7e5", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_product_id.97e92b8f9e", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_id.dbf995a952", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_product_id.22016f77c7", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_start_date.18b12689c3", "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_updated_at.cfb1806175", "test.dbt_warehouse.unique_int_oracle_neshu__chargement_tasks_task_product_id.f02aff9a5d"], "model.dbt_warehouse.int_oracle_neshu__appro_tasks": ["model.dbt_warehouse.fct_oracle_neshu__pa_business_review", "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_created_at.2224651e8c", "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_extracted_at.11b43558e3", "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_id.afbab212ea", "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_start_date.8e28b8d3b2", "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_updated_at.297f723da2", "test.dbt_warehouse.unique_int_oracle_neshu__appro_tasks_task_id.27c5ab3d17"], "model.dbt_warehouse.int_oracle_neshu__commande_interne": ["test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_created_at.49335f4f3a", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_destination_code.60865e1142", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_extracted_at.9d5f1d0c81", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_product_id.422706e73d", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_source_code.806024b65d", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_id.feb7a19392", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_product_id.acafb99a38", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_start_date.863ef2a87e", "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_updated_at.bfec986bee", "test.dbt_warehouse.unique_int_oracle_neshu__commande_interne_task_product_id.b43ba28698"], "model.dbt_warehouse.int_oracle_neshu__reception_tasks": ["test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_created_at.8083bcc7e8", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_extracted_at.ec88db7302", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_product_id.aa8ad941b0", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_id.73ba57ad4f", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_product_id.af91258a78", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_start_date.eb50f49146", "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_updated_at.2d211b0f61", "test.dbt_warehouse.unique_int_oracle_neshu__reception_tasks_task_product_id.bf4c38de57"], "model.dbt_warehouse.int_oracle_neshu__livraison_tasks": ["model.dbt_warehouse.fct_oracle_neshu__conso_business_review", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_created_at.d2d3de44aa", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_extracted_at.175de36255", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_product_id.8522aad15d", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_id.aed5d7619e", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_product_id.e3b9b08f8d", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_start_date.341a694abf", "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_updated_at.4ae155633f", "test.dbt_warehouse.unique_int_oracle_neshu__livraison_tasks_task_product_id.011a4e9629"], "model.dbt_warehouse.int_oracle_neshu__valo_parc_machine": [], "model.dbt_warehouse.int_oracle_neshu__ecart_inventaire_tasks": ["test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.7d0fcea0cf", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.3521403fea", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.7f8ffacb68", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.a45f2ce08b", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.e6945505d5", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date.6192042d8e", "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.a93b91f4db", "test.dbt_warehouse.unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.0895448e86"], "model.dbt_warehouse.int_oracle_neshu__inter_techinique_tasks": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_company_id.963bf0b41a", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_created_at.23cf274781", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_device_id.a4926002cf", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.ebb7615afa", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_id.2ab30c87a3", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date.4d976b328e", "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.75a6fbc88b", "test.dbt_warehouse.unique_int_oracle_neshu__inter_techinique_tasks_task_id.e6fbe5979b"], "model.dbt_warehouse.int_oracle_neshu__machines_yuman_maintenance_base": ["model.dbt_warehouse.fct_oracle_neshu__machines_maintenance_tracking", "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code.a8d1d80e51", "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id.eb5ccd792d"], "seed.dbt_warehouse.valo_parc_machine": ["model.dbt_warehouse.int_oracle_neshu__valo_parc_machine"], "seed.dbt_warehouse.marque_clean": [], "seed.dbt_warehouse.tech_piece_agence_mapping": ["model.dbt_warehouse.int_yuman__demands_workorders_enriched", "test.dbt_warehouse.not_null_tech_piece_agence_mapping_agence.bdf757feb6", "test.dbt_warehouse.not_null_tech_piece_agence_mapping_equipe.1e972b6e33", "test.dbt_warehouse.not_null_tech_piece_agence_mapping_nom.bf00f207d7", "test.dbt_warehouse.not_null_tech_piece_agence_mapping_prenom.4042de33dc"], "seed.dbt_warehouse.cp_metropole": ["model.dbt_warehouse.int_yuman__workorder_pricing", "test.dbt_warehouse.not_null_cp_metropole_Code_Postal.a098167f83"], "seed.dbt_warehouse.cps_tech": ["test.dbt_warehouse.not_null_cps_tech_cp_depart_int.0f6e103b70", "test.dbt_warehouse.not_null_cps_tech_cp_depart_texte.26dec0b408", "test.dbt_warehouse.not_null_cps_tech_cp_final_int.c6665bc5a0", "test.dbt_warehouse.not_null_cps_tech_cp_final_texte.6d08af0e28", "test.dbt_warehouse.not_null_cps_tech_libelle_cp.08a4b5acae", "test.dbt_warehouse.not_null_cps_tech_nom_departement.37af19b1e1", "test.dbt_warehouse.not_null_cps_tech_num_departement_texte.11ca48fdf7", "test.dbt_warehouse.not_null_cps_tech_region_tech.9237701bce", "test.dbt_warehouse.unique_cps_tech_cp_depart_int.cbed7e63d9", "test.dbt_warehouse.unique_cps_tech_cp_depart_texte.eef859cc87"], "seed.dbt_warehouse.dpt_metropole": ["model.dbt_warehouse.int_yuman__workorder_pricing", "test.dbt_warehouse.not_null_dpt_metropole_Departement.2478f9c919"], "seed.dbt_warehouse.machines_clean": ["model.dbt_warehouse.int_yuman__workorder_pricing", "test.dbt_warehouse.not_null_machines_clean_Machine_Brut.9276e8a97e"], "seed.dbt_warehouse.type_inter_clean": ["model.dbt_warehouse.int_yuman__workorder_pricing"], "seed.dbt_warehouse.techniciens_clean": ["test.dbt_warehouse.not_null_techniciens_clean_EQUIPE.722aa9e22a", "test.dbt_warehouse.not_null_techniciens_clean_TECHNICIEN.5de96efc7e"], "seed.dbt_warehouse.tarification_ref_clean": ["model.dbt_warehouse.int_yuman__workorder_pricing", "test.dbt_warehouse.not_null_tarification_ref_clean_KEY.967dd5c502", "test.dbt_warehouse.not_null_tarification_ref_clean_Montant.a0344161c1"], "test.dbt_warehouse.unique_stg_yuman__clients_client_id.f44f6dd39f": [], "test.dbt_warehouse.not_null_stg_yuman__clients_client_id.2396172faf": [], "test.dbt_warehouse.unique_stg_yuman__sites_site_id.c2fdd1abc3": [], "test.dbt_warehouse.not_null_stg_yuman__sites_site_id.7b80b04fc4": [], "test.dbt_warehouse.not_null_stg_yuman__sites_client_id.a2a87aa602": [], "test.dbt_warehouse.relationships_stg_yuman__sites_client_id__client_id__ref_stg_yuman__clients_.ab91ca52c3": [], "test.dbt_warehouse.unique_stg_yuman__materials_material_id.0de6595c40": [], "test.dbt_warehouse.not_null_stg_yuman__materials_material_id.ebfe5a9c25": [], "test.dbt_warehouse.not_null_stg_yuman__materials_site_id.e77c7f24c2": [], "test.dbt_warehouse.relationships_stg_yuman__materials_site_id__site_id__ref_stg_yuman__sites_.074fc55183": [], "test.dbt_warehouse.relationships_stg_yuman__materials_category_id__category_id__ref_stg_yuman__materials_categories_.14b0abe07f": [], "test.dbt_warehouse.unique_stg_yuman__products_product_id.da6f1079d3": [], "test.dbt_warehouse.not_null_stg_yuman__products_product_id.4e68e010db": [], "test.dbt_warehouse.unique_stg_yuman__users_user_id.e4b2c79cf4": [], "test.dbt_warehouse.not_null_stg_yuman__users_user_id.9881abfe99": [], "test.dbt_warehouse.unique_stg_yuman__workorder_demands_categories_demand_category_id.36d7a5e24e": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_categories_demand_category_id.5e8aa9b42e": [], "test.dbt_warehouse.unique_stg_yuman__workorder_demands_demand_id.adbb788cb2": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_demands_demand_id.12776f5dd4": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_client_id__client_id__ref_stg_yuman__clients_.71d22ac8fd": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_site_id__site_id__ref_stg_yuman__sites_.207aca79ff": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_material_id__material_id__ref_stg_yuman__materials_.0624c21af4": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_user_id__user_id__ref_stg_yuman__users_.605074afbf": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_demands_demand_category_id__demand_category_id__ref_stg_yuman__workorder_demands_categories_.871194aaa2": [], "test.dbt_warehouse.unique_stg_yuman__workorders_workorder_id.38a2d26084": [], "test.dbt_warehouse.not_null_stg_yuman__workorders_workorder_id.7745d31fcf": [], "test.dbt_warehouse.relationships_stg_yuman__workorders_client_id__client_id__ref_stg_yuman__clients_.2696f7708f": [], "test.dbt_warehouse.relationships_stg_yuman__workorders_site_id__site_id__ref_stg_yuman__sites_.966845c1c7": [], "test.dbt_warehouse.relationships_stg_yuman__workorders_category_id__category_id__ref_stg_yuman__workorders_categories_.c014c83acd": [], "test.dbt_warehouse.not_null_stg_yuman__workorders_created_at.0aad14f863": [], "test.dbt_warehouse.unique_stg_yuman__purchase_orders_purchase_order_line_id.6a52ee22dc": [], "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_line_id.d6eed878cf": [], "test.dbt_warehouse.not_null_stg_yuman__purchase_orders_purchase_order_id.668459bb5c": [], "test.dbt_warehouse.relationships_stg_yuman__purchase_orders_product_id__product_id__ref_stg_yuman__products_.ff6ab86020": [], "test.dbt_warehouse.unique_stg_yuman__workorder_products_workorder_product_id.1591ef7ef7": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_product_id.f12c8d1634": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_workorder_id.a954e8ba15": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_products_workorder_id__workorder_id__ref_stg_yuman__workorders_.c56a733e8f": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_id.92e35e7cb0": [], "test.dbt_warehouse.relationships_stg_yuman__workorder_products_product_id__product_id__ref_stg_yuman__products_.ed6480bad9": [], "test.dbt_warehouse.not_null_stg_yuman__workorder_products_product_quantity.9f9bbee75c": [], "test.dbt_warehouse.unique_stg_oracle_neshu__company_idcompany.f25c2833cc": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_idcompany.a1f4fb5739": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_idcompany_type__idcompany_type__ref_stg_oracle_neshu__company_type_.945a4fb37c": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation.a2b189f3f3": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idlocation__idlocation__ref_stg_oracle_neshu__location_.a32b27875e": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idcompany.ed01157bcd": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__company_has_location_idcompany__idcompany__ref_stg_oracle_neshu__company_.801bad8c2d": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_has_location_idlocation_type.9d6f83a35c": [], "test.dbt_warehouse.unique_stg_oracle_neshu__company_type_idcompany_type.d5392ad073": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__company_type_idcompany_type.7432808513": [], "test.dbt_warehouse.unique_stg_oracle_neshu__contact_idcontact.fc71eec394": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__contact_idcontact.257cd1bcbe": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__contact_idcompany__idcompany__ref_stg_oracle_neshu__company_.2dd653d1ee": [], "test.dbt_warehouse.unique_stg_oracle_neshu__contract_idcontract.7b7904e17e": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__contract_idcontract.fd3fe25c02": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__contract_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.8ccff45442": [], "test.dbt_warehouse.unique_stg_oracle_neshu__device_iddevice.0ca29b8e9a": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__device_iddevice.27e0db8158": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idlocation__idlocation__ref_stg_oracle_neshu__location_.4b2426f16b": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_customer__idcompany__ref_stg_oracle_neshu__company_.b388815945": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_supplier__idcompany__ref_stg_oracle_neshu__company_.44ccca01df": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__device_idcompany_owner__idcompany__ref_stg_oracle_neshu__company_.e812fc7be1": [], "test.dbt_warehouse.unique_stg_oracle_neshu__label_idlabel.9ab3749a9c": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_idlabel.f0d32bb28d": [], "test.dbt_warehouse.unique_stg_oracle_neshu__label_family_idlabel_family.bcaa4d9c71": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_family_idlabel_family.da97b662a1": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idlabel.1abe8b79c5": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idlabel__idlabel__ref_stg_oracle_neshu__label_.4081c7be89": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_company_idcompany.b2f23ed472": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_company_idcompany__idcompany__ref_stg_oracle_neshu__company_.66c4f4fc27": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idlabel.6c3946bf93": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idlabel__idlabel__ref_stg_oracle_neshu__label_.d7a7c60364": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_contract_idcontract.dbb35a2666": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_contract_idcontract__idcontract__ref_stg_oracle_neshu__contract_.e5b8eb3f0a": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_idlabel.2efbd34860": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_idlabel__idlabel__ref_stg_oracle_neshu__label_.9d728f2f84": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_device_iddevice.c9592a7b37": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_device_iddevice__iddevice__ref_stg_oracle_neshu__device_.3c06d4671c": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idlabel.c10c951091": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idlabel__idlabel__ref_stg_oracle_neshu__label_.5b4fd68430": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_product_idproduct.48b2a5d583": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.f60b56a60c": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idlabel.03938ed9d6": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idlabel__idlabel__ref_stg_oracle_neshu__label_.e6142d2b42": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_resources_idresources.c45dd6d64e": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__label_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.400dad49ad": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idlabel.231c8d8c24": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__label_has_task_idtask.dd0526ea2b": [], "test.dbt_warehouse.unique_stg_oracle_neshu__location_idlocation.1903e54c83": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__location_idlocation.fc8389056b": [], "test.dbt_warehouse.unique_stg_oracle_neshu__product_idproduct.ecd2622966": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__product_idproduct.2c91d8d9c3": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__product_idproduct_type__idproduct_type__ref_stg_oracle_neshu__product_type_.6fbc9b03a0": [], "test.dbt_warehouse.unique_stg_oracle_neshu__product_type_idproduct_type.9bdaa55835": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__product_type_idproduct_type.99ebe48fd1": [], "test.dbt_warehouse.unique_stg_oracle_neshu__resources_idresources.20bf66b8cb": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_idresources.eb8d9bd2ca": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idcompany__idcompany__ref_stg_oracle_neshu__company_.a03aed6b41": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idlocation__idlocation__ref_stg_oracle_neshu__location_.763e5415e9": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__resources_idresources_type__idresources_type__ref_stg_oracle_neshu__resources_type_.0a90a13b3c": [], "test.dbt_warehouse.unique_stg_oracle_neshu__resources_type_idresources_type.60d0042392": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__resources_type_idresources_type.9e5d062342": [], "test.dbt_warehouse.unique_stg_oracle_neshu__task_idtask.d1f0e7ba99": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_idtask.2b9ac7a02d": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9ee5ef13e5": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_type__idtask_type__ref_stg_oracle_neshu__task_type_.b77e854b8e": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idtask_status__idtask_status__ref_stg_oracle_neshu__task_status_.8e6c31af0d": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_iddevice__iddevice__ref_stg_oracle_neshu__device_.03aef0389f": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idcontact__idcontact__ref_stg_oracle_neshu__contact_.ded621d0d6": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_idlocation__idlocation__ref_stg_oracle_neshu__location_.8b4be19759": [], "test.dbt_warehouse.unique_stg_oracle_neshu__task_has_product_idtask_has_product.3f7428b52a": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_product_idtask_has_product.d3f98a1a05": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idtask__idtask__ref_stg_oracle_neshu__task_.e57798c3a4": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idproduct__idproduct__ref_stg_oracle_neshu__product_.0304257578": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_product_idcompany_peer__idcompany__ref_stg_oracle_neshu__company_.9958fec509": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idtask.c853c7eb7b": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idtask__idtask__ref_stg_oracle_neshu__task_.50dbc0d63f": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_has_resources_idresources.5afdfd82d8": [], "test.dbt_warehouse.relationships_stg_oracle_neshu__task_has_resources_idresources__idresources__ref_stg_oracle_neshu__resources_.27237e11eb": [], "test.dbt_warehouse.unique_stg_oracle_neshu__task_status_idtask_status.6822490986": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_status_idtask_status.fb3f3fc34e": [], "test.dbt_warehouse.unique_stg_oracle_neshu__task_type_idtask_type.6a67987299": [], "test.dbt_warehouse.not_null_stg_oracle_neshu__task_type_idtask_type.30b55370e2": [], "test.dbt_warehouse.unique_dim_yuman__clients_client_id.12116495a3": [], "test.dbt_warehouse.not_null_dim_yuman__clients_client_id.bb975d2fa4": [], "test.dbt_warehouse.unique_dim_yuman__sites_site_id.97c9826437": [], "test.dbt_warehouse.not_null_dim_yuman__sites_site_id.d284592881": [], "test.dbt_warehouse.not_null_dim_yuman__sites_client_id.cd8fb92b93": [], "test.dbt_warehouse.relationships_dim_yuman__sites_client_id__client_id__ref_dim_yuman__clients_.3c8b8aee42": [], "test.dbt_warehouse.unique_dim_yuman__materials_material_id.a2c990b4a9": [], "test.dbt_warehouse.not_null_dim_yuman__materials_material_id.8e2898dbe5": [], "test.dbt_warehouse.not_null_dim_yuman__materials_site_id.614d463e6e": [], "test.dbt_warehouse.relationships_dim_yuman__materials_site_id__site_id__ref_dim_yuman__sites_.73849dcc87": [], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_material_id.65161533d1": [], "test.dbt_warehouse.unique_dim_yuman__materials_clients_material_id.3293b73ed8": [], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_client_id.307466ae21": [], "test.dbt_warehouse.not_null_dim_yuman__materials_clients_site_id.00254a1aa0": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__company_company_id.2286b3d824": [], "test.dbt_warehouse.unique_dim_oracle_neshu__company_company_id.d6aabe0e95": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__product_product_id.d69a3b14d1": [], "test.dbt_warehouse.unique_dim_oracle_neshu__product_product_id.ba747134a3": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__device_device_id.51db00e9ef": [], "test.dbt_warehouse.unique_dim_oracle_neshu__device_device_id.cbb3e59fc9": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__device_company_id.e17a3c2fb4": [], "test.dbt_warehouse.relationships_dim_oracle_neshu__device_company_id__company_id__ref_dim_oracle_neshu__company_.72b98eee1b": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_id.ce47b5568c": [], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_company_id__company_id__ref_dim_oracle_neshu__company_.f366f159ac": [], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.28a6562f85": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_id.8da405d6c4": [], "test.dbt_warehouse.relationships_fct_oracle_neshu__conso_business_review_product_id__product_id__ref_dim_oracle_neshu__product_.8d74866c2a": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_code.5a6eede86e": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_company_name.6beef2cb38": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_name.08b08915c7": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_product_type.e47220660c": [], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_product_type__THE__CAFE_CAPS__CHOCOLATS_VAN_HOUTEN__BOISSONS_GOURMANDES__ACCESSOIRES__CAFENOIR__INDEFINI__SNACKING__BOISSONS_FRAICHES.09a104a84b": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_consumption_date.a8716670d9": [], "test.dbt_warehouse.dbt_utils_accepted_range_fct_oracle_neshu__conso_business_review_consumption_date__current_date____2020_01_01_.5aa992f77c": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_data_source.af5248f6f7": [], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__conso_business_review_data_source__TELEMETRIE__CHARGEMENT__LIVRAISON.5ec7a388a7": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_quantity.b59694399a": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_updated_at.15c85805ca": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__conso_business_review_dbt_invocation_id.50b356c305": [], "test.dbt_warehouse.unique_consumption_record.1740417b5a": [], "test.dbt_warehouse.device_id_required_except_livraison.acb84a4429": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_id.b47f804afa": [], "test.dbt_warehouse.unique_fct_oracle_neshu__pa_business_review_task_id.e6a4a507a2": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_code.4dd651bc02": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_company_info.8eeabe00a1": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_id.cb546c4a7e": [], "test.dbt_warehouse.relationships_fct_oracle_neshu__pa_business_review_device_id__device_id__ref_dim_oracle_neshu__device_.94d4d49600": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_device_info.08be705635": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_start_date.8dceb0b3e4": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_task_status_code.b0aa10d1d0": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_faite.4c914d3f47": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__pa_business_review_mission_prevue.79cb0b2a32": [], "test.dbt_warehouse.unique_dim_oracle_neshu__contract_contract_id.2498b48ad2": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_contract_id.28d4af45b3": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_is_active.9600c93d58": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_created_at.5dc61f7cd8": [], "test.dbt_warehouse.not_null_dim_oracle_neshu__contract_updated_at.f826ba71d3": [], "test.dbt_warehouse.dbt_utils_unique_combination_of_columns_dim_oracle_neshu__contract_company_id.73a6310d39": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_id.980098d686": [], "test.dbt_warehouse.unique_fct_oracle_neshu__machines_maintenance_tracking_device_id.259a568a16": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_code.21e30b32f5": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_name.27263a7181": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_code.0cdf0f5a6b": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_company_name.3bf8fed65d": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_device_last_installation_date.2fb83a6c11": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_bol.1a01596ee3": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_retard_delai.90bc56ccbd": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive.00eb8f212a": [], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_source_last_preventive__yuman__dlog__aucune.ac417d2f59": [], "test.dbt_warehouse.not_null_fct_oracle_neshu__machines_maintenance_tracking_status_inter.169cfdb158": [], "test.dbt_warehouse.accepted_values_fct_oracle_neshu__machines_maintenance_tracking_status_inter__Ouvert__Planifie__Aucune.808c90cc4e": [], "test.dbt_warehouse.unique_int_oracle_neshu__telemetry_tasks_task_product_id.4d229c656f": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_product_id.3c6e38ed4d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_id.2a5854e826": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_product_id.04e1d8477d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_task_start_date.66646fa50e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_updated_at.8d8d17e88a": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_created_at.ef85effe50": [], "test.dbt_warehouse.not_null_int_oracle_neshu__telemetry_tasks_extracted_at.5c3a5f7ac5": [], "test.dbt_warehouse.unique_int_oracle_neshu__chargement_tasks_task_product_id.f02aff9a5d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_product_id.22016f77c7": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_id.dbf995a952": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_product_id.97e92b8f9e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_task_start_date.18b12689c3": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_updated_at.cfb1806175": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_created_at.099654dbc5": [], "test.dbt_warehouse.not_null_int_oracle_neshu__chargement_tasks_extracted_at.7247f9f7e5": [], "test.dbt_warehouse.unique_int_oracle_neshu__livraison_tasks_task_product_id.011a4e9629": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_product_id.e3b9b08f8d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_id.aed5d7619e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_product_id.8522aad15d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_task_start_date.341a694abf": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_updated_at.4ae155633f": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_created_at.d2d3de44aa": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_tasks_extracted_at.175de36255": [], "test.dbt_warehouse.unique_int_oracle_neshu__inventaire_tasks_task_product_id.6de7c4abb7": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_product_id.40c0d72097": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_id.12d8825475": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_product_id.315d649f9b": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_task_start_date.6ab0a21e68": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_updated_at.ed499f687b": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_created_at.e03cda86f7": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inventaire_tasks_extracted_at.ce6508aabf": [], "test.dbt_warehouse.unique_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.0895448e86": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_product_id.e6945505d5": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_id.a45f2ce08b": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_product_id.7f8ffacb68": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_task_start_date.6192042d8e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_updated_at.a93b91f4db": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_created_at.7d0fcea0cf": [], "test.dbt_warehouse.not_null_int_oracle_neshu__ecart_inventaire_tasks_extracted_at.3521403fea": [], "test.dbt_warehouse.unique_int_oracle_neshu__reception_tasks_task_product_id.bf4c38de57": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_product_id.af91258a78": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_id.73ba57ad4f": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_product_id.aa8ad941b0": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_task_start_date.eb50f49146": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_updated_at.2d211b0f61": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_created_at.8083bcc7e8": [], "test.dbt_warehouse.not_null_int_oracle_neshu__reception_tasks_extracted_at.ec88db7302": [], "test.dbt_warehouse.unique_int_oracle_neshu__livraison_interne_tasks_task_product_id.cca996b12e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_product_id.4515c1033a": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_id.3d326d6d80": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_product_id.84345d9252": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_task_start_date.a2d90a847c": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_updated_at.40f144213d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_created_at.c6d4b559be": [], "test.dbt_warehouse.not_null_int_oracle_neshu__livraison_interne_tasks_extracted_at.931738aaac": [], "test.dbt_warehouse.unique_int_oracle_neshu__appro_tasks_task_id.27c5ab3d17": [], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_id.afbab212ea": [], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_task_start_date.8e28b8d3b2": [], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_updated_at.297f723da2": [], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_created_at.2224651e8c": [], "test.dbt_warehouse.not_null_int_oracle_neshu__appro_tasks_extracted_at.11b43558e3": [], "test.dbt_warehouse.unique_int_oracle_neshu__inter_techinique_tasks_task_id.e6fbe5979b": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_id.2ab30c87a3": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_device_id.a4926002cf": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_company_id.963bf0b41a": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_task_start_date.4d976b328e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_updated_at.75a6fbc88b": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_created_at.23cf274781": [], "test.dbt_warehouse.not_null_int_oracle_neshu__inter_techinique_tasks_extracted_at.ebb7615afa": [], "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_id.eb5ccd792d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__machines_yuman_maintenance_base_device_code.a8d1d80e51": [], "test.dbt_warehouse.unique_int_oracle_neshu__commande_interne_task_product_id.b43ba28698": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_product_id.acafb99a38": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_id.feb7a19392": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_product_id.422706e73d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_source_code.806024b65d": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_destination_code.60865e1142": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_task_start_date.863ef2a87e": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_updated_at.bfec986bee": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_created_at.49335f4f3a": [], "test.dbt_warehouse.not_null_int_oracle_neshu__commande_interne_extracted_at.9d5f1d0c81": [], "test.dbt_warehouse.not_null_cp_metropole_Code_Postal.a098167f83": [], "test.dbt_warehouse.not_null_dpt_metropole_Departement.2478f9c919": [], "test.dbt_warehouse.not_null_machines_clean_Machine_Brut.9276e8a97e": [], "test.dbt_warehouse.not_null_techniciens_clean_TECHNICIEN.5de96efc7e": [], "test.dbt_warehouse.not_null_techniciens_clean_EQUIPE.722aa9e22a": [], "test.dbt_warehouse.not_null_tarification_ref_clean_KEY.967dd5c502": [], "test.dbt_warehouse.not_null_tarification_ref_clean_Montant.a0344161c1": [], "test.dbt_warehouse.not_null_cps_tech_cp_depart_int.0f6e103b70": [], "test.dbt_warehouse.unique_cps_tech_cp_depart_int.cbed7e63d9": [], "test.dbt_warehouse.not_null_cps_tech_cp_depart_texte.26dec0b408": [], "test.dbt_warehouse.unique_cps_tech_cp_depart_texte.eef859cc87": [], "test.dbt_warehouse.not_null_cps_tech_cp_final_int.c6665bc5a0": [], "test.dbt_warehouse.not_null_cps_tech_cp_final_texte.6d08af0e28": [], "test.dbt_warehouse.not_null_cps_tech_libelle_cp.08a4b5acae": [], "test.dbt_warehouse.not_null_cps_tech_num_departement_texte.11ca48fdf7": [], "test.dbt_warehouse.not_null_cps_tech_nom_departement.37af19b1e1": [], "test.dbt_warehouse.not_null_cps_tech_region_tech.9237701bce": [], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_nom.bf00f207d7": [], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_prenom.4042de33dc": [], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_agence.bdf757feb6": [], "test.dbt_warehouse.not_null_tech_piece_agence_mapping_equipe.1e972b6e33": [], "test.dbt_warehouse.dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne.d6b0f7b301": [], "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.ce4c2c11f4": [], "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.7d3e1176b7": [], "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturec_ec_no.6925cf7be5": [], "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.714fd67ceb": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_clients_id.ac9ad6b2fc": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_clients_id.94442bf14b": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_sites_id.c7e2661f2f": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_id.cc7391839c": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_client_id.6e84614dea": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_materials_id.627fc0bbcf": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_id.ef8e1020be": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_site_id.f462c1646e": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_material_categories_id.8e8a025d0a": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_material_categories_id.4ef54c952f": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_products_id.0797f24444": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_products_id.9d76ec0f24": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_users_id.9323495945": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_users_id.d5dd93c383": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_categories_id.d7d762a90b": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_categories_id.a8a4d3d9e4": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_id.61272d2b5b": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_id.2951fa446c": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorders_id.cf3a021d13": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorders_id.e6c047d2a1": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_categories_id.ae2a36c8ed": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_categories_id.481d28172c": [], "test.dbt_warehouse.source_unique_yuman_api_yuman_purchase_orders_id.1a3a583089": [], "test.dbt_warehouse.source_not_null_yuman_api_yuman_purchase_orders_id.3eb709d1c8": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_idcompany.6df2f6792e": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_idcompany.c223201709": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idcompany.d2e7a813ca": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation.e1aaef8e8b": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation_type.b7ffe23a12": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_type_idcompany_type.56f35aae37": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_type_idcompany_type.11fcffba5d": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contact_idcontact.d870dc347d": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contact_idcontact.d426a1c13e": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_idcontract.00683b26ea": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_idcontract.f730c61b9d": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_parsed_idcontract.88000e1326": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_parsed_idcontract.34a4825dee": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_device_iddevice.397252bea8": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_device_iddevice.d62f2bee11": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_idlabel.f4f4d52728": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_idlabel.725504fd88": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_family_idlabel_family.52acfecf7e": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_family_idlabel_family.76e2fc3d22": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idlabel.84c84e0808": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idcompany.9fb5a691bb": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idlabel.1500ee3c29": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idcontract.34f534407d": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_idlabel.7913e12518": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_iddevice.67fa8a09c3": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idlabel.5191f399c0": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idproduct.6048527bb0": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idlabel.eabdfa7bbf": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idresources.701adf32da": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idlabel.9722fba510": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idtask.407d48dbcb": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_location_idlocation.e07de44c8b": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_location_idlocation.252e77f735": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_idproduct.56c841c209": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_idproduct.0e5cc2ab70": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_type_idproduct_type.f77e407933": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_type_idproduct_type.2e7c2d534c": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_idresources.65588abfd8": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_idresources.04add56fa5": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_type_idresources_type.94e4b1617f": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_type_idresources_type.c0ade33349": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_idtask.e261c356e9": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_idtask.d1aa0b27a5": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_has_product_idtask_has_product.b9af110684": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product.52f463d476": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idtask.3c6bbcc3c8": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idresources.6896d0d7f1": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_status_idtask_status.b176cc0c5b": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_status_idtask_status.2b475b6b56": [], "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_type_idtask_type.3b8b3b9ff6": [], "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_type_idtask_type.d7f9ba800f": [], "source.dbt_warehouse.mssql_sage.dbo_f_ecriturea": ["test.dbt_warehouse.dbt_utils_source_unique_combination_of_columns_mssql_sage_dbo_f_ecriturea_ec_no__n_analytique__ea_ligne.d6b0f7b301", "test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturea_cb_marq.7d3e1176b7", "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturea_cb_marq.ce4c2c11f4"], "source.dbt_warehouse.mssql_sage.dbo_f_ecriturec": ["test.dbt_warehouse.source_not_null_mssql_sage_dbo_f_ecriturec_ec_no.714fd67ceb", "test.dbt_warehouse.source_unique_mssql_sage_dbo_f_ecriturec_ec_no.6925cf7be5"], "source.dbt_warehouse.yuman_api.yuman_clients": ["model.dbt_warehouse.stg_yuman__clients", "test.dbt_warehouse.source_not_null_yuman_api_yuman_clients_id.94442bf14b", "test.dbt_warehouse.source_unique_yuman_api_yuman_clients_id.ac9ad6b2fc"], "source.dbt_warehouse.yuman_api.yuman_sites": ["model.dbt_warehouse.stg_yuman__sites", "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_client_id.6e84614dea", "test.dbt_warehouse.source_not_null_yuman_api_yuman_sites_id.cc7391839c", "test.dbt_warehouse.source_unique_yuman_api_yuman_sites_id.c7e2661f2f"], "source.dbt_warehouse.yuman_api.yuman_materials": ["model.dbt_warehouse.stg_yuman__materials", "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_id.ef8e1020be", "test.dbt_warehouse.source_not_null_yuman_api_yuman_materials_site_id.f462c1646e", "test.dbt_warehouse.source_unique_yuman_api_yuman_materials_id.627fc0bbcf"], "source.dbt_warehouse.yuman_api.yuman_material_categories": ["model.dbt_warehouse.stg_yuman__materials_categories", "test.dbt_warehouse.source_not_null_yuman_api_yuman_material_categories_id.4ef54c952f", "test.dbt_warehouse.source_unique_yuman_api_yuman_material_categories_id.8e8a025d0a"], "source.dbt_warehouse.yuman_api.yuman_products": ["model.dbt_warehouse.stg_yuman__products", "test.dbt_warehouse.source_not_null_yuman_api_yuman_products_id.9d76ec0f24", "test.dbt_warehouse.source_unique_yuman_api_yuman_products_id.0797f24444"], "source.dbt_warehouse.yuman_api.yuman_users": ["model.dbt_warehouse.stg_yuman__users", "test.dbt_warehouse.source_not_null_yuman_api_yuman_users_id.d5dd93c383", "test.dbt_warehouse.source_unique_yuman_api_yuman_users_id.9323495945"], "source.dbt_warehouse.yuman_api.yuman_workorder_demands_categories": ["model.dbt_warehouse.stg_yuman__workorder_demands_categories", "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_categories_id.a8a4d3d9e4", "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_categories_id.d7d762a90b"], "source.dbt_warehouse.yuman_api.yuman_workorder_demands": ["model.dbt_warehouse.stg_yuman__workorder_demands", "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_demands_id.2951fa446c", "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_demands_id.61272d2b5b"], "source.dbt_warehouse.yuman_api.yuman_workorders": ["model.dbt_warehouse.stg_yuman__workorder_products", "model.dbt_warehouse.stg_yuman__workorders", "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorders_id.e6c047d2a1", "test.dbt_warehouse.source_unique_yuman_api_yuman_workorders_id.cf3a021d13"], "source.dbt_warehouse.yuman_api.yuman_workorder_categories": ["model.dbt_warehouse.stg_yuman__workorders_categories", "test.dbt_warehouse.source_not_null_yuman_api_yuman_workorder_categories_id.481d28172c", "test.dbt_warehouse.source_unique_yuman_api_yuman_workorder_categories_id.ae2a36c8ed"], "source.dbt_warehouse.yuman_api.yuman_purchase_orders": ["model.dbt_warehouse.stg_yuman__purchase_orders", "test.dbt_warehouse.source_not_null_yuman_api_yuman_purchase_orders_id.3eb709d1c8", "test.dbt_warehouse.source_unique_yuman_api_yuman_purchase_orders_id.1a3a583089"], "source.dbt_warehouse.oracle_neshu.evs_company": ["model.dbt_warehouse.stg_oracle_neshu__company", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_idcompany.c223201709", "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_idcompany.6df2f6792e"], "source.dbt_warehouse.oracle_neshu.evs_company_has_location": ["model.dbt_warehouse.stg_oracle_neshu__company_has_location", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idcompany.d2e7a813ca", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation.e1aaef8e8b", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_has_location_idlocation_type.b7ffe23a12"], "source.dbt_warehouse.oracle_neshu.evs_company_type": ["model.dbt_warehouse.stg_oracle_neshu__company_type", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_company_type_idcompany_type.11fcffba5d", "test.dbt_warehouse.source_unique_oracle_neshu_evs_company_type_idcompany_type.56f35aae37"], "source.dbt_warehouse.oracle_neshu.evs_contact": ["model.dbt_warehouse.stg_oracle_neshu__contact", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contact_idcontact.d426a1c13e", "test.dbt_warehouse.source_unique_oracle_neshu_evs_contact_idcontact.d870dc347d"], "source.dbt_warehouse.oracle_neshu.evs_contract": ["model.dbt_warehouse.stg_oracle_neshu__contract", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_idcontract.f730c61b9d", "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_idcontract.00683b26ea"], "source.dbt_warehouse.oracle_neshu.evs_contract_parsed": ["model.dbt_warehouse.stg_oracle_neshu__contract", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_contract_parsed_idcontract.34a4825dee", "test.dbt_warehouse.source_unique_oracle_neshu_evs_contract_parsed_idcontract.88000e1326"], "source.dbt_warehouse.oracle_neshu.evs_device": ["model.dbt_warehouse.stg_oracle_neshu__device", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_device_iddevice.d62f2bee11", "test.dbt_warehouse.source_unique_oracle_neshu_evs_device_iddevice.397252bea8"], "source.dbt_warehouse.oracle_neshu.evs_label": ["model.dbt_warehouse.stg_oracle_neshu__label", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_idlabel.725504fd88", "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_idlabel.f4f4d52728"], "source.dbt_warehouse.oracle_neshu.evs_label_family": ["model.dbt_warehouse.stg_oracle_neshu__label_family", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_family_idlabel_family.76e2fc3d22", "test.dbt_warehouse.source_unique_oracle_neshu_evs_label_family_idlabel_family.52acfecf7e"], "source.dbt_warehouse.oracle_neshu.evs_label_has_company": ["model.dbt_warehouse.stg_oracle_neshu__label_has_company", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idcompany.9fb5a691bb", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_company_idlabel.84c84e0808"], "source.dbt_warehouse.oracle_neshu.evs_label_has_contract": ["model.dbt_warehouse.stg_oracle_neshu__label_has_contract", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idcontract.34f534407d", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_contract_idlabel.1500ee3c29"], "source.dbt_warehouse.oracle_neshu.evs_label_has_device": ["model.dbt_warehouse.stg_oracle_neshu__label_has_device", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_iddevice.67fa8a09c3", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_device_idlabel.7913e12518"], "source.dbt_warehouse.oracle_neshu.evs_label_has_product": ["model.dbt_warehouse.stg_oracle_neshu__label_has_product", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idlabel.5191f399c0", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_product_idproduct.6048527bb0"], "source.dbt_warehouse.oracle_neshu.evs_label_has_resources": ["model.dbt_warehouse.stg_oracle_neshu__label_has_resources", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idlabel.eabdfa7bbf", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_resources_idresources.701adf32da"], "source.dbt_warehouse.oracle_neshu.evs_label_has_task": ["model.dbt_warehouse.stg_oracle_neshu__label_has_task", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idlabel.9722fba510", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_label_has_task_idtask.407d48dbcb"], "source.dbt_warehouse.oracle_neshu.evs_location": ["model.dbt_warehouse.stg_oracle_neshu__location", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_location_idlocation.252e77f735", "test.dbt_warehouse.source_unique_oracle_neshu_evs_location_idlocation.e07de44c8b"], "source.dbt_warehouse.oracle_neshu.evs_product": ["model.dbt_warehouse.stg_oracle_neshu__product", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_idproduct.0e5cc2ab70", "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_idproduct.56c841c209"], "source.dbt_warehouse.oracle_neshu.evs_product_type": ["model.dbt_warehouse.stg_oracle_neshu__product_type", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_product_type_idproduct_type.2e7c2d534c", "test.dbt_warehouse.source_unique_oracle_neshu_evs_product_type_idproduct_type.f77e407933"], "source.dbt_warehouse.oracle_neshu.evs_resources": ["model.dbt_warehouse.stg_oracle_neshu__resources", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_idresources.04add56fa5", "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_idresources.65588abfd8"], "source.dbt_warehouse.oracle_neshu.evs_resources_type": ["model.dbt_warehouse.stg_oracle_neshu__resources_type", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_resources_type_idresources_type.c0ade33349", "test.dbt_warehouse.source_unique_oracle_neshu_evs_resources_type_idresources_type.94e4b1617f"], "source.dbt_warehouse.oracle_neshu.evs_task": ["model.dbt_warehouse.stg_oracle_neshu__task", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_idtask.d1aa0b27a5", "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_idtask.e261c356e9"], "source.dbt_warehouse.oracle_neshu.evs_task_has_product": ["model.dbt_warehouse.stg_oracle_neshu__task_has_product", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_product_idtask_has_product.52f463d476", "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_has_product_idtask_has_product.b9af110684"], "source.dbt_warehouse.oracle_neshu.evs_task_has_resources": ["model.dbt_warehouse.stg_oracle_neshu__task_has_resources", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idresources.6896d0d7f1", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_has_resources_idtask.3c6bbcc3c8"], "source.dbt_warehouse.oracle_neshu.evs_task_status": ["model.dbt_warehouse.stg_oracle_neshu__task_status", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_status_idtask_status.2b475b6b56", "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_status_idtask_status.b176cc0c5b"], "source.dbt_warehouse.oracle_neshu.evs_task_type": ["model.dbt_warehouse.stg_oracle_neshu__task_type", "test.dbt_warehouse.source_not_null_oracle_neshu_evs_task_type_idtask_type.d7f9ba800f", "test.dbt_warehouse.source_unique_oracle_neshu_evs_task_type_idtask_type.3b8b3b9ff6"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}, "functions": {}}